<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于本站主题标签Tag Plugins</title>
      <link href="/blog//2020/10/05/about-this-site-theme-tag-tag-plugins.html"/>
      <url>/blog//2020/10/05/about-this-site-theme-tag-tag-plugins.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong><span id="more"></span></li></ul><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>本站主题中大部分标签移植于<a href="https://akilar.top/">店长</a>的<a href="https://www.npmjs.com/package/hexo-butterfly-tag-plugins-plus">hexo-butterfly-tag-plugins-plus</a></p></div><h1 id="title"><a href="#title" class="headerlink" title="title"></a>title</h1><div class="tabs" id="test1-3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-3-1">标签语法</button><button type="button" class="tab " data-href="test1-3-2">配置参数</button><button type="button" class="tab " data-href="test1-3-3">样式预览</button><button type="button" class="tab " data-href="test1-3-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-3-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-3-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3-3"><p><strong>This is Tab 3.</strong></p></div><div class="tab-item-content" id="test1-3-4"><p><strong>This is Tab 4.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><div class="tabs" id="test1-1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1-1">标签语法</button><button type="button" class="tab " data-href="test1-1-2">配置参数</button><button type="button" class="tab " data-href="test1-1-3">样式预览</button><button type="button" class="tab " data-href="test1-1-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test1-1-2"><ul><li>字体: logo, code</li><li>颜色: red,yellow,green,cyan,blue,gray</li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ul></div><div class="tab-item-content" id="test1-1-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul></div><div class="tab-item-content" id="test1-1-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">  在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">  文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">  &#123;% p center logo large, Volantis %&#125;</span><br><span class="line">  &#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><div class="tabs" id="test1-3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-3-1">标签语法</button><button type="button" class="tab " data-href="test1-3-2">配置参数</button><button type="button" class="tab " data-href="test1-3-3">样式预览</button><button type="button" class="tab " data-href="test1-3-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-3-1"><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">span</span> 样式参数(参数以空格划分), 文本内容 %&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test1-3-2"><ul><li>字体: logo, code</li><li>颜色: red,yellow,green,cyan,blue,gray</li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ul></div><div class="tab-item-content" id="test1-3-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul></div><div class="tab-item-content" id="test1-3-4"><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">- 彩色文字</span></span><br><span class="line"><span class="language-xml">  在一段话中方便插入各种颜色的标签，包括：</span><span class="template-tag">&#123;% <span class="name">span</span> red, 红色 %&#125;</span><span class="language-xml">、</span><span class="template-tag">&#123;% <span class="name">span</span> yellow, 黄色 %&#125;</span><span class="language-xml">、</span><span class="template-tag">&#123;% <span class="name">span</span> green, 绿色 %&#125;</span><span class="language-xml">、</span><span class="template-tag">&#123;% <span class="name">span</span> cyan, 青色 %&#125;</span><span class="language-xml">、</span><span class="template-tag">&#123;% <span class="name">span</span> blue, 蓝色 %&#125;</span><span class="language-xml">、</span><span class="template-tag">&#123;% <span class="name">span</span> gray, 灰色 %&#125;</span><span class="language-xml">。</span></span><br><span class="line"><span class="language-xml">- 超大号文字</span></span><br><span class="line"><span class="language-xml">  文档「开始」页面中的标题部分就是超大号文字。</span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;% <span class="name">span</span> center logo large, Volantis %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;% <span class="name">span</span> center small, A Wonderful Theme for Hexo %&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><div class="tabs" id="test1-3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-3-1">标签语法</button><button type="button" class="tab " data-href="test1-3-2">配置参数</button><button type="button" class="tab " data-href="test1-3-3">样式预览</button><button type="button" class="tab " data-href="test1-3-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-3-1"><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">u</span> 文本内容 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">emp</span> 文本内容 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">wavy</span> 文本内容 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">del</span> 文本内容 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">kbd</span> 文本内容 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">psw</span> 文本内容 %&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test1-3-2"><p>无</p></div><div class="tab-item-content" id="test1-3-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol></div><div class="tab-item-content" id="test1-3-4"><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">1. 带 </span><span class="template-tag">&#123;% <span class="name">u</span> 下划线 %&#125;</span><span class="language-xml"> 的文本</span></span><br><span class="line"><span class="language-xml">2. 带 </span><span class="template-tag">&#123;% <span class="name">emp</span> 着重号 %&#125;</span><span class="language-xml"> 的文本</span></span><br><span class="line"><span class="language-xml">3. 带 </span><span class="template-tag">&#123;% <span class="name">wavy</span> 波浪线 %&#125;</span><span class="language-xml"> 的文本</span></span><br><span class="line"><span class="language-xml">4. 带 </span><span class="template-tag">&#123;% <span class="name">del</span> 删除线 %&#125;</span><span class="language-xml"> 的文本</span></span><br><span class="line"><span class="language-xml">5. 键盘样式的文本 </span><span class="template-tag">&#123;% <span class="name">kbd</span> command %&#125;</span><span class="language-xml"> + </span><span class="template-tag">&#123;% <span class="name">kbd</span> D %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">6. 密码样式的文本：</span><span class="template-tag">&#123;% <span class="name">psw</span> 这里没有验证码 %&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><div class="tabs" id="test1-3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-3-1">标签语法</button><button type="button" class="tab " data-href="test1-3-2">配置参数</button><button type="button" class="tab " data-href="test1-3-3">样式预览</button><button type="button" class="tab " data-href="test1-3-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-3-1"><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tabs</span> Unique name, [index] %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab [Tab caption] [@icon] --&gt;</span></span></span><br><span class="line"><span class="language-xml">Any content (support inline tags too).</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test1-3-2"><ul><li>Unique name :<br>选项卡块标签的唯一名称，不带逗号。<br>将在#id 中用作每个标签及其索引号的前缀。</li></ul><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。<br>仅当前帖子&#x2F;页面的 URL 必须是唯一的！</p><ul><li>如果未指定，将选择第一个标签（1）。<br>如果 index 为-1，则不会选择任何选项卡。<br>可选参数。</li><li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。<br>如果未指定标题，但指定了图标，则标题将为空。<br>可选参数。</li><li>[@icon]: <ul><li>FontAwesome 图标名称（全名，类似于“ fas fa-font”），可以指定带空格或不带空格； 例如’Tab caption @icon’ 和 ‘Tab caption@icon’. 可选参数。</li></ul></li></ul></div><div class="tab-item-content" id="test1-3-3"><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="test1-3-4"><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tabs</span> test1 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab --&gt;</span></span></span><br><span class="line"><span class="language-xml">**This is Tab 1.**</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab --&gt;</span></span></span><br><span class="line"><span class="language-xml">**This is Tab 2.**</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab --&gt;</span></span></span><br><span class="line"><span class="language-xml">**This is Tab 3.**</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="title-1"><a href="#title-1" class="headerlink" title="title"></a>title</h1><div class="tabs" id="test1-3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-3-1">标签语法</button><button type="button" class="tab " data-href="test1-3-2">配置参数</button><button type="button" class="tab " data-href="test1-3-3">样式预览</button><button type="button" class="tab " data-href="test1-3-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-3-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-3-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3-3"><p><strong>This is Tab 3.</strong></p></div><div class="tab-item-content" id="test1-3-4"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub一键部署</title>
      <link href="/blog//2020/03/15/github-one-click-deployment.html"/>
      <url>/blog//2020/03/15/github-one-click-deployment.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong><span id="more"></span></li></ul><p>此教程参考 <a href="https://akilar.top/posts/f752c86d/">🧊Akilar の糖果屋 🍭</a>，转载需注明出处。</p><h3 id="Github-Action-简介"><a href="#Github-Action-简介" class="headerlink" title="Github Action 简介"></a>Github Action 简介</h3><p>Github Action 是 GitHub 于 2018 年 10 月推出的一个 CI\CD 服务。</p><details class="folding-tag" ><summary> cyan CI / CD 说明 </summary>              <div class='content'>              <blockquote><p>CI&#x2F;CD 其实说的是三件事情：「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」、「持续部署（Continuous Deployment）」。<br>因为「持续交付」和「持续部署」的英文缩写是一样的，所以这三件事情缩写成了 CI&#x2F;CD 。</p></blockquote>              </div>            </details><p>每次部署 <code>Hexo</code> 都需要运行指令三件套，随着文章越来越多，编译的时间也随之越来越长，通过 <code>Github Action</code>，我们只需要在每次完成博客的编写或修改以后，将改动直接 <code>push</code> 到远程仓库，之后的编译部署的工作统统交给 <code>CI</code> 来完成即可，如果是看过 <code>Coding</code> 部署教程的小伙伴，应该对这种持续部署的操作有所感触。</p><p>教程常量声明</p><blockquote><p>以下将使用特定的常量名来指代一些名词。此处建议读者直接使用教程内容的常量名。在最后再逐一搜索替换。这样可以避免对各种常量名的混淆。</p></blockquote><table><thead><tr><th align="left">常量名</th><th align="left">常量释义</th></tr></thead><tbody><tr><td align="left">[Blogroot]</td><td align="left">本地存放博客源码的文件夹路径</td></tr><tr><td align="left">[SourceRepo]</td><td align="left">存放博客源码的私有仓库名</td></tr><tr><td align="left">[SiteBlogRepo]</td><td align="left">存放编译好的博客页面的公有仓库名 Site 指站点，教程中会替换成 Github、Gitee、Coding</td></tr><tr><td align="left">[SiteUsername]</td><td align="left">用户名 Site 指站点，教程中会替换成 Github、Gitee、Coding</td></tr><tr><td align="left">[SiteToken]</td><td align="left">申请到的令牌码 Site 指站点，教程中会替换成 Github、Gitee、Coding</td></tr><tr><td align="left">[GithubEmail]</td><td align="left">与 github 绑定的主邮箱，建议使用 Gmail</td></tr><tr><td align="left">[TokenUser]</td><td align="left">Coding 配置特有的令牌用户名</td></tr></tbody></table><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 在记事本中逐个记录，方便替换，以下为我的示例</span><br><span class="line">[Blogroot]：E:\Blogroot</span><br><span class="line"></span><br><span class="line">[SourceRepo]：anzhiyu-c/Hexo-blog-source</span><br><span class="line"></span><br><span class="line">[SiteBlogRepo]</span><br><span class="line">  [GithubBlogRepo]：anzhiyu-c.github.io</span><br><span class="line">  [GiteeBlogRepo]：anzhiyu</span><br><span class="line">  [CodingBlogRepo]：anzhiyu/anzhiyu</span><br><span class="line"></span><br><span class="line">[SiteUsername]</span><br><span class="line">  [GithubUsername]：anzhiyu-c</span><br><span class="line">  [GiteeUsername]：anzhiyu</span><br><span class="line">  [CodingUsername]：anzhiyu</span><br><span class="line"></span><br><span class="line">[SiteToken]</span><br><span class="line">  [GithubToken]：15076c8eb9c874sad676bc9bfb13sadw86babf2</span><br><span class="line">  [GiteeToken]：f57acasdadgar4578603adas5d8w79bb</span><br><span class="line">  [CodingToken]：a4e45daf78as1f2670dcbbcfd5as7d8asd8cd66a77</span><br><span class="line"></span><br><span class="line">[GithubEmail]：anzhiyu77@gmail.com</span><br><span class="line"></span><br><span class="line">[TokenUser]：RAxDiobbRi</span><br></pre></td></tr></table></figure><h3 id="Github-Action-使用教程"><a href="#Github-Action-使用教程" class="headerlink" title="Github Action 使用教程"></a>Github Action 使用教程</h3><p>为了确保交由<code>Github Action</code>来持续部署时，<code>Github Action</code> 具备足够的权限来进行 <code>hexo deploy</code> 操作,需要先获取 <code>Token</code>。</p><p><strong>Github</strong></p><blockquote><p>访问 Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;generate new token,创建的 Token 名称随意，但必须勾选 repo 项 和 workflows 项。</p></blockquote><p><img src="https://cdn.cbd.int/anzhiyu-static@1.0.0/img/01/01.png" alt="图例"></p><p><img src="https://cdn.cbd.int/anzhiyu-static@1.0.0/img/01/02.png" alt="图例"></p><p><img src="https://cdn.cbd.int/anzhiyu-static@1.0.0/img/01/03.png"></p><div class="tip info"><p>token 只会显示这一次，之后将无法查看，所以务必保证你已经记录下了 Token。之后如果忘记了就只能重新生成重新配置了。</p></div><h3 id="创建存放源码的私有仓库"><a href="#创建存放源码的私有仓库" class="headerlink" title="创建存放源码的私有仓库"></a>创建存放源码的私有仓库</h3><details class="folding-tag" cyan open><summary> 查看详情 </summary>              <div class='content'>              <p>我们需要创建一个用来存放 <code>Hexo</code> 博客源码的私有仓库<code>[SourceRepo]</code>，这点在 <code>Win10</code> 的 <code>Hexo</code> 博客搭建教程中有提到。为了保持教程的连贯，此处再写一遍。<br><img src="https://cdn.cbd.int/anzhiyu-static@1.0.0/img/01/04.png"></p><p>创建完成后，需要把博客的源码 push 到这里。首先获取远程仓库地址，此处虽然 SSH 和 HTTPS 均可。SSH 在绑定过 ssh key 的设备上无需再输入密码，HTTPS 则需要输入密码，但是 SSH 偶尔会遇到端口占用的情况。请自主选择。</p><p><img src="https://cdn.cbd.int/anzhiyu-static@1.0.0/img/01/05.png"></p><p>这里之所以是私有仓库，是因为在接下来的配置中会用到 <code>Token</code>，如果 <code>Token</code> 被盗用，别人可以肆意操作你的 <code>github</code> 仓库内容，为了避免这一风险，才选择的博客源码闭源。</p>              </div>            </details><h3 id="配置-Github-Action"><a href="#配置-Github-Action" class="headerlink" title="配置 Github Action"></a>配置 Github Action</h3><ul><li>在<code>[Blogroot]</code>新建<code>.github</code>文件夹,注意开头是有个<code>.</code>的。然后在<code>.github</code> 内新建 <code>workflows</code> 文件夹，再在 <code>workflows</code> 文件夹内新建 <code>autodeploy.yml</code>,在<code>[Blogroot]/.github/workflows/autodeploy.yml</code> 里面输入</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"><span class="comment"># 当有改动推送到master分支时，启动Action</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">      <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;16.x&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache-npm</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cache-npm.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install gulp-cli -g #全局安装gulp</span></span><br><span class="line"><span class="string">          npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo bangumi -u #bilibili番剧更新</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string">          gulp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到Github</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">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</span></span><br><span class="line">          <span class="attr">repository-name:</span> <span class="string">anzhiyu-a/anzhiyu-a.github.io</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">public</span></span><br><span class="line">          <span class="attr">commit-message:</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.head_commit.message &#125;&#125;</span> Updated By Github Actions&quot;</span></span><br></pre></td></tr></table></figure><ul><li>之后需要自己到仓库的 Settings-&gt;Secrets-&gt;actions 下添加环境变量，变量名参考脚本中出现的，依次添加。<br><img src="https://cdn.cbd.int/anzhiyu-static@1.0.0/img/01/06.png"></li></ul><h3 id="重新设置远程仓库和分支"><a href="#重新设置远程仓库和分支" class="headerlink" title="重新设置远程仓库和分支"></a>重新设置远程仓库和分支</h3><div class="tabs" id="🍾有git经验"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="🍾有git经验-1">🍾有Git经验 1</button><button type="button" class="tab " data-href="🍾有git经验-2">🍾无Git经验</button></ul><div class="tab-contents"><div class="tab-item-content active" id="🍾有git经验-1"><ul><li>1.添加屏蔽项</li></ul><p>因为能够使用指令进行安装的内容不包括在需要提交的源码内，所有我们需要将这些内容添加到屏蔽项，表示不上传到 <code>github</code> 上。这样可以显著减少需要提交的文件量和加快提交速度。<br>打开<code>[Blogroot]/.gitignore</code>,输入以下内容：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.DS_Store</span></span><br><span class="line">Thumbs<span class="number">.</span><span class="built_in">db</span></span><br><span class="line"><span class="built_in">db</span><span class="number">.</span>json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line"><span class="meta">public</span>/</span><br><span class="line"><span class="meta">.deploy</span>*/</span><br><span class="line"><span class="meta">.deploy_git</span>*/</span><br><span class="line"><span class="meta">.idea</span></span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure><p>如果不是 <code>butterfly</code> 主题，记得替换最后一行内容为你自己当前使用的主题。 </p><ul><li>2.提交源码到私有仓库[<code>SourceRepo]</code></li></ul><p>在博客根目录<code>[Blogroot]</code>下启动终端，使用 <code>git</code> 指令重设仓库地址。这样在新建仓库，我们仍旧可以保留珍贵的 <code>commit history</code>，便于版本回滚。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin <span class="comment"># 删除原有仓库链接</span></span><br><span class="line">git remote add origin git@github.com:[GithubUsername]/[SourceRepo].git <span class="comment">#[SourceRepo]为新的存放源码的github私有仓库</span></span><br><span class="line">git checkout -b master <span class="comment"># 切换到master分支，</span></span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"><span class="comment"># 如果不是，后面的所有设置的分支记得保持一致</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;github action update&quot;</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br></pre></td></tr></table></figure><ul><li>3.可能遇到的 bug</li></ul><p>因为 <code>butterfly</code> 主题文件夹下的<code>.git</code> 文件夹的存在，那么主题文件夹会被识别子项目。从而无法被上传到源码仓库。若是遇到添加屏蔽项，但是还是无法正常上传主题文件夹的情况。请先将本地源码中的 <code>themes</code> 文件夹移动到别的目录下。然后 <code>commit</code> 一次。接着将 <code>themes</code> 文件夹移动回来，再 <code>commit</code> 一次。</p><blockquote><p>要是还不行，那就删了 <code>butterfly</code> 主题文件夹下的<code>.git</code> 文件夹，然后再重复上述的 <code>commi</code>t 操作。</p></blockquote></div><div class="tab-item-content" id="🍾有git经验-2"><ul><li><p>删除或者先把<code>[Blogroot]/themes/butterfly/.git</code>移动到非博客文件夹目录下,原因是主题文件夹下的.git文件夹的存在会导致其被识别成子项目，从而无法被上传到源码仓库。</p></li><li><p>在博客根目录<code>[Blogroot]</code>路径下运行指令</p></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">#初始化</span></span><br><span class="line">git remote add origin git@github.com:[GithubUsername]/[SourceRepo].git <span class="comment">#[SourceRepo]为存放源码的github私有仓库</span></span><br><span class="line">git checkout -b <span class="keyword">master</span> <span class="title"># 切换到master</span>分支，</span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"><span class="comment">#如果不是，后面的所有设置的分支记得保持一致</span></span><br></pre></td></tr></table></figure><ul><li>添加屏蔽项</li></ul><p>因为能够使用指令进行安装的内容不包括在需要提交的源码内，所有我们需要将这些内容添加到屏蔽项，表示不上传到 github 上。这样可以显著减少需要提交的文件量和加快提交速度。打开<code>[Blogroot]/.gitignore</code>,输入以下内容：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.DS_Store</span></span><br><span class="line">Thumbs<span class="number">.</span><span class="built_in">db</span></span><br><span class="line"><span class="built_in">db</span><span class="number">.</span>json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line"><span class="meta">public</span>/</span><br><span class="line"><span class="meta">.deploy</span>*/</span><br><span class="line"><span class="meta">.deploy_git</span>*/</span><br><span class="line"><span class="meta">.idea</span></span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure><p>如果不是<code>butterfly</code>主题，记得替换最后一行内容为你自己当前使用的主题。</p><p>之后再运行 git 提交指令，将博客源码提交到 github 上。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit -m <span class="string">&quot;github action update&quot;</span></span><br><span class="line">git <span class="keyword">push</span> origin master</span><br><span class="line"><span class="meta">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br></pre></td></tr></table></figure><p>此时你的主题文件夹若已经被正常上传，并且你也添加了主题文件夹下的.git 文件夹的屏蔽项。那你可以考虑把第二步移走或删除的.git放回来，用作以后升级。（不禁怀疑真的有人会去用这个方式来升级吗）</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="查看部署情况"><a href="#查看部署情况" class="headerlink" title="查看部署情况"></a>查看部署情况</h3><details class="folding-tag" cyan><summary> 查看详情 </summary>              <div class='content'>              <p>此时，打开 <code>Github</code> 存放源码的私有仓库，找到<code> action</code>。<br><img src="https://cdn.cbd.int/anzhiyu-static@1.0.0/img/01/07.png"></p><p>根据刚刚的 <code>Commit</code> 记录找到相应的任务<br><img src="https://cdn.cbd.int/anzhiyu-static@1.0.0/img/01/08.png"></p><p>点击 <code>Deploy</code> 查看部署情况<br><img src="https://cdn.cbd.int/anzhiyu-static@1.0.0/img/01/09.png"></p><p>若全部打钩，恭喜你，你现在可以享受自动部署的快感了。</p>              </div>            </details><h3 id="可能遇到的-bug"><a href="#可能遇到的-bug" class="headerlink" title="可能遇到的 bug"></a>可能遇到的 bug</h3><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">⛔unknown block tag: "tagname"</button><button type="button" class="tab " data-href="-2">⛔spawn failed</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>要是在 <code>github action</code> 部署时遇到 <code>unknown block tag: “tagname”</code>这样的报错，说明你可能没有正确上传主题文件夹，也可能遇到安装依赖或生成页面失败的情况。</p><p>是否将<code>node_modules</code>也上传到源码仓库<code>[SourceRepo]</code>了。源码仓库不需要有<code>node_modules</code>文件夹。</p><p>是否有将<code>[Blogroot]/themes/</code>下的主题文件夹上传，例如检查<code>[SourceRepo]</code>内的 <code>[Blogroot]/themes/Butterfly</code>是否为空文件夹。为了能够正常编译页面，源码仓库需要有 <code>[Blogroot]/themes/Butterfly</code>文件夹及它所包含的主题文件内容。为了避免这两点，需要添加 <code>git</code> 屏蔽项。通过给 <code>.gitignore</code>添加屏蔽项解决。打开<code>[Blogroot]/.gitignore</code>,输入以下内容：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.DS_Store</span></span><br><span class="line">Thumbs<span class="number">.</span><span class="built_in">db</span></span><br><span class="line"><span class="built_in">db</span><span class="number">.</span>json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line"><span class="meta">public</span>/</span><br><span class="line"><span class="meta">.deploy</span>*/</span><br><span class="line"><span class="meta">.deploy_git</span>*/</span><br><span class="line"><span class="meta">.idea</span></span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure><p>若是遇到添加屏蔽项，但是还是无法正常上传主题文件夹的情况。请先将本地源码中的<code>themes</code>文件夹移动到别的目录下。然后<code>commit</code>一次。接着将themes文件夹移动回来，再<code>commit</code>一次。</p></div><div class="tab-item-content" id="-2"><p>若是遇到 <code>spawn failed</code> 报错。在 <code>github action</code> 的配置中出现这一报错。一般是因为涉及到部署地址的配置项有误。</p><p>首先排查你在<code>[Blogroot]\_config.yml</code>的<code>deploy</code>配置项是否按照上文配置 <a href="https://akilar.top/posts/f752c86d/#%E9%85%8D%E7%BD%AEdeploy%E9%A1%B9">deploy</a> 项中的步骤正确组装配置链接。<br>其次排查<code>[Blogroot]\.github\workflows\autodeploy.yml</code>中各个关于仓库链接的配置内容，注意按照注释指引检查空格、分支等。<br>更多可能的因素和解决方案可以参考<a href="https://blog.zhheo.com/">@洪哥 HEO</a>写的方案:<a href="https://blog.zhheo.com/p/128998ac.html">Hexo 错误：spawn failed 的解决方法</a>。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tip warning"><p>2020 年 10 月后 github 新建仓库默认分支改为 main，注意更改</p></div>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS蓝牙开发（一）蓝牙相关基础知识</title>
      <link href="/blog//2017/05/26/ios-bluetoth-development-(1)-bluetoth-related-basic-knowledge.html"/>
      <url>/blog//2017/05/26/ios-bluetoth-development-(1)-bluetoth-related-basic-knowledge.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code><span id="more"></span></li></ul><h2 id="蓝牙常见名称和缩写"><a href="#蓝牙常见名称和缩写" class="headerlink" title="蓝牙常见名称和缩写"></a>蓝牙常见名称和缩写</h2><ul><li>MFI &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; make for ipad ,iphone, itouch 专们为苹果设备制作的设备</li><li>BLE &#x3D;&#x3D;&#x3D;&#x3D; buletouch low energy，蓝牙4.0设备因为低耗电，所以也叫做BLE</li><li>peripheral,central &#x3D;&#x3D; 外设和中心,发起连接的时central，被连接的设备为perilheral</li><li>service and characteristic &#x3D;&#x3D;&#x3D; 服务和特征 每个设备会提供服务和特征，类似于服务端的api，但是机构不同。每个外设会有很多服务，每个服务中包含很多字段，这些字段的权限一般分为 读read，写write，通知notiy几种，就是我们连接设备后具体需要操作的内容。</li><li>Description 每个characteristic可以对应一个或多个Description用户描述characteristic的信息或属性</li><li>MFI &#x3D;&#x3D;&#x3D; 开发使用ExternalAccessory 框架</li><li>4.0 BLE &#x3D;&#x3D;&#x3D; 开发使用CoreBluetooth 框架</li></ul><h2 id="蓝牙基础知识"><a href="#蓝牙基础知识" class="headerlink" title="蓝牙基础知识"></a>蓝牙基础知识</h2><blockquote><p>CoreBluetooth框架的核心其实是两个东西，peripheral和central, 可以理解成外设和中心。对应他们分别有一组相关的API和类</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-26/b3c9e674fc4668e8824ab3885d5e54c8/1819713-e61619a0ccf8df53.jpeg" alt="截图1"></p><ul><li><p>这两组api分别对应不同的业务场景，左侧叫做中心模式，就是以你的app作为中心，连接其他的外设的场景，而右侧称为外设模式，使用手机作为外设别其他中心设备操作的场景。</p></li><li><p>服务和特征，特征的属性(service and characteristic):<br>每个设备都会有一些服务，每个服务里面都会有一些特征，特征就是具体键值对，提供数据的地方。每个特征属性分为这么几种：读，写，通知这么几种方式。</p></li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//objcetive c特征的定义枚举</span><br><span class="line">  typedef <span class="type">NS_OPTIONS</span>(<span class="type">NSUInteger</span>, <span class="type">CBCharacteristicProperties</span>) &#123;</span><br><span class="line">      <span class="type">CBCharacteristicPropertyBroadcast</span>= 0x01,</span><br><span class="line">      <span class="type">CBCharacteristicPropertyRead</span>= 0x02,</span><br><span class="line">      <span class="type">CBCharacteristicPropertyWriteWithoutResponse</span>= 0x04,</span><br><span class="line">      <span class="type">CBCharacteristicPropertyWrite</span>= 0x08,</span><br><span class="line">      <span class="type">CBCharacteristicPropertyNotify</span>= 0x10,</span><br><span class="line">      <span class="type">CBCharacteristicPropertyIndicate</span>= 0x20,</span><br><span class="line">      <span class="type">CBCharacteristicPropertyAuthenticatedSignedWrites</span>= 0x40,</span><br><span class="line">      <span class="type">CBCharacteristicPropertyExtendedProperties</span>= 0x80,</span><br><span class="line">      <span class="type">CBCharacteristicPropertyNotifyEncryptionRequired</span> <span class="type">NS_ENUM_AVAILABLE</span>(<span class="type">NA</span>, 6_0)= 0x100,</span><br><span class="line">      <span class="type">CBCharacteristicPropertyIndicateEncryptionRequired</span> <span class="type">NS_ENUM_AVAILABLE</span>(<span class="type">NA</span>, 6_0)= 0x200</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>外设、服务、特征间的关系<br><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-26/b3c9e674fc4668e8824ab3885d5e54c8/1819713-8d7a032f36ab3602.png"></p><h2 id="蓝牙中心模式流程"><a href="#蓝牙中心模式流程" class="headerlink" title="蓝牙中心模式流程"></a>蓝牙中心模式流程</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 建立中心角色</span><br><span class="line"><span class="bullet">2.</span> 扫描外设（discover）</span><br><span class="line"><span class="bullet">3.</span> 连接外设(connect)</span><br><span class="line"><span class="bullet">4.</span> 扫描外设中的服务和特征(discover)</span><br><span class="line"><span class="bullet">    -</span> 4.1 获取外设的services</span><br><span class="line"><span class="bullet">    -</span> 4.2 获取外设的Characteristics,获取Characteristics的值，获取Characteristics的Descriptor和Descriptor的值</span><br><span class="line"><span class="bullet">5.</span> 与外设做数据交互(explore and interact)</span><br><span class="line"><span class="bullet">6.</span> 订阅Characteristic的通知</span><br><span class="line"><span class="bullet">7.</span> 断开连接(disconnect)</span><br></pre></td></tr></table></figure><h2 id="蓝牙外设模式流程"><a href="#蓝牙外设模式流程" class="headerlink" title="蓝牙外设模式流程"></a>蓝牙外设模式流程</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 启动一个Peripheral管理对象</span><br><span class="line"><span class="bullet">2.</span> 本地Peripheral设置服务,特性,描述，权限等等</span><br><span class="line"><span class="bullet">3.</span> Peripheral发送广告</span><br><span class="line"><span class="bullet">4.</span> 设置处理订阅、取消订阅、读characteristic、写characteristic的委托方法</span><br></pre></td></tr></table></figure><h2 id="蓝牙设备状态"><a href="#蓝牙设备状态" class="headerlink" title="蓝牙设备状态"></a>蓝牙设备状态</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 待机状态（standby）：设备没有传输和发送数据，并且没有连接到任何设</span><br><span class="line"><span class="bullet">2.</span> 广播状态（Advertiser）：周期性广播状态</span><br><span class="line"><span class="bullet">3.</span> 扫描状态（Scanner）：主动寻找正在广播的设备</span><br><span class="line"><span class="bullet">4.</span> 发起链接状态（Initiator）：主动向扫描设备发起连接。</span><br><span class="line"><span class="bullet">5.</span> 主设备（Master）：作为主设备连接到其他设备。</span><br><span class="line"><span class="bullet">6.</span> 从设备（Slave）：作为从设备连接到其他设备。</span><br></pre></td></tr></table></figure><h2 id="蓝牙设备的五种工作状态"><a href="#蓝牙设备的五种工作状态" class="headerlink" title="蓝牙设备的五种工作状态"></a>蓝牙设备的五种工作状态</h2><ul><li>准备（standby）</li><li>广播（advertising）</li><li>监听扫描（Scanning）</li><li>发起连接（Initiating）</li><li>已连接（Connected）</li></ul><h2 id="蓝牙和版本的使用限制"><a href="#蓝牙和版本的使用限制" class="headerlink" title="蓝牙和版本的使用限制"></a>蓝牙和版本的使用限制</h2><ul><li>蓝牙2.0 &#x3D;&#x3D;&#x3D; 越狱设备</li><li>蓝牙4.0 &#x3D;&#x3D;&#x3D; IOS6 以上</li><li>MFI认证设备（Make For ipod&#x2F;ipad&#x2F;iphone） &#x3D;&#x3D;&#x3D; 无限制</li></ul><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul><li>GAAT : Generic Attribute Profile , GATT配置文件是一个通用规范，用于在BLE链路上发送和接收被称为“属性”的数据块。目前所有的BLE应用都基于GATT。 蓝牙SIG规定了许多低功耗设备的配置文件。配置文件是设备如何在特定的应用程序中工作的规格说明。注意一个设备可以实现多个配置文件。例如，一个设备可能包括心率监测仪和电量检测。</li><li>Characteristic 一个characteristic包括一个单一变量和0-n个用来描述characteristic变量的descriptor，characteristic可以被认为是一个类型，类 似于类。</li><li>Descriptor Descriptor用来描述characteristic变量的属性。例如，一个descriptor可以规定一个可读的描述，或者一个characteristic变量可接受的范围，或者一个characteristic变量特定的测量单位。 Service service是characteristic的集合。例如，你可能有一个叫“Heart Rate Monitor(心率监测仪)”的service，它包括了很多characteristics，如“heart rate measurement(心率测量)”等。你可以在bluetooth.org 找到一个目前支持的基于GATT的配置文件和服务列表。</li></ul><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://www.race604.com/gatt-profile-intro/">GATT Profile简介</a></p><p>本文转载自:<a href="http://liuyanwei.jumppo.com/">http://liuyanwei.jumppo.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac版 IntelliJ IDEA 创建Web项目并部署servlet</title>
      <link href="/blog//2017/05/21/the-mac-version-of-intelij-idea-creates-the-web-project-and-deploys-the-servlet.html"/>
      <url>/blog//2017/05/21/the-mac-version-of-intelij-idea-creates-the-web-project-and-deploys-the-servlet.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code><span id="more"></span></li></ul><h2 id="创建一个web项目"><a href="#创建一个web项目" class="headerlink" title="创建一个web项目"></a>创建一个web项目</h2><ul><li><code>File</code> -&gt; <code>New Project</code> -&gt; 选择<code>Project SDK</code>为1.8 -&gt; <code>Next</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-5274850b1513c8a1.png" alt="新建一个web项目"></p><ul><li>在<code>Project name</code>中输入项目名称“Demos” ，<code>Project location</code>选择项目要存放的位置，可以默认  -&gt;<code>Finish</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-f8ff43a8cbb9cc98.png" alt="输入项目名称"></p><h2 id="创建一个Module"><a href="#创建一个Module" class="headerlink" title="创建一个Module"></a>创建一个Module</h2><ul><li><p>鼠标点中项目名称<code>demos</code> -&gt; 右键选择<code>New</code>，选择<code>Module</code><br><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-e88871d34e3c7046.png" alt="新建一个Module"></p></li><li><p>勾选<code>Web Application</code>-&gt; 确认已勾选<code>Create web.xml</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-338f1225f9801b14.png" alt="勾选Web Application"></p><ul><li>输入Module名称<code>firstweb</code>-&gt; 点击<code>Finish </code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-7f12138b09ea8e60.png" alt="输入Module名称"></p><h2 id="新建完成的web项目"><a href="#新建完成的web项目" class="headerlink" title="新建完成的web项目"></a>新建完成的web项目</h2><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-732481307724f8d7.png" alt="新建完web项目后的提示"></p><p>新建完成后的目录结构</p><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-be6ee8f55c204e18.png" alt="新建完成后的web项目"></p><h2 id="在web-WEB-INF下创建两个文件夹：classes和lib"><a href="#在web-WEB-INF下创建两个文件夹：classes和lib" class="headerlink" title="在web/WEB-INF下创建两个文件夹：classes和lib"></a>在<code>web/WEB-INF</code>下创建两个文件夹：<code>classes</code>和<code>lib</code></h2><blockquote><p><code>classes</code>用来存放编译后输出的class文件，<code>lib</code>用于存放第三方jar包。 </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-52802b615412f1a4.png" alt="在web:WEB-INF下创建两个文件夹"></p><h2 id="配置文件夹路径"><a href="#配置文件夹路径" class="headerlink" title="配置文件夹路径"></a>配置文件夹路径</h2><ul><li><code>File</code> -&gt; <code>Project Structure </code>(快捷键：cmd + ;) -&gt; 选择<code>Module</code> ：<br>选择<code>Paths</code> -&gt; 选择<code>Use module compile output path</code> -&gt; 将<code>Output path</code>和<code>Test output path</code>都选择刚刚创建的<code>classes</code>文件夹。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-beb36e8aac8e2690.png" alt="选择刚刚创建的classes文件夹"></p><ul><li>接着选择<code>Dependencies</code> -&gt; 将<code>Module SDK</code>选择为1.8 -&gt; 点击下面的“+”号 -&gt; 选择1 <code>Jars or Directories</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-ae47a36406b9d2e1.png" alt="选择Jars or Directories"></p><ul><li>选择刚刚创建的<code>lib</code>文件夹</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-fd89e1e15e0aae79.png" alt="选择刚刚创建的lib文件夹"></p><ul><li>选择<code>jar directory</code> -&gt; 接着返回一路OK就行了~~</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-24a1d47cada5534d.png" alt="选择jar directory"></p><h2 id="配置Tomcat容器"><a href="#配置Tomcat容器" class="headerlink" title="配置Tomcat容器"></a>配置Tomcat容器</h2><ul><li>打开菜单<code>Run</code> -&gt; 选择<code>Edit Configuration</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-9676fbe48eeeafcd.png" alt="配置Tomcat容器"></p><ul><li>点击“+”号 -&gt; 选择<code>Tomcat Server</code> -&gt; 选择<code>Local</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-d3498baa95a070b6.png" alt="选择Local"></p><ul><li>点击<code>Application server</code>后面的<code>Configure…</code>，弹出<code>Tomcat Server</code>窗口，选择本地安装的Tomcat目录 -&gt; OK</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-48d27bf5cbdee9ec.png" alt="弹出Tomcat Server窗口.png"></p><ul><li>在<code>Run/Debug Configurations</code>窗口的<code>Server</code>选项板中，取消勾选<code>After launch</code>，设置<code>HTTP port</code>和<code>JMX port</code>（默认值即可），点击 <code>Apply</code> -&gt; <code>OK</code>， 至此Tomcat配置完成。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-33f649454b3a1842.png" alt="至此Tomcat配置完成"></p><h2 id="在Tomcat中部署并运行项目"><a href="#在Tomcat中部署并运行项目" class="headerlink" title="在Tomcat中部署并运行项目"></a>在Tomcat中部署并运行项目</h2><ul><li><code>Run</code> -&gt;<code>Edit Configurations</code>，进入<code>Run/Debug Configurations</code>窗口 -&gt; 选择刚刚建立的Tomcat容器 -&gt; 选择<code>Deployment</code> -&gt; 点击下面的“+”号 -&gt; 选择Artifact</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-9aaac2ed0e1b710b.png" alt="选择Artifact"></p><ul><li>选择web项目 -&gt;<code> Application context</code>可以填<code>/hello</code>(其实也可以不填的~~) -&gt; <code>OK</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-f56f2719e1b374ab.png" alt="Application context填hello"></p><h2 id="编辑index-jsp文件"><a href="#编辑index-jsp文件" class="headerlink" title="编辑index.jsp文件"></a>编辑index.jsp文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  <span class="title class_">Created</span> by <span class="title class_">IntelliJ</span> <span class="variable constant_">IDEA</span>.</span><br><span class="line">  <span class="title class_">User</span>: guoyanjun</span><br><span class="line">  <span class="title class_">Date</span>: <span class="number">2017</span>/<span class="number">5</span>/<span class="number">26</span></span><br><span class="line">  <span class="title class_">Time</span>: 下午<span class="number">2</span>:<span class="number">59</span></span><br><span class="line">  <span class="title class_">To</span> change <span class="variable language_">this</span> template use <span class="title class_">File</span> | <span class="title class_">Settings</span> | <span class="title class_">File</span> <span class="title class_">Templates</span>.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是第一个web项目<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个项目运行成功啦！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-3e84da088f2f06f6.png" alt="编辑index.jsp文件"></p><h2 id="运行Tomcat-在浏览器中查看运行结果"><a href="#运行Tomcat-在浏览器中查看运行结果" class="headerlink" title="运行Tomcat,在浏览器中查看运行结果"></a>运行Tomcat,在浏览器中查看运行结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-ac467778b919d85a.png" alt="运行Tomcat"></p><h2 id="Servlet简单实现"><a href="#Servlet简单实现" class="headerlink" title="Servlet简单实现"></a>Servlet简单实现</h2><ul><li>编写servlet源文件</li><li>在src目录下新建HelloWorld.<a href="http://lib.csdn.net/base/javase">Java</a>，并编写一下代码并进行编译：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by guoyanjun on 2017/5/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span><span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        message = <span class="string">&quot;Hello World, This message is from Servlet!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置响应内容类型</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="comment">//设置逻辑实现</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h3&gt;&quot;</span> + message + <span class="string">&quot;&lt;/h3&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译后会发现在classes目录下生成了HelloWorld.class文件</li></ul><blockquote><p>IDEA创建servlet时找不到<code>import javax.servlet...</code>相关类包的问题</p></blockquote><p>在IDEA中，创建Servlet时候，当写入如下语句时：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException<span class="comment">;</span></span><br><span class="line">import javax.servlet.http.HttpServlet<span class="comment">;</span></span><br><span class="line">import javax.servlet.http.HttpServletRequest<span class="comment">;</span></span><br><span class="line">import javax.servlet.http.HttpServletResponse<span class="comment">;</span></span><br><span class="line">import javax.servlet.http.HttpSession<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li><strong>会提示你，程序包<code>javax.servlet</code>和程序包<code>javax.servlet.http</code>不存在的错误</strong><br>原因在于<a href="http://lib.csdn.net/base/javase">Java</a>编译器没有找到软件包<code>javax.servelt</code></li><li><strong>解决的方法</strong>：把<code>tomcat</code>安装包里的<code>lib</code>目录下的<code>servlet-api.jar</code>拷贝一份到工程文件夹下的web目录下的<code>WEB-INF</code>目录下<code>lib子</code>文件下的,即 <code>web—&gt;WEB-INF–lib</code></li></ul><p><a href="http://blog.csdn.net/wodedipang_/article/details/72758708#"></a><a href="http://blog.csdn.net/wodedipang_/article/details/72758708#"></a><a href="http://blog.csdn.net/wodedipang_/article/details/72758708#"></a><a href="http://blog.csdn.net/wodedipang_/article/details/72758708#"></a><a href="http://blog.csdn.net/wodedipang_/article/details/72758708#"></a><a href="http://blog.csdn.net/wodedipang_/article/details/72758708#"></a></p><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-4e5fd3f1cd5dce0f.png" alt="HelloWorld.class文件"></p><h2 id="部署servlet"><a href="#部署servlet" class="headerlink" title="部署servlet"></a>部署servlet</h2><blockquote><p>方法一：在WEB-INF目录下web.xml文件的标签中添加如下内容：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloWorld<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>方法二：在HelloWorld文件的类前面加上：@WebServlet(“&#x2F;HelloWorld”)</p></blockquote><ul><li>运行servlet</li></ul><p>点击运行按钮<br><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-19dab062dec1dbcb.png" alt="运行成功"></p><ul><li>控制台出现successfully则tomcat服务启动成功！<br>打开浏览器输入：<a href="localhost:8080/hello/HelloWorld">localhost:8080&#x2F;hello&#x2F;HelloWorld</a>即可查看servlet运行状态了。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-05-21/258d4bb11899622b989b1dba58c4bbd5/1819713-2f7d1daccfc1e9c8.png" alt="servlet运行状态"></p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>独韵</title>
      <link href="/blog//2017/04/14/the-only-rhyme.html"/>
      <url>/blog//2017/04/14/the-only-rhyme.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code></li><li>独韵 &#x2F; 图片源于网络…<span id="more"></span></li></ul><h2 id="独韵"><a href="#独韵" class="headerlink" title="独韵"></a>独韵</h2><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-04-14/0f85428c9ebfad7507d4d090ac8de3ad/1819713-b9f009004e4ea3da.jpeg" alt="独韵 / 图片源于网络"></p><p>菁菁书院，氤氲着杨柳竹韵的婆娑，簇拥着懵懂羞涩的青春韶华，也滋养着奋翅高飞的梦想。</p><p>书院里总荡漾着一种静谧，让人心生陶醉。悠然漫步其间，心亦格外澄净，没有纷纷扰扰，也没有喧喧闹闹。携一卷书，感受厚重的 文字的力量，缓缓地踏在这青石板铺就的台阶上，有种飘若浮云的愉悦。深吸一口气，空气中叶荡涤这墨香，沁人心脾。古藤萝不声不响地伸展着枝蔓，那缠绕的轨迹是它孜孜不倦的求索。</p><p>一抹晨阳拨开繁叶径直地射在道旁的石阶上，明亮但不刺眼，温润而不恣肆。几缕清风也俏皮地拂动着竹叶的衣袂，似乎要牵子之手，与子同舞。泛着绿光的叶子自然不会倦怠，他们可是舞动的精灵，诚然不会失去飘飞的热情。丝竹幽幽入耳入汉乐唐律，空灵绵长。只刹那间便去那盛世走了一遭。绿叶依然晃着眼，与先前不同的是，它们的嘴角挂着虔诚的微笑。</p><p>谁道春风不解风情，只是折柳的一瞬多了些许伤感惜别罢了，或许在遥远的戈壁上也会有千里黄云的同慨。​​​​</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忆清明雨上</title>
      <link href="/blog//2017/04/04/remember-the-qingming-rain.html"/>
      <url>/blog//2017/04/04/remember-the-qingming-rain.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code></li><li>忆清明雨上 &#x2F; 图片源于网络…<span id="more"></span></li></ul><h2 id="忆清明雨上"><a href="#忆清明雨上" class="headerlink" title="忆清明雨上"></a>忆清明雨上</h2><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-04-04/1b2b3e47b89a10ca8da13e2a3ceeca4c/1819713-c7ff8e621a97e9af.jpg" alt="忆清明雨上 / 图片源于网络"></p><p>微蒙雨细氲苍穹，<br>碧路苔痕印紫藤。<br>醉花迷意寻蝶影，<br>喟叹行人匿歌声。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poetry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在github上建立gh-pages分支</title>
      <link href="/blog//2017/03/15/building-gh-pages-branches-on-github.html"/>
      <url>/blog//2017/03/15/building-gh-pages-branches-on-github.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li><a href="https://github.com/hexojs/hexo">hexo</a>是一款基于Node.js的静态博客框架，这篇文章针对Mac用户，熟悉hexo的同学可以绕道哈。初步搭建只需要简单的几步，动动你的手指头，在终端试一下吧…<span id="more"></span></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="添加gh-pages分支"><a href="#添加gh-pages分支" class="headerlink" title="添加gh-pages分支"></a>添加gh-pages分支</h3><blockquote><p>为什么要建立gh-pages分支呢，因为github项目的静态页面解析需要这个名字的分支</p></blockquote><ul><li>进入到你想要上传的文件夹下：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="built_in">text</span></span><br></pre></td></tr></table></figure><ul><li>git初始化</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">init</span></span><br></pre></td></tr></table></figure><ul><li>创建gh-pages分支</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">--orphan gh-pages</span></span><br></pre></td></tr></table></figure><ul><li>添加文件到暂存区</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">add</span> .</span><br></pre></td></tr></table></figure><ul><li>添加信息</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">&quot;This is add message&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>或者不写上面的<code>git add .</code>直接写<code>git commit -a -m \&quot;First pages commit\&quot;</code>这个-a参数我查了之后说是对<code>git add .</code>的替代，但我不建议大家使用。</p></blockquote><ul><li>添加仓库</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="language-bash"> origin git@github.com:username/project.git</span></span><br></pre></td></tr></table></figure><ul><li>部署你的项目到github</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> gh-pages</span><br></pre></td></tr></table></figure><h3 id="git删除远程分支"><a href="#git删除远程分支" class="headerlink" title="git删除远程分支"></a>git删除远程分支</h3><p>使用终端，<code>cd到你的工程目录文件夹下</code>，<strong>看清楚可不是当前分支</strong>。git删除仓库实际上可以理解为把一个空的branch赋值给已有的branch，这样就删除了。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin <span class="symbol">:gh-pages</span></span><br></pre></td></tr></table></figure><h3 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h3><p>&#x2F;&#x2F;使用git远程更改github上已存在的仓库文件</p><ul><li>配置你的账户-用户名<br><code>git config --global user.name yourname</code></li><li>配置你的账户-邮箱<br><code>git config --global user.email yourEmail@email.com</code></li><li>cd到你的目录<br><code>cd /Users/GuoYanjun/Downloads/yourname.github.io</code></li><li>git 初始化<br><code>git init</code></li><li>由于已经存在仓库，所以需要先在本地同步一下仓库的内容<br><code>git pull git@github.com:yourname/yourrepo.git</code></li><li>下面就要把我们本地的上传到仓库上去了，首先执行增加命令，如下：<br>add后面加了一个点，是想要提交所有文件，如果想提交指定的文件，可以写文件名。<br><code>git add .</code></li><li>执行完增加命令后，要执行提交命令，如下：<br><code>git commit -m &#39;Update&#39;</code><br>-m后面跟提示信息，这个提示信息是一定要写的，不仅是规则，同时也方便我们记录我们提交的过程，写清晰为什么提交或修改了什么是非常有用的，提交完成后，我们就要把它推送到远程仓库上去了</li><li>执行提交<br><code>git push -u origin master</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最全iOS开发工具集合</title>
      <link href="/blog//2017/03/07/the-most-comprehensive-colection-of-ios-development-tols.html"/>
      <url>/blog//2017/03/07/the-most-comprehensive-colection-of-ios-development-tols.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>目录…<span id="more"></span></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#Xcode">Xcode</a></li><li>[Simulators 模拟器下载](#Simulators 模拟器下载)</li><li>[Developer Disk Image下载](#Developer Disk Image下载)</li><li><a href="#Documentation">Documentation</a></li><li><a href="#webStorm">webStorm</a></li><li>[Java To iOS](#Java To iOS)</li><li><a href="#Markdown%E7%BC%96%E8%BE%91%E5%99%A8">Markdown编辑器</a></li><li><a href="#Xcode%E6%8F%92%E4%BB%B6">Xcode插件</a></li><li><a href="#%E6%B5%8B%E8%AF%95">测试</a></li><li><a href="#%E5%85%B6%E4%BB%96%E6%B5%8B%E8%AF%95">其他测试</a></li><li>[Beta 测试版本发布](#Beta 测试版本发布)</li><li><a href="#%E9%83%A8%E7%BD%B2">部署</a></li><li>[App Store](#App Store)</li><li><a href="#%E5%B7%A5%E5%85%B7">工具</a></li><li><a href="#%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7Git">版本控制工具Git</a></li><li><a href="#Photoshop%E6%8F%92%E4%BB%B6">Photoshop插件</a></li><li><a href="#%E7%9F%A2%E9%87%8F%E5%9B%BE%E8%AE%BE%E8%AE%A1%E5%B7%A5%E5%85%B7">矢量图设计工具</a></li><li><a href="#%E5%88%87%E5%9B%BE%E5%B7%A5%E5%85%B7">切图工具</a></li><li><a href="#%E5%9B%BE%E6%A0%87%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7">图标处理工具</a></li><li><a href="#%E5%9C%A8%E7%BA%BFIcon%E5%BA%93">在线Icon库</a></li><li><a href="#%E5%8F%96%E8%89%B2%E5%B7%A5%E5%85%B7">取色工具</a></li><li><a href="#Gif%E5%9B%BE%E7%89%87%E5%BD%95%E5%88%B6%E5%B7%A5%E5%85%B7">Gif图片录制工具</a></li><li>[Design Games](#Design Games)</li></ul><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a><a name='Xcode'>Xcode</a></h2><p>| 版本 | 平台 | 下载地址 | 大小 |<br>|:—:|:—:|:—:|:—:|:—:|<br>| 8.2.1 | Mac | <a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.2.1/Xcode_8.2.1.xip">官网地址</a> | 4.2G |<br>| 8.2 | Mac | <a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.2/Xcode_8.2.xip">官网地址</a> | 4.2G |<br>| 8.1 | Mac | <a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.1/Xcode_8.1.xip">官网地址</a> | 4.1G |<br>| 8 | Mac | <a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8/Xcode_8.xip">官网地址</a> | 4.1G |<br>| 7.3 | Mac | <a href="https://pan.baidu.com/s/1nvsAw8h">百度网盘</a>  密码: npe5 | 5.2G |<br>| 7.2 | Mac | <a href="https://pan.baidu.com/s/1eSNqLGm">百度网盘</a>  密码: g44b | 4.73G |<br>| 7.1 | Mac | <a href="https://pan.baidu.com/s/1o7CARIa">百度网盘</a>  密码: 8jj8 | 4.62G |<br>| 7.1beta | Mac | <a href="http://pan.baidu.com/s/1hsErRDy">百度网盘</a>  密码: e9qn | 3.85G |<br>| 6.4| Mac | <a href="http://pan.baidu.com/s/1qYxM5w4">百度网盘</a>  密码: iiae | 2.8G |<br>| 6.3 | Mac | <a href="http://pan.baidu.com/s/1nv0A2Qt">百度网盘</a>  密码: 6mhs | 2.77G |<br>| 6.2 | Mac | <a href="http://pan.baidu.com/s/1nu9NG3v">百度网盘</a> 密码: xun6 | 2.78G |</p><h2 id="Simulators-模拟器下载"><a href="#Simulators-模拟器下载" class="headerlink" title="Simulators 模拟器下载"></a><a name='Simulators 模拟器下载'>Simulators 模拟器下载</a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th><th align="center">大小(GB)</th></tr></thead><tbody><tr><td align="center">iOS 8.4</td><td align="center"><a href="http://devimages.apple.com/downloads/xcode/simulators/com.apple.pkg.iPhoneSimulatorSDK8_4-8.4.1.1435785476.dmg">苹果官网地址</a></td><td align="center">1.37</td></tr><tr><td align="center">iOS 8.3</td><td align="center"><a href="http://devimages.apple.com/downloads/xcode/simulators/com.apple.pkg.iPhoneSimulatorSDK8_3-8.3.1.1434581536.dmg">苹果官网地址</a></td><td align="center">1.36</td></tr></tbody></table><h2 id="Developer-Disk-Image下载"><a href="#Developer-Disk-Image下载" class="headerlink" title="Developer Disk Image下载"></a><a name='Developer Disk Image下载'>Developer Disk Image下载</a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th><th align="center">大小(MB)</th></tr></thead><tbody><tr><td align="center">10.3 (14E5239d).zip</td><td align="center"><a href="https://github.com/chenhuaizhe/src/blob/master/xcode/10.3%20(14E5239d).zip">下载地址</a></td><td align="center">14.7</td></tr><tr><td align="center">10.2 (14C89).zip</td><td align="center"><a href="https://github.com/chenhuaizhe/src/blob/master/xcode/10.2%20(14C89).zip">下载地址</a></td><td align="center">13.8</td></tr><tr><td align="center">10.0 (14A5339a).zip</td><td align="center"><a href="https://github.com/chenhuaizhe/src/blob/master/xcode/10.0%20(14A5339a).zip">下载地址</a></td><td align="center">13.8</td></tr></tbody></table><p>苹果官网的iOS Developer Library是开发者最喜欢用的知识仓库，但是在Xcode中下载速度实在是太慢！我想用迅雷离线下载怎么办，那就需要知道它的下载地址了。</p><h2 id="Documentation"><a href="#Documentation" class="headerlink" title=" Documentation "></a><a name='Documentation'> Documentation </a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th><th align="center">大小(MB)</th></tr></thead><tbody><tr><td align="center">iOS 9.3</td><td align="center"><a href="https://devimages.apple.com.edgekey.net/docsets/20160321/031-52212-A.dmg">下载链接</a></td><td align="center">872.2</td></tr><tr><td align="center">Xcode 7.3</td><td align="center"><a href="https://devimages.apple.com.edgekey.net/docsets/20160321/031-52213-A.dmg">下载链接</a></td><td align="center">264</td></tr><tr><td align="center">OS X 10.11.4</td><td align="center"><a href="https://devimages.apple.com.edgekey.net/docsets/20160321/031-52211-A.dmg">下载链接</a></td><td align="center">932</td></tr><tr><td align="center">watchOS 2.2</td><td align="center"><a href="https://devimages.apple.com.edgekey.net/docsets/20160321/031-52210-A.dmg">下载链接</a></td><td align="center">364.5</td></tr><tr><td align="center">tvOS 9.2</td><td align="center"><a href="https://devimages.apple.com.edgekey.net/docsets/20160321/031-52214-A.dmg">下载链接</a></td><td align="center">307.7</td></tr></tbody></table><p>下载后挂载了看到 iOSDocset.pkg, 运行解压之后, 找到com.apple.adc.documentation.iOS.docset，复制到~&#x2F;Library&#x2F;Developer&#x2F;Shared&#x2F;Documentation&#x2F;DocSets&#x2F; 中，以后更新Xcode不必重复下载此文档</p><p><strong>iOS 开发类库总结，猛戳：</strong><a href="http://www.code4app.com/thread-7831-1-1.html">网页链接</a></p><h2 id="AppCode"><a href="#AppCode" class="headerlink" title="AppCode"></a><a name='AppCode'>AppCode</a></h2><table><thead><tr><th align="center">版本</th><th align="center">平台</th><th align="center">下载地址</th><th align="center">大小</th></tr></thead><tbody><tr><td align="center">April 6,2016</td><td align="center">Mac</td><td align="center"><a href="https://www.jetbrains.com/objc/download/">下载链接</a></td><td align="center">243MB</td></tr></tbody></table><h2 id="webStorm"><a href="#webStorm" class="headerlink" title="webStorm"></a><a name='webStorm'>webStorm</a></h2><table><thead><tr><th align="center">版本</th><th align="center">平台</th><th align="center">下载地址</th><th align="center">大小</th></tr></thead><tbody><tr><td align="center">2016.1.1</td><td align="center">Mac</td><td align="center"><a href="http://www.jetbrains.com/webstorm/download/download-thanks.html?platform=mac">下载链接</a></td><td align="center">–</td></tr></tbody></table><h2 id="Java-To-iOS"><a href="#Java-To-iOS" class="headerlink" title="Java To iOS"></a><a name='Java To iOS'>Java To iOS</a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">j2Objc</td><td align="center"><a href="https://github.com/google/j2objc">下载链接</a></td></tr><tr><td align="center">RoboVM</td><td align="center"><a href="http://www.robovm.org/">下载链接</a></td></tr></tbody></table><h2 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a><a name='Markdown编辑器'>Markdown编辑器</a></h2><p>对于熟悉Markdown的人来说，Mou是一款不错的文本编辑器（Mac平台）。相比同类型产品，Mou 在功能性和易用性上都有众多特色，在其简单的界面之后，不仅拥有自定义样式、增量搜索、中文字体“漂移”优化，还支持终端命令行启动、内容发布、竖版文字布局，甚至还可以作为任务列表使用，其Markdown双栏布局的实时预览和同步滚动功能更是被众多应用借鉴和采用。</p><p>可惜的是Mou已不再支持macOS Sierra(10.12.x)已上的系统，所以在这里推荐其他几款支持Markdown语法的软件。</p><table><thead><tr><th align="center">编辑器</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">Mou</td><td align="center"><a href="http://25.io/mou/download/Mou.zip">下载链接</a></td></tr><tr><td align="center">MacDown</td><td align="center"><a href="http://macdown.uranusjr.com/">官网地址</a></td></tr><tr><td align="center">Typora</td><td align="center"><a href="https://typora.io/">官网地址</a></td></tr><tr><td align="center">MaHua</td><td align="center"><a href="http://mahua.jser.me/">在线编辑器</a></td></tr></tbody></table><h2 id="Xcode插件"><a href="#Xcode插件" class="headerlink" title="Xcode插件"></a><a name='Xcode插件'>Xcode插件</a></h2><ul><li><a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin">FuzzyAutocompletePlugin</a><br>– 提供了除前缀匹配之外的其他更加灵活的自动补全功能，支持 Xcode 5+。</li><li><a href="https://github.com/stefanceriu/SCXcodeMiniMap">SCXcodeMiniMap</a><br> – SCXcodeMiniMap 为 Xcode 添加了代码地图功能</li><li><a href="https://github.com/larsxschneider/ShowInGitHub">Show in Github</a><br> – 可以直接打开 Github 上当前正在编辑的行对应的 commit 页面。</li><li><a href="https://github.com/neonichu/BBUFullIssueNavigator">BBUFullIssueNavigator</a><br> – 这个插件让 Xcode 在 issue 导航栏显示所有的 issue 内容。</li><li><a href="https://github.com/neonichu/BBUDebuggerTuckAway">BBUDebuggerTuckAway</a><br> – 当你开始编辑的时候帮你隐藏调试器栏的 Xcode 插件。</li><li><a href="https://github.com/stefanceriu/SCXcodeSwitchExpander">SCXcodeSwitchExpander</a><br> – SCXcodeSwitchExpander 是一个可以帮你展开 switch 语句的插件，还会自动帮你插入 case 语句。</li><li><a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocumenter-Xcode</a><br> – 方便的编写标准注释的 Xcode 插件。</li><li><a href="https://github.com/qfish/XAlign">XAlign</a><br> – 一个 Xcode 代码自动对齐插件，它可以使用自定义的模式来对齐任何东西。</li><li><a href="https://github.com/kattrali/cocoapods-xcode-plugin">Cocoapods Xcode Plugin</a><br> – 依赖管理工具 CocoaPods 的 Xcode 插件。</li><li><a href="https://github.com/ksuther/KSImageNamed-Xcode">KSImageNamed-Xcode</a><br> – 提供了图片名称自动补全功能的插件。</li><li><a href="https://github.com/omz/ColorSense-for-Xcode">ColorSense-for-Xcode</a><br> – 可视化的颜色选择插件。</li><li><a href="https://github.com/limejelly/Backlight-for-XCode">Backlight-for-XCode</a><br> – 高亮当前编辑的行。</li><li><a href="https://github.com/yeahdongcn/UIColor-Hex-Swift">UIColor-Hex-Swift</a><br> – 通过十六进制字符串创建 autorelease 颜色的便利方法。★</li><li><a href="https://github.com/kitschpatrol/KPRunEverywhereXcodePlugin">KPRunEverywhereXcodePlugin</a><br> – 只需一次点击，就可以在多个 iOS 设备上构建，运行 App。</li><li><a href="https://github.com/shjborage/Reveal-Plugin-for-Xcode">RevealPlugin</a><br> – 将 Reveal App 和你的项目自动合为一体的 Xcode 插件。</li><li><a href="https://realm.io/docs/objc/0.81.0/#xcode-plugin">RealmPlugin</a></li><li>生成 Realm 模型的 Xcode 插件。</li><li><a href="https://github.com/zats/AdjustFontSize-Xcode-Plugin">AdjustFontSize</a><br> – 使用 ⌘ + &#x2F; ⌘ - 快捷键调整字体大小。</li><li><a href="https://github.com/questbeat/Lin">Lin</a><br> – 这个插件提供了 NSLocalizedString 的自动补全插件。</li><li><a href="https://www.rephrase.io/">Rephrase</a><br> – Xcode 用于本地化的插件.</li><li><a href="https://github.com/pdcgomes/XCActionBar">XCActionBar</a><br> – Xcode 的 Alfred。</li><li><a href="https://github.com/wiruzx/QuickJump">QuickJump</a><br> – Xcode 快速代码导航。</li><li><a href="https://github.com/keefo/CATweaker">CATweaker</a><br> – 一个用于创建漂亮的 CAMediaTimingFunction 曲线的插件.</li><li><a href="https://github.com/onmyway133/XcodeWay">XcodeWay</a><br> – 便捷地导航到多个地方。</li><li><a href="https://github.com/johnno1962/GitDiff">GitDiff</a><br> – 将与 git 仓库中不同的代码高亮。</li><li><a href="https://github.com/yuhua-chen/MCLog">MCLog</a><br> – 用于控制台内容筛选的插件。</li><li><a href="https://github.com/trawor/XToDo">XToDo</a><br> – 一个显示项目中 TODO，FIXME，??? 和 !!! 列表的对话框。</li><li><a href="https://github.com/hanton/CopyIssue-Xcode-Plugin">CopyIssue</a><br> – 使复制 Xcode issuse 描述更简单。</li><li><a href="https://github.com/rickytan/RTImageAssets">RTImageAssets</a><br> – 自动生成所需的全部 App 图标的插件。</li><li><a href="https://github.com/benoitsan/BBUncrustifyPlugin-Xcode">BBUncrustifyPlugin-Xcode</a><br> – 使用 ClangFormat 或 Uncrustify 格式化代码的插件。</li><li><a href="https://github.com/marksands/Aviator">Aviator</a><br> – 这个插件将 AppCode 的 ⇧⌘T (source&#x2F;test 切换) 带到 Xcode 中.</li><li><a href="https://github.com/merrickp/JumpMarks">JumpMarks</a><br> – 使用有序的书签为你的代码做导航。</li><li><a href="https://github.com/dzenbot/XCSnippetr">XCSnippetr</a><br> – 直接上传代码片段到 Slack 和 Gist 的 Xcode 插件。</li><li><a href="https://github.com/markohlebar/Peckham">Peckham</a><br> – 使用 #import 引用项目中的任何文件，提供代码提示。</li><li><a href="https://github.com/molon/MLAutoReplace">MLAutoReplace</a><br> – 快速编码以及代码格式化插件，提升你的编码速度。</li><li><a href="https://github.com/ViccAlexander/Chameleon">Chameleon</a><br> – iOS （Obj-C &amp; Swift）的扁平化颜色框架。★</li><li><a href="https://github.com/chiahsien/AutoHighlightSymbol">AutoHighlightSymbol</a><br> – 高亮被选中的符号对应的所有实例。</li><li><a href="https://github.com/lzwjava/Reveal-In-Github">Reveal-In-GitHub</a><br> – 用一个快捷键就可以跳转到 GitHub 仓库的 History, Blame, PRs, Issues, Notifications。</li><li><a href="https://github.com/insanoid/CleanHeaders-Xcode">CleanHeaders-Xcode</a><br> – 类似 iSort 的头文件排序和重复消除插件，让你的头文件看起来更加有序。</li><li><a href="https://github.com/k0nserv/luft">Luft</a><br> – 帮助你实现轻量的 View Controller 的 Xcode 插件。</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a name='测试'>测试</a></h2><ul><li><a href="https://github.com/mokemokechicken/CrashMonkey">CrashMonkey</a><br> – iOS 平台的 Monkey 测试工具。</li><li><a href="http://appium.io/">appium</a><br> – Appium 是一个开源自动化测试框架。用于测试原生或者混合 app。</li><li><a href="https://github.com/jollychang/robotframework-appiumlibrary">robotframework-appiumlibrary</a><br> – AppiumLibrary 是一个用于 RobotFramwork 的 appium 测试框架。</li><li><a href="https://cucumber.io/">Cucumber</a><br> – iOS BDD 框架。</li><li><a href="https://github.com/kif-framework/KIF">Kif</a><br> – 一个 iOS 的函数式测试框架。</li><li><a href="https://github.com/inkling/Subliminal">Subliminal</a><br> – 一个保守的 iOS 集成测试框架。</li><li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/UIAutomationRef/">UIAutomation</a><br> – 一个使用脚本在连接着的设备上测试你的用户界面元素的 JavaScript 库。</li><li><a href="http://ios-driver.github.io/ios-driver/index.html">ios-driver</a><br> – 使用 Selenium &#x2F; WebDriver 测试任何 iOS 原生，混合或者移动 web 应用。</li><li><a href="https://github.com/zucchini-src/zucchini">Zucchini</a><br> – 可视化的 iOS 测试框架。</li><li><a href="https://github.com/johnno1962/Remote">Remote</a><br> – 在 Xcode 内部控制你的 iPhone 来做端到端的测试。</li></ul><h2 id="其他测试"><a href="#其他测试" class="headerlink" title="其他测试"></a><a name='其他测试'>其他测试</a></h2><ul><li><a href="https://github.com/Palleas/NaughtyKeyboard">NaughtyKeyboard</a><br> – 一个危险字符串的大列表，当用户输入这些字符串使有很大的可能会造成 bug，这是一个用于在你的 iOS 设备上测试你 app 的键盘。</li><li><a href="https://github.com/square/PonyDebugger">PonyDebugger</a><br> – 使用 Chrome 开发者工具对你的 iOS app 进行远程网络和数据调试。</li><li><a href="https://github.com/facebook/ios-snapshot-test-case">ios-snapshot-test-case</a><br> – 使用屏幕快照的 iOS 单元测试。</li></ul><h2 id="Beta-测试版本发布"><a href="#Beta-测试版本发布" class="headerlink" title="Beta 测试版本发布"></a><a name='Beta 测试版本发布'>Beta 测试版本发布</a></h2><ul><li><a href="https://try.crashlytics.com/">Crashlytics</a><br> – 一个崩溃报告和 beta 测试服务。</li><li><a href="https://developer.apple.com/testflight/">TestFlight Beta Testing</a><br> – iTunes Connect 支持的 beta 测试服务。</li><li><a href="http://hockeyapp.net/">HockeyApp</a><br> – 在 HockeyApp 你可以发布你 app 的 beta 测试版本，收集实时的崩溃报告，获取用户反馈，分析测试覆盖率。</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a><a name='部署'>部署</a></h2><ul><li><a href="https://github.com/fastlane/fastlane">fastlane</a><br> 将所有 iOS 部署工具整合到一个工作流中。</li><li><a href="https://github.com/fastlane/deliver">deliver</a><br> 部署截屏，app 元数据和 AppStore app 更新，这一切只需要一个命令就可以搞定。</li><li><a href="https://github.com/fastlane/snapshot">snapshot</a><br> 自动地创建全部语言和全部设备的屏幕截图。</li></ul><h2 id="App-Store"><a href="#App-Store" class="headerlink" title="App Store"></a><a name='App Store'>App Store</a></h2><ul><li><a href="http://appreviewtimes.com/">Average App Store Review Times</a><br> 这个网站可以同时跟踪 AppStore 上 iOS 和 Mac 两个版本的浏览次数，使用了利用 iOS 和 Mac 开发者的众包数据。</li><li><a href="https://developer.apple.com/app-store/review/rejections/">Apple’s Common App Rejections Styleguide</a><br> 一些导致 app 被苹果拒绝的重要常见问题。</li><li><a href="https://www.mobileaction.co/">Free App Store Optimization Tool</a><br> 在关键字和竞争者的角度上，让你可视化地追踪你的 App Store 数据。</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title=" 工具 "></a><a name='工具'> 工具 </a></h2><ul><li><a href="https://github.com/kaandedeoglu/Shark">Shark</a><br> – 用于将 .xcassets 文件夹转换成一个类型安全枚举的 Swift 脚本。★</li><li><a href="https://github.com/mac-cain13/R.swift">R.swift</a><br> – 在 Swift 项目中，强类型的自动补全资源名称的工具，包括图片，单元格和 segue 的工具。★</li><li><a href="https://github.com/AliSoftware/SwiftGen">SwiftGen</a><br> – 一个生成 Swift 代码工具的集合（生成资源的枚举，storyboard，本地化字符串和 UIColor）。★</li><li><a href="https://github.com/marmelroy/Localize-Swift">Localize-Swift</a><br> – Swift 2.0 实现在应用中切换语言的功能，帮助你的 APP 实现友好的本地化和国际化。★</li><li><a href="https://github.com/jondot/blade">Blade</a><br> – 为 iOS 和 OS X 应用生成 Xcode 图片目录，全局图片和其他相关的东西。</li><li><a href="https://github.com/terwanerik/Retini">Retini</a><br> – 一个超级简单的 Retina（2x，3x）图片转换器。</li><li><a href="https://github.com/chockenberry/Provisioning">Provisioning</a><br> – 一个查看器插件，用于预览 .mobileprovision 文件。</li><li><a href="https://github.com/metasmile/strsync">Strsync</a><br> – 自动翻译并且使 .strings 文件和默认语言同步。</li></ul><h2 id="版本控制工具Git"><a href="#版本控制工具Git" class="headerlink" title=" 版本控制工具Git "></a><a name='版本控制工具Git'> 版本控制工具Git </a></h2><table><thead><tr><th align="center">版本号</th><th align="center">Windows</th><th align="center">Mac OSX</th><th align="center">Linux</th></tr></thead><tbody><tr><td align="center">Git-2.0.1</td><td align="center">–</td><td align="center"><a href="http://pan.baidu.com/s/1mgkM9BE">下载链接</a></td><td align="center"><a href="https://github.com/inferjay/AndroidDevTools/wiki/Download-for-Linux-and-Unix">下载链接</a></td></tr><tr><td align="center">Git-1.9.4</td><td align="center"><a href="http://pan.baidu.com/s/1ntjy9N7">下载链接</a></td><td align="center">–</td><td align="center"><a href="https://github.com/inferjay/AndroidDevTools/wiki/Download-for-Linux-and-Unix">下载链接</a></td></tr><tr><td align="center">Git-1.8.5.2</td><td align="center"><a href="http://pan.baidu.com/s/1ntJWxeD">下载链接</a></td><td align="center"><a href="http://pan.baidu.com/s/1bncr1pX">下载链接</a></td><td align="center"><a href="https://github.com/inferjay/AndroidDevTools/wiki/Download-for-Linux-and-Unix">下载链接</a></td></tr></tbody></table><blockquote><p>Design Tools 设计工具</p></blockquote><h2 id="Photoshop插件"><a href="#Photoshop插件" class="headerlink" title=" Photoshop插件 "></a><a name='Photoshop插件'> Photoshop插件 </a></h2><table><thead><tr><th align="center">名称</th><th align="center">简介</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">Cut&amp;Slice</td><td align="center">切图神器</td><td align="center"><a href="http://www.cutandslice.me/">下载链接</a></td></tr><tr><td align="center">DevRocket</td><td align="center">切图神器</td><td align="center"><a href="http://www.robovm.org/">下载链接</a></td></tr><tr><td align="center">Cutterman</td><td align="center">最好用的切图工具</td><td align="center"><a href="http://www.cutterman.cn/">下载链接</a></td></tr><tr><td align="center">Ink</td><td align="center">–</td><td align="center"><a href="http://ink.chrometaphore.com/">下载链接</a></td></tr><tr><td align="center">Corner Editor</td><td align="center">路径圆角编辑工具</td><td align="center"><a href="http://photoshopscripts.wordpress.com/">下载链接1</a><br><a href="http://sourceforge.net/projects/cornereditor/">下载链接2</a></td></tr><tr><td align="center">GuideGuide</td><td align="center">辅助线工具</td><td align="center"><a href="http://guideguide.me/">下载链接</a></td></tr><tr><td align="center">Assistor PS</td><td align="center">–</td><td align="center"><a href="http://assistor.net/en/assistor">下载链接</a></td></tr><tr><td align="center">Skeuomorphism.it</td><td align="center">–</td><td align="center"><a href="http://skeuomorphism.it/">下载链接</a></td></tr><tr><td align="center">QuickGuide</td><td align="center">–</td><td align="center"><a href="http://guchitaka.com/project-view/quickguidepro/">下载链接</a></td></tr><tr><td align="center">Long Shadow Generator</td><td align="center">长投影效果生成插件</td><td align="center"><a href="http://lab.rayps.com/lsg2/">下载链接</a></td></tr><tr><td align="center">android_resizer_toolkit</td><td align="center">–</td><td align="center"><a href="https://github.com/marcosecchi/android_resizer_toolkit">下载链接</a></td></tr><tr><td align="center">android-ps-tools</td><td align="center">一些方便Android UI设计的PhototShop插件</td><td align="center"><a href="http://lab.rayps.com/lc/">下载链接</a></td></tr><tr><td align="center">LayerCraft</td><td align="center">用于从图层中导出UI资源的Photoshop插件</td><td align="center"><a href="http://lab.rayps.com/lc/">下载链接</a></td></tr></tbody></table><h2 id="矢量图设计工具"><a href="#矢量图设计工具" class="headerlink" title=" 矢量图设计工具 "></a><a name='矢量图设计工具'> 矢量图设计工具 </a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">Sketch 3</td><td align="center"><a href="http://bohemiancoding.com/sketch/">下载链接</a></td></tr><tr><td align="center">Gravit</td><td align="center"><a href="http://gravit.io/">下载链接</a></td></tr><tr><td align="center">Adobe Illustrator</td><td align="center"><a href="https://www.adobe.com/cn/products/illustrator.html">下载链接</a></td></tr></tbody></table><h2 id="切图工具"><a href="#切图工具" class="headerlink" title=" 切图工具 "></a><a name='切图工具'> 切图工具 </a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">Slicy</td><td align="center"><a href="http://macrabbit.com/slicy/">下载链接</a></td></tr></tbody></table><h2 id="图标处理工具"><a href="#图标处理工具" class="headerlink" title=" 图标处理工具 "></a><a name='图标处理工具'> 图标处理工具 </a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">Icon Slate</td><td align="center"><a href="http://www.kodlian.com/apps">下载链接</a></td></tr></tbody></table><h2 id="在线Icon库"><a href="#在线Icon库" class="headerlink" title=" 在线Icon库 "></a><a name='在线Icon库'> 在线Icon库 </a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">IconFont</td><td align="center"><a href="http://iconfont.cn/">下载链接</a></td></tr><tr><td align="center">NounProject</td><td align="center"><a href="http://thenounproject.com/">下载链接</a></td></tr></tbody></table><h2 id="取色工具"><a href="#取色工具" class="headerlink" title=" 取色工具 "></a><a name='取色工具'> 取色工具 </a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">ColorSnapper</td><td align="center"><a href="http://colorsnapper.com/">下载链接</a></td></tr></tbody></table><h2 id="Gif图片录制工具"><a href="#Gif图片录制工具" class="headerlink" title=" Gif图片录制工具 "></a><a name='Gif图片录制工具'> Gif图片录制工具 </a></h2><table><thead><tr><th align="center">名称</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">LICEcap</td><td align="center"><a href="http://www.cockos.com/licecap/">下载链接</a></td></tr><tr><td align="center">GifCam</td><td align="center"><a href="http://blog.bahraniapps.com/gifcam/">下载链接</a></td></tr><tr><td align="center">Android Tool</td><td align="center"><a href="https://github.com/mortenjust/androidtool-mac/">下载链接</a></td></tr></tbody></table><h2 id="Design-Games"><a href="#Design-Games" class="headerlink" title=" Design Games "></a><a name='Design Games'> Design Games </a></h2><p><a href="http://bezier.method.ac/">The Bezier Game</a>：一个帮助你练习PS里钢笔工具的小游戏。</p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 安装 nodejs （图文详细步骤）及SublimeText运行JavaScript控制台</title>
      <link href="/blog//2017/03/06/mac-instals-nodejs-(detailed-steps)-and-sublimetext-runs-the-javascript-console.html"/>
      <url>/blog//2017/03/06/mac-instals-nodejs-(detailed-steps)-and-sublimetext-runs-the-javascript-console.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code></li><li>由于自己的拓展需求，要临时使用到node.js，所以此次本君就在此mark下 Mac 下node.js的安装和简单的检验示例，给各位小主留个标记，提高下以后的效率。本章对于一些小白而言还是具有普及意义的…<span id="more"></span></li></ul><h2 id="一、Mac-安装-nodejs"><a href="#一、Mac-安装-nodejs" class="headerlink" title="一、Mac 安装 nodejs"></a>一、Mac 安装 nodejs</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于自己的拓展需求，要临时使用到node.js，所以此次本君就在此mark下 Mac 下node.js的安装和简单的检验示例，给各位小主留个标记，提高下以后的效率。本章对于一些小白而言还是具有普及意义的。</p><hr><h3 id="step-1："><a href="#step-1：" class="headerlink" title="step 1："></a>step 1：</h3><ul><li>访问nodejs官网（<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>），点击红色选框区域的v6.10.0 LTS版本并下载，详见下图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-91bf188788b7baf8.png" alt="官网版本.png"></p><h3 id="step-2："><a href="#step-2：" class="headerlink" title="step 2："></a>step 2：</h3><ul><li>双击刚下载的.pkg文件，打开之后按照步骤默认安装就行，安装完成后的截图如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-e8435d069c0ae642.png" alt="安装完成.png"></p><h3 id="step-3："><a href="#step-3：" class="headerlink" title="step 3："></a>step 3：</h3><ul><li>安装完成后，需要进一步验证下版本号等信息，在LaunchPad中打开终端，分别输入 :<br><code>npm -v </code><br><code>node -v</code><br>两个命令，如下图出现版本信息，说明安装成功。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-bc21ea7a514f1412.png" alt="终端验证版本号.png"></p><h3 id="step-4："><a href="#step-4：" class="headerlink" title="step 4："></a>step 4：</h3><ul><li>新建一个js文件，nodejsTest.js , 输入下面的代码, 并保存</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span> : <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    response.<span class="title function_">write</span>(<span class="string">&quot;Welcome to Nodejs&quot;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>();</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Creat server on http://127.0.0.1:8000/&quot;</span>);</span><br></pre></td></tr></table></figure><p>打开终端进入 nodejsTest.js 所在目录， 输入 node nodejsTest<br>终端显示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-4482a00a8ea47af7.png" alt="终端运行.png"></p><p>打开浏览器，点击或者输入<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a>， 如果无法打开，可以将刚才新建的js文件中的.listen(8000, “127.0.0.1”) 的ip监听改成 .listen(8000)，然后点击或者输入<a href="http://localhost:8000/">http://localhost:8000/</a></p><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-e6632aff051d597e.png" alt="浏览器测试.png"></p><hr><h2 id="二、Mac系统下SublimeText运行JavaScript控制台"><a href="#二、Mac系统下SublimeText运行JavaScript控制台" class="headerlink" title="二、Mac系统下SublimeText运行JavaScript控制台"></a>二、Mac系统下SublimeText运行JavaScript控制台</h2><p><strong>Sublime Text 2下载地址：</strong>(<a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a>)</p><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-51d27d09bcfab880.png" alt="Sublime Text 2.png"></p><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>JavaScript控制台的调试和输出在浏览器端的使用算是工作中常用了，作为前端开发主力编辑器Sublime Text本身是不支持JavaScript的输出和运行的。有的时候我们需要看一下输出的效果，不得不借助于F12查看控制台的程序。作为插件系统及其丰富的编辑器，我们可以通过添加Build System的方法来让<a href="http://www.sublimetext.com/">Sublime Text</a>支持Javascript Console控制台调试。</p><blockquote><p><strong>JSC方式（Mac OS X）</strong></p></blockquote><h3 id="step-1：-1"><a href="#step-1：-1" class="headerlink" title="step 1："></a>step 1：</h3><p>Mac内置了一个javascript控制台程序，路径比较深,(可以用命令”open 目录”来打开目录)    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc  </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-664395cd05acad35.png" alt="打开目录.png"></p><h3 id="step-2：-1"><a href="#step-2：-1" class="headerlink" title="step 2："></a>step 2：</h3><p>启动Sublime  Text，Tools &gt; Build System &gt; New Build System，如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-3207ab9c2a2e4be7.png" alt="New Build System.png"></p><h3 id="step-3：-1"><a href="#step-3：-1" class="headerlink" title="step 3："></a>step 3：</h3><ul><li>配置选项内容，保存在默认的User目录<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;cmd&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$file&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">    <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source.js&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-e2ccaeb1b1343955.png" alt="保存.png"></p><ul><li>菜单SublimeText-&gt;preferences-&gt;browser pakager,打开目录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-fa327583d7dcedef.png" alt="打开目录.png"></p><h3 id="step-4：-1"><a href="#step-4：-1" class="headerlink" title="step 4："></a>step 4：</h3><p>新建一个JS文件测试控制台输出效果,使用快捷键Command + B按钮进行调试，需要注意的是这里使用debug，而不能使用console.log；选择编译系统，菜单Tools &gt; Build System &gt; Automatic或者JSC</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = &#123;<span class="attr">name</span>:<span class="string">&#x27;lili&#x27;</span>,<span class="attr">age</span>:<span class="number">28</span>&#125;;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">    <span class="title function_">debug</span>(<span class="string">&quot;Sublime Test3:&quot;</span>+i);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="title function_">debug</span>(temp);  </span><br><span class="line"><span class="comment">// 输出  </span></span><br><span class="line"><span class="comment">// --&gt; Sublime Test3:2  </span></span><br><span class="line"><span class="comment">// --&gt; Sublime Test3:1  </span></span><br><span class="line"><span class="comment">// --&gt; Sublime Test3:0  </span></span><br><span class="line"><span class="comment">// --&gt; [object Object]  </span></span><br></pre></td></tr></table></figure><p>截图如下所示：<br><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-03-06/cae38101c2d0aa2f2d00a3da4ab2b60d/1819713-608e541ea689b4d9.png" alt="截图.png"></p><blockquote><p><strong>NodeJS方式</strong></p></blockquote><h3 id="step-1：-2"><a href="#step-1：-2" class="headerlink" title="step 1："></a>step 1：</h3><p>下载安装NodeJS，安装步骤详见上文所述，检查是否安装了NodeJS，在终端中运行 node -v 命令</p><h3 id="step-2：-2"><a href="#step-2：-2" class="headerlink" title="step 2："></a>step 2：</h3><p>重复上文中JSC方式的第二步，在Build Sytem添加以下内容:保存为NodeJS.sublime-build</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;cmd&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$file&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">    <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source.js&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure><p>按照如上方式操作后，你可能会发现自己怎么不OK呢？！可能自己就是那不幸运的一部分，如果你没有成功也不用着急，可以参考以下方式，接着来Do it！<br>在终端运行:<code>which node</code><br>获取路径如下:<code>/usr/local/bin/node</code><br>重新配置如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;cmd&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/usr/local/bin/node&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$file&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">    <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source.js&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure><h3 id="step-3：-2"><a href="#step-3：-2" class="headerlink" title="step 3："></a>step 3：</h3><p>测试输出效果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = &#123;<span class="attr">name</span>:<span class="string">&#x27;lili&#x27;</span>,<span class="attr">age</span>:<span class="number">24</span>&#125;;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Sublime Test3:&quot;</span>+i);<span class="comment">//在NodeJS下没有debug()函数  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(temp);  </span><br><span class="line"><span class="comment">// 输出  </span></span><br><span class="line"><span class="comment">// Sublime Test3:2  </span></span><br><span class="line"><span class="comment">// Sublime Test3:1  </span></span><br><span class="line"><span class="comment">// Sublime Test3:0  </span></span><br><span class="line"><span class="comment">// &#123; name: &#x27;lili&#x27;, age: 24 &#125;  </span></span><br></pre></td></tr></table></figure><blockquote><p><strong>安装Package Control</strong></p></blockquote><p>如果需要使用Sublime Test安装插件，可以访问这个网站<a href="https://packagecontrol.io/installation%EF%BC%8C%E6%8C%89%E7%85%A7%E8%AF%B4%E6%98%8E%E5%AE%89%E8%A3%85Package">https://packagecontrol.io/installation，按照说明安装Package</a> Control。<code>重启sublime text，在package control Install中搜索这个插件并下载</code>。也就是说这个插件可以在sublime中直接搜索下载。</p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 模块化编程框架 BeeHive</title>
      <link href="/blog//2017/02/27/ios-modular-programing-framework-behive.html"/>
      <url>/blog//2017/02/27/ios-modular-programing-framework-behive.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>BeeHive是用于iOS的app模块化编程的框架实现方案，吸收了Spring框架service的理念来实现模块间的API耦合。基本原理如下…<span id="more"></span></li></ul><p><code>github下载地址:</code><a href="https://github.com/alibaba/BeeHive">https://github.com/alibaba/BeeHive</a></p><blockquote><p>BeeHive 详细介绍</p></blockquote><p>BeeHive是用于iOS的app模块化编程的框架实现方案，吸收了Spring框架service的理念来实现模块间的API耦合。基本原理如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-02-27/bb268dc6f2057ef8801e395575bdb03f/1819713-4ea0e153b38a749c.jpg" alt="基本原理.jpg"></p><p><strong>实现以下特性</strong></p><ul><li>插件化的模块开发运行框架</li><li>模块具体实现与接口调用分离</li><li>模块生命周期管理，扩展了应用的系统事件</li></ul><p>因为基于Spring的Service理念，虽然可以使模块间的具体实现与接口解耦，但无法避免对接口类的依赖关系。</p><p>为什么不使用invoke以及动态链接库技术实现对接口实现的解耦，类似Apache的DSO的方式。</p><p>主要是考虑学习成本难度以及动态调用实现无法在编译检查阶段检测接口参数变更等问题，动态技术需要更高的编程门槛要求</p><p>BeeHive灵感来源于蜂窝。蜂窝是世界上高度模块化的工程结构，六边形的设计能带来无限扩张的可能。所以我们用了BeeHive来做为这个项目的命名。</p><h2 id="生命周期的变化"><a href="#生命周期的变化" class="headerlink" title="生命周期的变化"></a>生命周期的变化</h2><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>BeeHive会给每个模块提供生命周期事件，用于与BeeHive宿主环境进行必要信息交互 事件分为三种类型：</p><ul><li>系统事件</li><li>通用事件</li><li>业务自定义事件</li></ul><h4 id="系统事件"><a href="#系统事件" class="headerlink" title="系统事件"></a>系统事件</h4><p>系统事件通常是Application生命周期事件，例如DidBecomeActive、WillEnterBackground等系统事件基本工作流如下：<br><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-02-27/bb268dc6f2057ef8801e395575bdb03f/1819713-e79675eb29ead910.jpeg" alt="系统事件基本工作流.jpeg"></p><h4 id="通用事件"><a href="#通用事件" class="headerlink" title="通用事件"></a>通用事件</h4><p>在系统事件的基础之上，扩展了应用的通用事件，例如modSetup、modInit等，可以用于编码实现各插件模块的设置与初始化</p><p>扩展的通用事件如下：<br><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-02-27/bb268dc6f2057ef8801e395575bdb03f/1819713-cdfab37ea4262d81.jpeg" alt="通用事件.jpeg"></p><h4 id="业务自定义事件"><a href="#业务自定义事件" class="headerlink" title="业务自定义事件"></a>业务自定义事件</h4><p>如果觉得系统事件、通用事件不足以满足需要，我们还将事件封装简化成BHAppdelgate，你可以通过继承BHAppdelegate来扩展自己的事件。</p><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>模块注册的方式有静态注册与动态注册两种</p><ul><li>静态注册<br>通过在BeeHive.plist文件中注册符合BHModuleProtocol协议模块类<br><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-02-27/bb268dc6f2057ef8801e395575bdb03f/1819713-f28d3dd95dd79ec7.png" alt="静态注册.png"></li><li>动态注册</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@implementation HomeModule</span><br><span class="line"><span class="function"><span class="title">BH_EXPORT_MODULE</span><span class="params">()</span></span>  <span class="comment">//声明该类为模块入口</span></span><br></pre></td></tr></table></figure><p>在模块入口类实现中 使用BH_EXPORT_MODULE()宏声明该类为模块入口实现类</p><h4 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h4><p>如果设置模块导出为BH_EXPORT_MODULE(YES)，则会在启动之后第一屏内容展现之前异步执行模块的初始化，可以优化启动时时间消耗</p><h4 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h4><p>BHModuleProtocol为各个模块提供了每个模块可以hook的函数，用于实现插件逻辑以及代码实现</p><ul><li>设置环境变量<br>通过context.env可以判断我们的应用环境状态来决定我们如何配置我们的应用</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)modSetup:(BHContext *)context</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (context.env) &#123;</span><br><span class="line">        <span class="keyword">case</span> BHEnvironmentDev:</span><br><span class="line">        <span class="comment">//....初始化开发环境</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BHEnvironmentProd:</span><br><span class="line">        <span class="comment">//....初始化生产环境</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>模块初始化<br>如果模块有需要启动时初始化的逻辑，可以在modInit里编写，例如模块注册一个外部模块可以访问的Service接口</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)modInit:(BHContext *)context</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//注册模块的接口服务</span></span><br><span class="line">    [[BeeHive shareInstance] registerService:<span class="class"><span class="keyword">@protocol</span>(<span class="title">UserTrackServiceProtocol</span>) <span class="title">service</span>:[<span class="title">BHUserTrackViewController</span> <span class="title">class</span>]];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>处理系统事件<br>系统的事件会被传递给每个模块，让每个模块自己决定编写业务处理逻辑，比如3D-Touch功能</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">void</span>)modQuickAction:(BHContext *)context</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> process:context.shortcutItem handler:context.scompletionHandler];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模间调用"><a href="#模间调用" class="headerlink" title="模间调用"></a>模间调用</h4><p>通过处理Event编写各个业务模块可以实现插件化编程，各业务模块之间没有任何依赖，core与module之间通过event交互，实现了插件隔离。但有时候我们需要模块间的相互调用某些功能来协同完成功能。 通常会有三种形式的接口访问形式</p><ul><li>基于接口的实现Service访问方式（java spring框架实现）</li><li>基于函数调用约定实现的Export Method(PHP的extension，ReactNatve的扩展机制)</li><li>基于跨应用实现的Url route模式(iphone app之间的互访)</li></ul><p>我们目前实现了第一种方式，后续会逐步实现后两种方式</p><h4 id="Servcie访问"><a href="#Servcie访问" class="headerlink" title="Servcie访问"></a>Servcie访问</h4><p>Service访问的优点是可以编译时检查发现接口的变更，从而及时修正接口问题。缺点是需要依赖接口定义的头文件，通过模块增加得越多，维护接口定义的也有一定工作量。以为HomeServiceProtocol为例</p><ul><li>定义HomeServiceProtocol暴露模块对外访问的接口</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">HomeServiceProtocol</span> &lt;<span class="title">NSObject</span>, <span class="title">BHServiceProtocol</span>&gt;</span></span><br><span class="line">-(<span class="type">void</span>)registerViewController:(<span class="built_in">UIViewController</span> *)vc title:(<span class="built_in">NSString</span> *)title iconName:(<span class="built_in">NSString</span> *)iconName;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><ul><li>注册Service有三种方式</li><li>声明式注册</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HomeService</span></span></span><br><span class="line">BH_EXPORT_SERVICE()</span><br></pre></td></tr></table></figure><ul><li>API注册</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[BeeHive shareInstance] registerService:<span class="class"><span class="keyword">@protocol</span>(<span class="title">HomeServiceProtocol</span>) <span class="title">service</span>:[<span class="title">BHViewController</span> <span class="title">class</span>]];</span></span><br></pre></td></tr></table></figure><ul><li>BHService.plist注册</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>HomeServiceProtocol<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>BHViewController<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;BHService.h&quot;</span></span></span><br><span class="line"><span class="type">id</span>&lt; HomeServiceProtocol &gt; homeVc = [[BeeHive shareInstance] createService:<span class="class"><span class="keyword">@protocol</span>(<span class="title">HomeServiceProtocol</span>)];</span></span><br></pre></td></tr></table></figure><h4 id="单例与多例"><a href="#单例与多例" class="headerlink" title="单例与多例"></a>单例与多例</h4><p>对于有些场景下，我们访问每个声明为service的对象，希望对象能保留一些状态，那我们需要声明这个service对象是一个单例对象。</p><p>我们只需要在service对象中实现事件函数</p><p>声明</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">BOOL</span>) singleton</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过createService获取的对象则为单例对象，如果实现上面函数返回的是NO，则createService返回的是多例</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">id</span>&lt; HomeServiceProtocol &gt; homeVc = [[BeeHive shareInstance] createService:<span class="class"><span class="keyword">@protocol</span>(<span class="title">HomeServiceProtocol</span>)];</span></span><br></pre></td></tr></table></figure><h3 id="上下文环境Context"><a href="#上下文环境Context" class="headerlink" title="上下文环境Context"></a>上下文环境Context</h3><ul><li>初始化设置应用的项目信息，并在各模块间共享整个应用程序的信息</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    [BHContext shareInstance].env ＝ BHEnvironmentDev; <span class="comment">//定义应用的运行开发环境</span></span><br><span class="line">    [BHContext shareInstance].application = application;</span><br><span class="line">    [BHContext shareInstance].launchOptions = launchOptions;</span><br><span class="line">    [BHContext shareInstance].moduleConfigName = <span class="string">@&quot;BeeHive.bundle/CustomModulePlist&quot;</span>;<span class="comment">//可选，默认为BeeHive.bundle/BeeHive.plist</span></span><br><span class="line">    [BHContext shareInstance].serviceConfigName =  <span class="string">@&quot;BeeHive.bundle/CustomServicePlist&quot;</span>;<span class="comment">//可选，默认为BeeHive.bundle/BHService.plist</span></span><br><span class="line">    [[BeeHive shareInstance] setContext:[BHContext shareInstance]];</span><br><span class="line">    [<span class="variable language_">super</span> application:application didFinishLaunchingWithOptions:launchOptions];</span><br><span class="line">    <span class="type">id</span>&lt;HomeServiceProtocol&gt; homeVc = [[BeeHive shareInstance] createService:<span class="class"><span class="keyword">@protocol</span>(<span class="title">HomeServiceProtocol</span>)];</span></span><br><span class="line">    <span class="keyword">if</span> ([homeVc isKindOfClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="built_in">UINavigationController</span> *navCtrl = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:(<span class="built_in">UIViewController</span>*)homeVc];</span><br><span class="line">        <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line">        <span class="keyword">self</span>.window.rootViewController = navCtrl;</span><br><span class="line">        [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>更多细节可以参考Example用例</code></p><ul><li>集成方式</li></ul><p><code>use cocoapods</code><br><code>pod &quot;BeeHive&quot;, &#39;1.0.0&#39;</code></p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-静默方式发送邮件(SKPSMTPMessage)</title>
      <link href="/blog//2017/02/16/ios-sends-mesages-silently-(skpsmtpmesage).html"/>
      <url>/blog//2017/02/16/ios-sends-mesages-silently-(skpsmtpmesage).html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>在iOS开发中，有时候我们需要使用到发送邮件的功能，比如说接收用户的反馈信息、APP的崩溃情况的通知等等…<span id="more"></span></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在iOS开发中，有时候我们需要使用到发送邮件的功能，比如说接收用户的反馈信息、APP的崩溃情况的通知等等。</p><p><strong>iOS系统提供了两种原生方式已供开发者发送邮件(email)：</strong><br>1）openURL（原生）</p><p>——用户体验较差，程序会进入后台，跳转至邮件发送界面。</p><p>2）MFMailComposeViewController（原生）</p><p>——不会进入后台，使用模态弹出邮件发送视图。</p><h2 id="这里主要介绍第三种，采用静默方式发送的email："><a href="#这里主要介绍第三种，采用静默方式发送的email：" class="headerlink" title="这里主要介绍第三种，采用静默方式发送的email："></a><strong>这里主要介绍第三种，采用静默方式发送的email：</strong></h2><p><code>使用到的库：</code><a href="https://github.com/jetseven/skpsmtpmessage">SKPSMTPMessage</a><br><code>下载地址：</code><a href="https://github.com/jetseven/skpsmtpmessage">https://github.com/jetseven/skpsmtpmessage</a></p><blockquote><p><strong>——你可以不需要告知用户将要进行邮件发送的事情，我在想这个是不是不符合苹果的理论。当然你也可以在发送之前弄个弹出框告知用户，并让用户选择是否发送。</strong></p></blockquote><p><code>小主在Xcode 8.1，真机（iOS 10.2.1）环境下亲测通过，这里就如何使用该库做一下说明，希望对其他有需要的同学有帮助。</code></p><h3 id="1、工程配置"><a href="#1、工程配置" class="headerlink" title="1、工程配置"></a>1、工程配置</h3><p>我是手动导进工程里，因为该库是使用MRC开发的，所以就要设置进行相应的设置。<br><code>在项目的build phrases-&gt;compile source-&gt;找到SKPSMTPMessage.m,NSStream+SKPSMTPExtensions.m这两个文件，双击后再弹框中添加-fno-objc-arc</code>。<br>可见图例：</p><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2017-02-16/733ea8288ad64f3cc51cbcab5b022830/1819713-fa6a499835a9584b.png" alt="工程配置.png"></p><h3 id="2、引入头文件"><a href="#2、引入头文件" class="headerlink" title="2、引入头文件"></a>2、引入头文件</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;SKPSMTPMessage.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;NSData+Base64Additions.h&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="3、遵循协议"><a href="#3、遵循协议" class="headerlink" title="3、遵循协议"></a>3、遵循协议</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SKPSMTPMessageDelegate</span></span><br></pre></td></tr></table></figure><h3 id="4、协议的实现"><a href="#4、协议的实现" class="headerlink" title="4、协议的实现"></a>4、协议的实现</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - SKPSMTPMessageDelegate</span></span><br><span class="line">- (<span class="type">void</span>)messageSent:(<span class="built_in">SKPSMTPMessage</span> *)message</span><br><span class="line">&#123;</span><br><span class="line">[<span class="keyword">self</span>.view makeToast:<span class="string">@&quot;发送邮件成功&quot;</span> duration:<span class="number">1</span> position:<span class="string">@&quot;center&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)messageFailed:(<span class="built_in">SKPSMTPMessage</span> *)message error:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">[<span class="keyword">self</span>.view makeToast:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;发送邮件失败nerror - %@&quot;</span>,error] duration:<span class="number">1</span> position:<span class="string">@&quot;center&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;message - %@\nerror - %@&quot;</span>, message, error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、方法的实现"><a href="#5、方法的实现" class="headerlink" title="5、方法的实现"></a>5、方法的实现</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)sendEmail</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">SKPSMTPMessage</span> *myMessage = [[<span class="built_in">SKPSMTPMessage</span> alloc] init];</span><br><span class="line">    <span class="comment">//此处发件箱已163为例：</span></span><br><span class="line">    myMessage.fromEmail = <span class="string">@&quot;******@163.com&quot;</span>;<span class="comment">//发送者邮箱</span></span><br><span class="line">    myMessage.toEmail = <span class="string">@&quot;******@qq.com&quot;</span>;<span class="comment">//收件邮箱</span></span><br><span class="line">    <span class="comment">//myMessage.bccEmail = @&quot;******@qq.com&quot;;//抄送</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//myMessage.relayHost = @&quot;smtp.exmail.qq.com&quot;;//发送地址host 腾讯企业邮箱:smtp.exmail.qq.com</span></span><br><span class="line">    myMessage.relayHost = <span class="string">@&quot;smtp.163.com&quot;</span>;</span><br><span class="line">    myMessage.requiresAuth = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">if</span> (myMessage.requiresAuth) &#123;</span><br><span class="line">        myMessage.login = <span class="string">@&quot;******@163.com&quot;</span>;<span class="comment">//发送者邮箱的用户名</span></span><br><span class="line">        myMessage.pass = <span class="string">@&quot;******&quot;</span>;<span class="comment">//发送者邮箱的密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    myMessage.wantsSecure = <span class="literal">YES</span>;<span class="comment">//为gmail邮箱设置 smtp.gmail.com</span></span><br><span class="line">    myMessage.subject = <span class="string">@&quot;iOS静默方式发送的email&quot;</span>;<span class="comment">//邮件主题</span></span><br><span class="line">    myMessage.delegate = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; *   设置邮件内容   * &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; */</span></span><br><span class="line">    <span class="comment">//1.文字信息</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *plainPart = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:<span class="string">@&quot;text/plain; charset=UTF-8&quot;</span>,kSKPSMTPPartContentTypeKey, <span class="string">@&quot;是不是很简单呀，这样一封email就发送成功了呢！&quot;</span>,kSKPSMTPPartMessageKey,<span class="string">@&quot;8bit&quot;</span>,kSKPSMTPPartContentTransferEncodingKey,<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; *   添加附件   * &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     //2.联系人信息附件</span></span><br><span class="line"><span class="comment">     NSDictionary *vcfPart = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;text/directory;\r\n\tx-unix-mode=0644;\r\n\tname=\&quot;test.vcf\&quot;&quot;,kSKPSMTPPartContentTypeKey,</span></span><br><span class="line"><span class="comment">     @&quot;attachment;\r\n\tfilename=\&quot;test.vcf\&quot;&quot;,kSKPSMTPPartContentDispositionKey,[vcfData encodeBase64ForData],kSKPSMTPPartMessageKey,@&quot;base64&quot;,kSKPSMTPPartContentTransferEncodingKey,nil];</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.图片和视频附件</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     //3.1视频附件</span></span><br><span class="line"><span class="comment">     NSDictionary *videoPart = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;video/quicktime;\r\n\tx-unix-mode=0644;\r\n\tname=\&quot;video.mov\&quot;&quot;,kSKPSMTPPartContentTypeKey,</span></span><br><span class="line"><span class="comment">     @&quot;attachment;\r\n\tfilename=\&quot;video.mov\&quot;&quot;,kSKPSMTPPartContentDispositionKey,[videoData encodeBase64ForData],kSKPSMTPPartMessageKey,@&quot;base64&quot;,kSKPSMTPPartContentTransferEncodingKey,nil];</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取当前屏幕截图</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="built_in">CGSizeMake</span>(kIPHONE_WIDTH, kIPHONE_HEIGHT), <span class="literal">NO</span>, [[<span class="built_in">UIScreen</span> mainScreen] scale]);</span><br><span class="line">    [<span class="keyword">self</span>.view drawViewHierarchyInRect:<span class="keyword">self</span>.view.bounds afterScreenUpdates:<span class="literal">NO</span>];</span><br><span class="line">    <span class="built_in">UIImage</span> *snapshot = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    <span class="built_in">NSData</span> *imageData = <span class="built_in">UIImageJPEGRepresentation</span>(snapshot, <span class="number">1.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.2图片附件</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *imagePart = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:<span class="string">@&quot;image/jpg;\r\n\tx-unix-mode=0644;\r\n\tname=\&quot;snapshot.jpg\&quot;&quot;</span>,kSKPSMTPPartContentTypeKey,</span><br><span class="line">                               <span class="string">@&quot;attachment;\r\n\tfilename=\&quot;snapshot.jpg\&quot;&quot;</span>,kSKPSMTPPartContentDispositionKey,[imageData encodeBase64ForData],kSKPSMTPPartMessageKey,<span class="string">@&quot;base64&quot;</span>,kSKPSMTPPartContentTransferEncodingKey,<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    myMessage.parts = [<span class="built_in">NSArray</span> arrayWithObjects:plainPart,imagePart,<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        [myMessage send];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于本站使用到的插件</title>
      <link href="/blog//2016/10/01/about-the-plug-in-used-by-this-site.html"/>
      <url>/blog//2016/10/01/about-the-plug-in-used-by-this-site.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code></li><li>非常高兴您能阅读本篇文章，麻烦输入密码验证一下哦~…<span id="more"></span></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!--+ [Xcode](#Xcode)## <a name='Xcode'>Xcode</a>--><ul><li><strong><a href="#%E6%9C%AC%E7%AB%99hexo%E4%B8%BB%E9%A2%98">本站hexo主题</a></strong></li><li><a href="#Yelee_GitHub%E4%BB%93%E5%BA%93%E5%B1%95%E7%A4%BA%E5%B0%8F%E6%8C%82%E4%BB%B6">Yelee_GitHub仓库展示小挂件</a></li><li><a href="#Yelee_%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">Yelee_文章目录</a></li><li><a href="#Yelee_%E6%96%87%E6%9C%AB%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF">Yelee_文末版权信息</a></li><li><strong><a href="#%E6%9C%AA%E6%B7%BB%E5%8A%A0%E7%9A%84%E5%8F%82%E8%80%83%E5%8A%9F%E8%83%BD">未添加的参考功能</a></strong></li><li><a href="#Hexo%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%97%A5%E5%8E%86%E4%BA%91%E5%8A%9F%E8%83%BD">Hexo主题中添加日历云功能</a></li><li><a href="#hexo-tag-aplayer">音乐视频播放器插件</a></li><li><a href="#hexo-tag-cloud">动态tag云标签</a></li><li><strong><a href="#html%E6%B8%B8%E6%88%8F">html游戏</a></strong></li><li><a href="#2048">2048</a></li><li><strong><a href="#hexo%E6%8F%92%E4%BB%B6">hexo插件</a></strong></li><li><a href="#hexo-pdf">PDF阅读器插件hexo-pdf</a></li><li><a href="#hexo-generator-feed">RSS订阅插件hexo-generator-feed</a></li><li><a href="#hexo-generator-sitemap">hexo-generator-sitemap</a></li><li><a href="#hexo-generator-seo-friendly-sitemap">hexo-generator-seo-friendly-sitemap</a></li><li><a href="#hexo-encrypt">加密插件hexo-encrypt</a></li><li><a href="#hexo-tag-aplayer">音乐插件hexo-tag-aplayer</a></li><li><a href="#Yajon/donate-page">捐赠按钮Yajon&#x2F;donate-page</a></li><li><a href="#hexo-translate-title">将文章标题转成英文的插件hexo-translate-title</a></li></ul><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><ul><li>图床<br><a href="https://sm.ms/">https://sm.ms/</a><br>说明：不太清楚图片上传到哪里去了</li><li>关于我的一些网络图片<br><strong>欢迎来到郭艳军的那些事儿GIF</strong><br><a href="https://ooo.0o0.ooo/2017/04/01/58df476f47c87.gif">https://ooo.0o0.ooo/2017/04/01/58df476f47c87.gif</a><br><strong>郭艳军GIF</strong><br><a href="https://ooo.0o0.ooo/2017/04/01/58df487d4ded8.gif">https://ooo.0o0.ooo/2017/04/01/58df487d4ded8.gif</a></li><li>代码高亮<br>插件：<a href="https://jmblog.github.io/color-themes-for-google-code-prettify/">https://jmblog.github.io/color-themes-for-google-code-prettify/</a></li></ul><h2 id="本站hexo主题"><a href="#本站hexo主题" class="headerlink" title="本站hexo主题"></a><a name='本站hexo主题'>本站hexo主题</a></h2><p><strong><a href="https://github.com/MOxFIVE/hexo-theme-yelee">Yelee主题GitHub地址</a></strong></p><p><strong><a href="http://moxfive.coding.me/yelee/2.Basic-Usage/menu.html">Yelee主题使用说明</a></strong></p><p><strong><a href="https://github.com/keRee/Awsome-Front-End-learning-resource">GitHub最全的前端资源汇总仓库（包括前端学习、开发资源、求职面试等）</a></strong></p><h3 id="Yelee-GitHub仓库展示小挂件"><a href="#Yelee-GitHub仓库展示小挂件" class="headerlink" title="Yelee_GitHub仓库展示小挂件"></a><a name='Yelee_GitHub仓库展示小挂件'>Yelee_GitHub仓库展示小挂件</a></h3><p><img src="http://moxfive.coding.me/yelee/src/github-repo.png" alt="示例图片"></p><h4 id="使用描述"><a href="#使用描述" class="headerlink" title="使用描述"></a>使用描述</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;github-widget&quot;</span> data-repo=<span class="string">&quot;&lt;GitHub 用户名&gt;/&lt;仓库名&gt;.js&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><div class="github-widget" data-repo="MOxFIVE/hexo-theme-yelee"></div><h3 id="Yelee-文章目录"><a href="#Yelee-文章目录" class="headerlink" title="Yelee_文章目录"></a><a name='Yelee_文章目录'>Yelee_文章目录</a></h3><p><img src="http://moxfive.coding.me/yelee/src/feat.toc.gif" alt="示例图片"></p><h4 id="使用描述-1"><a href="#使用描述-1" class="headerlink" title="使用描述"></a>使用描述</h4><ul><li>指定文章中关闭目录 toc: false</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015-08-19 00:00:00</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><ul><li>指定文章中隐藏目录序号 toc_list_number: false</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">toc_list_number:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="Yelee-文末版权信息"><a href="#Yelee-文末版权信息" class="headerlink" title="Yelee_文末版权信息"></a><a name='Yelee_文末版权信息'>Yelee_文末版权信息</a></h3><p><img src="http://moxfive.coding.me/yelee/src/copyright.info.png" alt="示例图片"></p><h4 id="使用描述-2"><a href="#使用描述-2" class="headerlink" title="使用描述"></a>使用描述</h4><ul><li>指定文章中关闭目录 original: false</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015-08-19 00:00:00</span></span><br><span class="line"><span class="attr">original:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="未添加的参考功能"><a href="#未添加的参考功能" class="headerlink" title="未添加的参考功能"></a><a name='未添加的参考功能'>未添加的参考功能</a></h2><h3 id="Hexo主题中添加日历云功能"><a href="#Hexo主题中添加日历云功能" class="headerlink" title="Hexo主题中添加日历云功能"></a><a name='Hexo主题中添加日历云功能'>Hexo主题中添加日历云功能</a></h3><ul><li>参考地址：<a href="http://www.tuicool.com/articles/NZJ3qeY">http://www.tuicool.com/articles/NZJ3qeY</a></li></ul><h3 id="动态tag云标签"><a href="#动态tag云标签" class="headerlink" title="动态tag云标签"></a><a name='hexo-tag-cloud'>动态tag云标签</a></h3><ul><li>参考地址：<a href="https://github.com/MikeCoder/hexo-tag-cloud">https://github.com/MikeCoder/hexo-tag-cloud</a></li></ul><h2 id="html游戏"><a href="#html游戏" class="headerlink" title="html游戏"></a><a name='html游戏'>html游戏</a></h2><h3 id="2048"><a href="#2048" class="headerlink" title="2048"></a><a name='2048'>2048</a></h3><p><code>github地址：</code><a href="https://github.com/keRee/2048">https://github.com/keRee/2048</a></p><p><code>在线演示</code><a href="https://keree.github.io/">https://keree.github.io/</a></p><ul><li>iframe嵌入</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;https://keree.github.io/#/2048&quot;</span> <span class="attribute">style</span>=<span class="string">&quot;overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:580px;min-width:430px;&quot;</span> <span class="attribute">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attribute">allowtransparency</span>=<span class="string">&quot;true&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>或者，不一定成功</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;https://cdn.rawgit.com/keRee/2048/b43d5e0a/index.html&quot;</span> <span class="attribute">style</span>=<span class="string">&quot;overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:580px;min-width:430px;&quot;</span> <span class="attribute">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attribute">allowtransparency</span>=<span class="string">&quot;true&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h2 id="hexo插件"><a href="#hexo插件" class="headerlink" title="hexo插件"></a><a name='hexo插件'>hexo插件</a></h2><h3 id="PDF阅读器插件hexo-pdf"><a href="#PDF阅读器插件hexo-pdf" class="headerlink" title="PDF阅读器插件hexo-pdf"></a><a name='hexo-pdf'>PDF阅读器插件hexo-pdf</a></h3><p><code>github地址：</code><a href="https://github.com/superalsrk/hexo-pdf/">hexo-pdf</a></p><h4 id="安装时间"><a href="#安装时间" class="headerlink" title="安装时间"></a>安装时间</h4><p>2017.03.14</p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>通过嵌入一个PDF的链接，使你的博客不需要借助第三方便能够在本页在线预览PDF文档。</p><h4 id="使用描述-3"><a href="#使用描述-3" class="headerlink" title="使用描述"></a>使用描述</h4><p>Normal PDF</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf https:<span class="regexp">//</span>www.szse.cn<span class="regexp">/lawrules/</span>csrcrules<span class="regexp">/notice/</span>P020230406509524241312.pdf %&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">pdf</span> ./bash_freshman.pdf %&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><iframe width='738' height='523' class='preview-iframe' scrolling='no' frameborder='0' src='https://www.szse.cn/lawrules/csrcrules/notice/P020230406509524241312.pdf' ></iframe><h3 id="RSS订阅插件hexo-generator-feed"><a href="#RSS订阅插件hexo-generator-feed" class="headerlink" title="RSS订阅插件hexo-generator-feed"></a><a name='hexo-generator-feed'>RSS订阅插件hexo-generator-feed</a></h3><p><code>github地址：</code><a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a></p><h4 id="安装时间-1"><a href="#安装时间-1" class="headerlink" title="安装时间"></a>安装时间</h4><p>2017.03.14</p><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>RSS订阅所需插件</p><h4 id="使用描述-4"><a href="#使用描述-4" class="headerlink" title="使用描述"></a>使用描述</h4><p>已在<code>_config.yml</code>中集成并使用，不需要额外配置。</p><h3 id="hexo-generator-sitemap"><a href="#hexo-generator-sitemap" class="headerlink" title="hexo-generator-sitemap"></a><a name='hexo-generator-sitemap'>hexo-generator-sitemap</a></h3><p><code>github地址：</code><a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a></p><h4 id="安装时间-2"><a href="#安装时间-2" class="headerlink" title="安装时间"></a>安装时间</h4><p>2017.03.14</p><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>站点SEO优化，是网站被百度等录入的插件。</p><h4 id="使用描述-5"><a href="#使用描述-5" class="headerlink" title="使用描述"></a>使用描述</h4><p>已在<code>_config.yml</code>中集成并使用，不需要额外配置。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">    path: sitemap.<span class="keyword">xml</span></span><br><span class="line">    <span class="title">template</span>: ./sitemap_template.xml</span><br></pre></td></tr></table></figure><h3 id="hexo-generator-seo-friendly-sitemap"><a href="#hexo-generator-seo-friendly-sitemap" class="headerlink" title="hexo-generator-seo-friendly-sitemap"></a><a name='hexo-generator-seo-friendly-sitemap'>hexo-generator-seo-friendly-sitemap</a></h3><p><code>github地址：</code><a href="https://github.com/ludoviclefevre/hexo-generator-seo-friendly-sitemap">hexo-generator-seo-friendly-sitemap</a></p><h4 id="安装时间-3"><a href="#安装时间-3" class="headerlink" title="安装时间"></a>安装时间</h4><p>2017.03.14</p><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>站点SEO优化，是网站被百度等录入的插件。</p><h4 id="使用描述-6"><a href="#使用描述-6" class="headerlink" title="使用描述"></a>使用描述</h4><p>已在<code>_config.yml</code>中集成并使用，不需要额外配置。</p><h3 id="加密插件hexo-encrypt"><a href="#加密插件hexo-encrypt" class="headerlink" title="加密插件hexo-encrypt"></a><a name='hexo-encrypt'>加密插件hexo-encrypt</a></h3><p><code>github地址：</code><a href="https://github.com/edolphin-ydf/hexo-encrypt">https://github.com/edolphin-ydf/hexo-encrypt</a></p><h4 id="安装时间-4"><a href="#安装时间-4" class="headerlink" title="安装时间"></a>安装时间</h4><p>2017.03.21</p><h4 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h4><p>尝试着想一下，你写了一篇博客，但是，出于某种原因，不太希望每一个人都可以看到他。所以你常常会为这种文章设置一个密码，其他人需要输入密码才可以访问这篇博客。对于 emlog 或者 wordpress 来说，这很容易，但是对于 hexo 来说，之前并没有一个类似的功能。</p><p>所以，hexo-encrypt因为这个需求而诞生了。</p><p><code>线上 Demo 你可以查看</code> <a href="http://edolphin.site/2016/05/31/encrypt-test/">http://edolphin.site/2016/05/31/encrypt-test/</a></p><p>密码是 “123456”</p><h4 id="使用描述-7"><a href="#使用描述-7" class="headerlink" title="使用描述"></a>使用描述</h4><ul><li>在你的文章的头部添加上对应的字段，如 password, abstract, message</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hello</span> <span class="string">world</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016-03-30 21:18:02</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">iOS</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enc_replace_url:</span> <span class="literal">true</span> <span class="comment"># this indicate wether the plugin should replace the img url in this post, this option has a higher priority than `replace_all_url` in _config.yml</span></span><br><span class="line"><span class="attr">enc_pwd:</span> <span class="number">123456</span> <span class="comment"># this is the way to set encrypt password for this post</span></span><br><span class="line"><span class="attr">enc_img_type:</span> <span class="string">qiniu</span> <span class="comment"># or base64</span></span><br><span class="line"><span class="attr">enc_template:</span> <span class="string">&#x27;user defined decrpyt ui template&#x27;</span> <span class="comment"># same as template in _config.yml but has a higher priority</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="音乐插件hexo-tag-aplayer"><a href="#音乐插件hexo-tag-aplayer" class="headerlink" title="音乐插件hexo-tag-aplayer"></a><a name='hexo-tag-aplayer'>音乐插件hexo-tag-aplayer</a></h3><p><code>github地址：</code><a href="https://github.com/grzhan/hexo-tag-aplayer">https://github.com/grzhan/hexo-tag-aplayer</a></p><h4 id="安装时间-5"><a href="#安装时间-5" class="headerlink" title="安装时间"></a>安装时间</h4><p>2017.03.21</p><h4 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h4><p>在博客中插入音乐。<br>插件基于 DIYgod 编写的 html5 播放器 APlayer。</p><p><code>引用网页查看</code> <a href="http://login926.github.io/2016/07/20/HexoMedia/">Hexo博客中插入音乐&#x2F;视频</a></p><p>本页查看效果：</p>        <div id="aplayer-AdcfmFRs" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-AdcfmFRs"),            narrow: false,            autoplay: false,            showlrc: 3,            music: {              title: "喜欢你",              author: "邓紫棋",              url: "https://music.163.com/song/media/outer/url?id=28949444",              pic: "https://api.i-meto.com/meting/api?server=netease&type=pic&id=8896148580676276&auth=435419eb5c22febe50a3251373ae8aa8c085f2d1",              lrc: "https://api.i-meto.com/meting/api?server=netease&type=lrc&id=28949444&auth=bff6064dd8d16ad21fd8dffb217686dd992360c5"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h4 id="使用描述-8"><a href="#使用描述-8" class="headerlink" title="使用描述"></a>使用描述</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">aplayer</span> title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span></span><br></pre></td></tr></table></figure><ul><li>关于歌词</li></ul><p>除了’lrc’选项，您可以使用具有结束标签的aplayerlrc来显示歌词。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlrc <span class="string">&quot;title&quot;</span> <span class="string">&quot;author&quot;</span> <span class="string">&quot;url&quot;</span> <span class="string">&quot;autoplay&quot;</span> %&#125;</span><br><span class="line">[<span class="number">00</span>:<span class="number">00.00</span>]lrc here</span><br><span class="line">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer <span class="string">&quot;喜欢你&quot;</span> <span class="string">&quot;邓紫棋&quot;</span> <span class="comment">&quot;</span></span><br><span class="line">https://music.<span class="number">163</span>.<span class="keyword">com</span>/song/media/outer/url?id=<span class="number">28949444</span><span class="string">&quot; &quot;</span>https://api.i-meto.<span class="keyword">com</span>/meting/api?server=netease&amp;<span class="built_in">type</span>=pic&amp;id=<span class="number">8896148580676276</span>&amp;auth=<span class="number">435419</span>eb5c22febe50a3251373ae8aa8c085f2d1<span class="string">&quot; &quot;</span>lrc:https://api.i-meto.<span class="keyword">com</span>/meting/api?server=netease&amp;<span class="built_in">type</span>=lrc&amp;id=<span class="number">28949444</span>&amp;auth=bff6064dd8d16ad21fd8dffb217686dd992360c5<span class="comment">&quot; %&#125;</span></span><br></pre></td></tr></table></figure><h3 id="视频插件hexo-tag-dplayer"><a href="#视频插件hexo-tag-dplayer" class="headerlink" title="视频插件hexo-tag-dplayer"></a><a name='hexo-tag-dplayer'>视频插件hexo-tag-dplayer</a></h3><p><code>github地址：</code><a href="https://github.com/NextMoe/hexo-tag-dplayer">https://github.com/NextMoe/hexo-tag-dplayer</a></p><h4 id="安装时间-6"><a href="#安装时间-6" class="headerlink" title="安装时间"></a>安装时间</h4><p>2017.03.21</p><h4 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h4><p>在博客中插入视频。<br>插件基于 DIYgod 编写的 html5 播放器 DPlayer。</p><p><code>引用网页查看</code> <a href="http://login926.github.io/2016/07/20/HexoMedia/">Hexo博客中插入音乐&#x2F;视频</a></p><p>本页查看效果：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> dplayer <span class="string">&quot;url=https://api.dogecloud.com/player/get.mp4?vcode=5ac682e6f8231991&amp;userId=17&amp;ext=.mp4&quot;</span>  <span class="string">&quot;pic=http://home.ustc.edu.cn/~mmmwhy/GEM.jpg&quot;</span> <span class="string">&quot;loop=yes&quot;</span> <span class="string">&quot;theme=#FADFA3&quot;</span> <span class="string">&quot;autoplay=false&quot;</span> <span class="string">&quot;token=tokendemo&quot;</span> <span class="string">&quot;subtitle.url=https://s-sh-17-dplayercdn.oss.dogecdn.com/hikarunara.vtt&quot;</span> <span class="meta">%</span>&#125;</span><br></pre></td></tr></table></figure><video id="player" playsinline controls data-poster="/path/to/poster.jpg">  <source src="https://api.dogecloud.com/player/get.mp4?vcode=5ac682e6f8231991&userId=17&ext=.mp4" type="video/mp4" />  <track kind="captions" label="English captions" src="https://s-sh-17-dplayercdn.oss.dogecdn.com/hikarunara.vtt" srclang="en" default /></video><ul><li>参数</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">“autoplay”：自动播放视频，不受移动浏览器支持</span><br><span class="line"><span class="string">&#x27;theme&#x27;</span>：theme <span class="type">color</span>，<span class="keyword">default</span>：＃b7daff</span><br><span class="line"><span class="string">&#x27;loop&#x27;</span>：循环播放音乐，默认值：<span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;lang&#x27;</span>：language，`zh<span class="string">&#x27;用于中文，`en&#x27;</span>用于英语，<span class="keyword">default</span>：导航器语言</span><br><span class="line"><span class="string">&#x27;screenshot&#x27;</span>：启用屏幕截图功能，默认值：<span class="literal">false</span>，注意：如果设置为<span class="literal">true</span>，视频和视频海报必须启用跨源</span><br><span class="line"><span class="string">&#x27;hotkey&#x27;</span>：绑定热键，包括左边和空格，默认值：<span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;preload&#x27;</span>：<span class="string">&#x27;auto&#x27;</span>，加载音乐的方式，可以是<span class="string">&#x27;none&#x27;</span><span class="string">&#x27;metadata&#x27;</span><span class="string">&#x27;auto&#x27;</span>，默认：<span class="string">&#x27;auto&#x27;</span></span><br><span class="line"><span class="string">&#x27;url&#x27;</span>：必需，视频网址</span><br><span class="line"><span class="string">&#x27;pic&#x27;</span>：视频封面图片</span><br><span class="line"><span class="string">&#x27;api&#x27;</span>：DPlayer danmaku backend url</span><br><span class="line"><span class="string">&#x27;add&#x27;</span>：dplayer danmuku <span class="keyword">for</span> bilibili</span><br><span class="line"><span class="string">&#x27;id&#x27;</span>：see https:<span class="comment">//github.com/DIYgod/DPlayer</span></span><br><span class="line"><span class="string">&#x27;token&#x27;</span>：see https:<span class="comment">//github.com/DIYgod/DPlayer</span></span><br><span class="line"><span class="string">&#x27;maximum&#x27;</span>：danmaku的最大数量</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;width&#x27;</span>：最大宽度的dplayer wraper</span><br><span class="line"><span class="string">&#x27;height&#x27;</span>：dplayer wraper的最大高度，你可以使用像素“<span class="built_in">height</span> = <span class="number">233</span>px”</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> dplayer <span class="string">&quot;url=http://devtest.qiniudn.com/若能绽放光芒.mp4&quot;</span> <span class="string">&quot;addition=https://dplayer.daoapp.io/bilibili?aid=4157142&quot;</span> <span class="string">&quot;api=http://dplayer.daoapp.io&quot;</span> <span class="string">&quot;pic=http://devtest.qiniudn.com/若能绽放光芒.png&quot;</span> <span class="string">&quot;id=9E2E3368B56CDBB4&quot;</span> <span class="string">&quot;loop=yes&quot;</span> <span class="string">&quot;theme=#FADFA3&quot;</span> <span class="string">&quot;autoplay=false&quot;</span> <span class="string">&quot;token=tokendemo&quot;</span> <span class="meta">%</span>&#125;</span><br><span class="line">&#123;<span class="meta">%</span> dplayer <span class="string">&quot;url=http://devtest.qiniudn.com/若能绽放光芒.mp4&quot;</span> <span class="string">&quot;addition=https://dplayer.daoapp.io/bilibili?aid=4157142&quot;</span> <span class="string">&quot;api=http://dplayer.donot.help/dplayerpy&quot;</span> <span class="string">&quot;pic=http://devtest.qiniudn.com/若能绽放光芒.png&quot;</span> <span class="string">&quot;id=2622668&quot;</span> <span class="string">&quot;loop=yes&quot;</span> <span class="string">&quot;theme=#FADFA3&quot;</span> <span class="string">&quot;autoplay=false&quot;</span> <span class="string">&quot;width=233px&quot;</span> <span class="meta">%</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="使用描述-9"><a href="#使用描述-9" class="headerlink" title="使用描述"></a>使用描述</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">dplayer</span> key=value ... %&#125;</span></span><br></pre></td></tr></table></figure><h3 id="捐赠按钮Yajon-donate-page"><a href="#捐赠按钮Yajon-donate-page" class="headerlink" title="捐赠按钮Yajon&#x2F;donate-page"></a><a name='Yajon/donate-page'>捐赠按钮Yajon&#x2F;donate-page</a></h3><p><code>github地址：</code><a href="https://github.com/Yajon/donate-page">https://github.com/Yajon/donate-page</a></p><h4 id="安装时间-7"><a href="#安装时间-7" class="headerlink" title="安装时间"></a>安装时间</h4><p>2017.03.21</p><h4 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h4><p>使用在博客中插入捐赠按钮。<br>一款捐赠按钮样式，包含PayPal、支付宝、微信，可使用iframe直接嵌入，方便简洁。</p><p><code>引用网页查看</code> <a href="https://yojoy.top/donate-page/sample1/index.html">Hexo博客中插入捐赠按钮</a></p><p>本页查看效果：</p><iframe src="https://yojoy.top/donate-page/sample1/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe><h3 id="将文章标题转成英文的插件hexo-translate-title"><a href="#将文章标题转成英文的插件hexo-translate-title" class="headerlink" title="将文章标题转成英文的插件hexo-translate-title"></a><a name='hexo-translate-title'>将文章标题转成英文的插件hexo-translate-title</a></h3><p><code>github地址：</code><a href="https://github.com/cometlj/hexo-translate-title">https://github.com/cometlj/hexo-translate-title</a></p><h4 id="安装时间-8"><a href="#安装时间-8" class="headerlink" title="安装时间"></a>安装时间</h4><p>2017.03.24</p><h4 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h4><p>使用Google翻译，百度翻译和有道翻译将Hexo中的汉字标题转成英文标题。<br>有道翻译按照官网提供的API，调用时候出现如下报错，故目前可认为不可用，等待查明原因后修改。</p><h4 id="使用描述-10"><a href="#使用描述-10" class="headerlink" title="使用描述"></a>使用描述</h4><p>配置hexo项目下的<code>_config.yml</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">translate_title:</span></span><br><span class="line"><span class="symbol">  translate_way:</span> google    <span class="meta">#google | baidu | youdao</span></span><br><span class="line"><span class="symbol">  youdao_api_key:</span> XXX</span><br><span class="line"><span class="symbol">  youdao_keyfrom:</span> XXX</span><br><span class="line"><span class="symbol">  is_need_proxy:</span> true     <span class="meta">#true | false</span></span><br><span class="line"><span class="symbol">  proxy_url:</span> http:<span class="comment">//localhost:8123</span></span><br></pre></td></tr></table></figure><p>注意：判断是否需要配置google本地代理，因为我在本地是开启时才能访问google翻译的，如果没有被墙，请将_config.yml 下的is_need_proxy: true改为false。如果设置为true,请设置本地代理地址</p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo自定义页面做首页</title>
      <link href="/blog//2016/03/28/hexo-custom-page-for-home-page.html"/>
      <url>/blog//2016/03/28/hexo-custom-page-for-home-page.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>如果你想了解：如何在 GitHub Pages 上传自己写的网页作为首页，Hexo 博客作为其子页？即自己写的页面作为<code>http://user.github.io</code>的页面，将hexo博客放在<code>http://user.github.io/blog</code>上，怎么做？那就接着看…<span id="more"></span></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程的前提已经用hexo将博客搭建在<code>yourname.github.io</code>的repository上，接下来跟随博主开始愉快的旅程吧。</p><blockquote><p>说一下我走过的弯路吧，想想真是曲折蜿蜒。音乐music，走起！我看见一座座山，一座座。。。那就是青藏高原。。。好了，言归正传。<br>之前我的想法是通过子域名访问，即主域名(<a href="yoursite.com">yoursite.com</a>)和子域名(<a href="xxx.yoursite.com">blog.yoursite.com</a>)都解析到你的GitHub Pages<a href="yourname.github.io">yourname.github.io</a>。然后再自定义主页，比如<code>index.html</code>。我的博客页面是存放在<code>yourname.github.io</code>的<code>repo</code>中，自定义的主页放在一个叫做<code>Home-Page</code>的<code>repo</code>中。在<code>yourname.github.io</code>和<code>Home-Page</code>这两个仓库中分别在根目录放置了<code>CNAME</code>文件，文件的内容分别为<code>blog.yoursite.com</code>和<code>yoursite.com</code>。其实这样也是可以实现的，只是觉得太繁琐，索性就改成了现在的布局。</p></blockquote><h2 id="新建一个repository"><a href="#新建一个repository" class="headerlink" title="新建一个repository"></a>新建一个repository</h2><p>名字可以随意，我的是<code>blog</code><br>那么现在你有了一个空的repository然后本地clone下按照提示初始化一个master分支，并且开启<code>github pages</code>。<br><strong>注意，这里的repo的目录下是不存在<code>CNAME</code>文件的</strong></p><h2 id="修改hexo配置文件-config-yml"><a href="#修改hexo配置文件-config-yml" class="headerlink" title="修改hexo配置文件_config.yml"></a>修改hexo配置文件<code>_config.yml</code></h2><p>找到url下的root 修改成&#x2F;你起的名字&#x2F; (博主这里就是&#x2F;blog&#x2F;)url也要改！！！博主一开始没发现。。。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="symbol">url:</span> <span class="symbol">https:</span>/<span class="regexp">/yourname.github.io/blog</span></span><br><span class="line"><span class="symbol">root:</span> /blog/</span><br><span class="line"><span class="symbol">permalink:</span> <span class="symbol">:year/</span><span class="symbol">:month/</span><span class="symbol">:day/</span><span class="symbol">:title/</span></span><br><span class="line"><span class="symbol">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p>然后再找到<code>_config.yml</code>下的<code>deploy</code>，把repository改成你新的repository的clone地址</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> https:<span class="comment">//github.com/yourname/blog.git (改这里)</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><h2 id="重新部署你的博客"><a href="#重新部署你的博客" class="headerlink" title="重新部署你的博客"></a>重新部署你的博客</h2><p>在对应的文件下在<code>gitbash</code>上输入<code>hexo g</code>再输入<code>hexo d</code><br>这样你的博客就被部署到<a href="https://yourname.github.io/blog/">https://yourname.github.io/blog/</a>上了</p><h2 id="清空原来的repository"><a href="#清空原来的repository" class="headerlink" title="清空原来的repository"></a>清空原来的repository</h2><p>现在原来那个yourname.github.io的repository你就可以清空，然后留下一个index.html，把你自定义页面的代码复制到里面就好了，然后可以通过以下链接跳转到你的博客界面了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;blog/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="改主题里URL的ROOT"><a href="#改主题里URL的ROOT" class="headerlink" title="改主题里URL的ROOT"></a>改主题里URL的ROOT</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Subdirectory | 子目录</span><br><span class="line">## <span class="keyword">If</span> your sit<span class="string">e&#x27; url is &#x27;</span>http://yoursite.com/blog<span class="string">&#x27;, set root_url as &#x27;</span>/blog/<span class="string">&#x27;</span></span><br><span class="line"><span class="string">## 网站若存放在子目录，请按上面格式填写</span></span><br><span class="line"><span class="string">## https://hexo.io/docs/configuration.html#URL</span></span><br><span class="line"><span class="string">root_url: /blog/</span></span><br></pre></td></tr></table></figure><p>像本站用的XXX主题改了以后左边栏会出现问题，这时候需要到<code>left-col.ejs</code>改一下<br>我是这样解决的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;switch-part switch-part1&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;header-menu&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                       &lt;% for (var i in theme.menu)&#123; %&gt;</span><br><span class="line">                       <span class="comment">&lt;!-- 修改这里 --&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- url_for(theme.menu[i]) %&gt;&quot;</span>&gt;</span>&lt;%= i %&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                       &lt;%&#125;%&gt;</span><br><span class="line">                       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;header-nav&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;social&quot;</span>&gt;</span></span><br><span class="line">                           &lt;% for (var i in theme.subnav)&#123; %&gt;</span><br><span class="line">                               <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;fa &lt;%= i %&gt;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- url_for(theme.subnav[i]) %&gt;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&lt;%= i %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">                           &lt;%&#125;%&gt;</span><br><span class="line">                       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>这里附上一个不错的主页效果。<br><a href="https://github.com/jacklightChen/jacklightChen.github.io">https://github.com/jacklightChen/jacklightChen.github.io</a></li><li>以下附上我觉得不错的参考资料。</li></ul><p><a href="https://link.zhihu.com/?target=http://www.cnblogs.com/yuanzm/p/3945814.html">如何将你的github仓库部署到github pages</a>（repo里建gh-pages分支，上传hexo到blog的gh-pages里面）</p><p><a href="https://link.zhihu.com/?target=http://zipperary.com/2013/05/28/hexo-guide-2/">hexo系列教程：（二）搭建hexo博客</a></p><p><a href="https://link.zhihu.com/?target=http://blog.netpi.me/%25E5%25AE%259E%25E7%2594%25A8/hexo/">hexo + github + 多说 来搭建免费博客 &#x2F;&#x2F; Netpi 日志</a> （本地打不开解决方法）</p><p><a href="https://link.zhihu.com/?target=http://www.cnblogs.com/lonelybonze/p/4980651.html">使用HEXO搭建github个人网站</a> （本地发布、部署失败解决方法）</p><p><a href="https://link.zhihu.com/?target=http://www.jianshu.com/p/05289a4bc8b2">如何搭建一个独立博客——简明Github Pages与Hexo教程</a> （ssh key的设置）</p><p><a href="https://link.zhihu.com/?target=http://ibruce.info/2013/11/22/hexo-your-blog/">hexo你的博客Hexo</a></p><p><a href="https://link.zhihu.com/?target=http://lovenight.github.io/2015/11/10/Hexo-3-1-1-%25E9%259D%2599%25E6%2580%2581%25E5%258D%259A%25E5%25AE%25A2%25E6%2590%25AD%25E5%25BB%25BA%25E6%258C%2587%25E5%258D%2597/">3.1.1 静态博客搭建指南</a></p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加打赏功能</title>
      <link href="/blog//2016/01/08/hexo-blog-ad-reward-function.html"/>
      <url>/blog//2016/01/08/hexo-blog-ad-reward-function.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>当你的博客搭建好之后，你或许想要添加一些更有趣的功能，比如说打赏，虽然说现在是共享经济，但也有付费阅读的需求。况且读者是否打赏全凭个人心情决定…<span id="more"></span></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>当你的博客搭建好之后，你或许想要添加一些更有趣的功能，比如说打赏，虽然说现在是共享经济，但也有付费阅读的需求。况且读者是否打赏全凭个人心情决定，倘若你的文章勾勒出一点他&#x2F;她的共鸣和感慨，那恭喜你，你已经有拥戴者了。</p></blockquote><p>打赏的基本思路是将微信和支付宝的收款二维码放到每篇文章的最后，打赏的时候扫下二维码就可以了。</p><p><strong>以 yilia&#x2F;Yelee主题为例：</strong></p><p align="center">    <a><img src="http://upload-images.jianshu.io/upload_images/1819713-6f2e24bb73d3eec4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240", width=320px alt="打赏功能效果图"></a></p><h3 id="step-1：-编写打赏模块的代码"><a href="#step-1：-编写打赏模块的代码" class="headerlink" title="step 1： 编写打赏模块的代码"></a>step 1： 编写打赏模块的代码</h3><p><code>layout\_partial</code>下新建<code>donate.ejs</code>输入如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;! -- 添加捐赠图标 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> =<span class="string">&quot;post-donate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;donate_board&quot;</span> <span class="attr">class</span>=<span class="string">&quot;donate_bar center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;btn_donate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn_donate&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;打赏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;donate_txt&quot;</span>&gt;</span></span><br><span class="line">           ↑<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">           &lt;%=theme.donate_message%&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;donate_guide&quot;</span> <span class="attr">class</span>=<span class="string">&quot;donate_bar center hidden&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 方式一： </span></span><br><span class="line"><span class="comment">            &lt;img src=&quot;/img/Alipay.jpg&quot; alt=&quot;支付宝打赏&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;img src=&quot;/img/WeChatpay.jpg&quot; alt=&quot;微信打赏&quot;&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 方式二；</span></span><br><span class="line"><span class="comment">            step1：在_config.yml中添加配置</span></span><br><span class="line"><span class="comment">                Alipay: /img/Alipay.jpg</span></span><br><span class="line"><span class="comment">                WeChatpay: /img/WeChatpay.jpg</span></span><br><span class="line"><span class="comment">            step2：此处两张图片的路径分别设置为如下</span></span><br><span class="line"><span class="comment">                &lt;img src=&quot;&lt;%- theme.root_url %&gt;&lt;%=theme.Alipay%&gt;&quot;</span></span><br><span class="line"><span class="comment">                &lt;img src=&quot;&lt;%- theme.root_url %&gt;&lt;%=theme.WeChatpay%&gt;&quot;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 支付宝打赏图案 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%- theme.root_url %&gt;/img/Alipay.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;支付宝打赏&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 微信打赏图案 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%- theme.root_url %&gt;/img/WeChatpay.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;微信打赏&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn_donate&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#donate_board&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;hidden&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#donate_guide&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;hidden&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;! -- 添加捐赠图标 --&gt;</span><br></pre></td></tr></table></figure><h3 id="step-2：-设置打赏模块的样式"><a href="#step-2：-设置打赏模块的样式" class="headerlink" title="step 2： 设置打赏模块的样式"></a>step 2： 设置打赏模块的样式</h3><p><code>source\css\_partial</code>下新建<code>donate.styl</code>输入如下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.donate_bar</span> &#123;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">5%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">82px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">82px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: auto;</span><br><span class="line"><span class="attribute">margin-right</span>: auto;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://img.t.sinajs.cn/t5/style/images/apps_PRF/e_media/btn_reward.gif</span>)no-repeat;</span><br><span class="line">&lt;!-- 因为本 hexo 生成的博客所用的 theme 的 <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> 带动画效果，为了在让打赏按钮显示效果正常 而 添加了以下几行 css，嵌入其它博客时不一定要它们。本段注释请在添加时删除--&gt;</span><br><span class="line">-webkit-<span class="attribute">transition</span>: background <span class="number">0s</span>;</span><br><span class="line">-moz-<span class="attribute">transition</span>: background <span class="number">0s</span>;</span><br><span class="line">-o-<span class="attribute">transition</span>: background <span class="number">0s</span>;</span><br><span class="line">-ms-<span class="attribute">transition</span>: background <span class="number">0s</span>;</span><br><span class="line"><span class="attribute">transition</span>: background <span class="number">0s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">82px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-class">.donate_txt</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#9d9d9d</span>;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">2</span> <span class="string">&quot;Microsoft Yahei&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.donate_bar</span><span class="selector-class">.hidden</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-donate</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">420px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后，记得在<code>source\css\style.styl</code>中添加<code>@import &#39;_partial/donate&#39;</code></strong></p><h3 id="step-3：-讲打赏模块整合到文章中"><a href="#step-3：-讲打赏模块整合到文章中" class="headerlink" title="step 3： 讲打赏模块整合到文章中"></a>step 3： 讲打赏模块整合到文章中</h3><p>在<code>layout\_partial\article.ejs</code>中的<code>&lt;article&gt; &lt;/article&gt;</code>标签内添加如下内容：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span> <span class="keyword">if</span> <span class="comment">(!index &amp;&amp; theme.donate)</span>&#123; <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span>- partial<span class="comment">(&#x27;donate&#x27;)</span> <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> &#125; <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>如果你只想在所有post的文章页面添加打赏功能，可以参照以下：</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 添加打赏功能 只在文章详情中显示--&gt;</span><br><span class="line">&lt;<span class="meta">%</span> <span class="keyword">if</span> <span class="comment">(page.prev || page.next)</span>&#123; <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> <span class="keyword">if</span> <span class="comment">(!index &amp;&amp; theme.donate)</span>&#123; <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span>- partial<span class="comment">(&#x27;donate&#x27;)</span> <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> &#125; <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> &#125;<span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>如果你想在指定页面添加打赏功能，需在你的主题文件夹下的<code>layout\_partial\article.ejs</code>路径中，更改<code>article.ejs</code>中的内容。例如：只有页面的属性中添加了<code>donate: true</code>属性后，才显示打赏，则需在你的文章的头部添加上<code>donate: true</code>字段，<code>article.ejs</code>中需改为如下所示：</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 添加打赏功能 --&gt;</span><br><span class="line">&lt;<span class="meta">%</span> <span class="keyword">if</span> <span class="comment">(page.donate)</span>&#123; <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> <span class="keyword">if</span> <span class="comment">(!index &amp;&amp; theme.donate)</span>&#123; <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span>- partial<span class="comment">(&#x27;donate&#x27;)</span> <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> &#125; <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> &#125;<span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="step-4：-编写配置文件"><a href="#step-4：-编写配置文件" class="headerlink" title="step 4： 编写配置文件"></a>step 4： 编写配置文件</h3><p>我们可以在主题的<code>_config.yml</code>文件中关闭和打开打赏功能，还可以自定义设置打赏文案。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否开启打赏功能</span></span><br><span class="line"><span class="attr">donate:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#打赏文案</span></span><br><span class="line"><span class="attr">donate_message:</span> <span class="string">欣赏此文？求鼓励，求支持！</span></span><br></pre></td></tr></table></figure><p>大功告成，这样一个简单的打赏功能就实现了！<br>当然，你如果觉得麻烦，但是又想实现打赏功能，那么可以尝试下*<a href="http://www.dashangcloud.com/">云打赏</a>*，据说一行代码集成打赏功能。</p><h2 id="使用iframe嵌入打赏"><a href="#使用iframe嵌入打赏" class="headerlink" title="使用iframe嵌入打赏"></a>使用iframe嵌入打赏</h2><p>如果想要更加方便快捷的添加打赏功能，可以使用ifram的方式直接嵌入到你的文章中。<br>示例如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;https://yojoy.top/donate-page/sample1/index.html&quot;</span> <span class="attribute">style</span>=<span class="string">&quot;overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;&quot;</span>  <span class="attribute">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attribute">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attribute">allowtransparency</span>=<span class="string">&quot;true&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>查看效果：</p><iframe src="https://yojoy.top/donate-page/sample1/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no" allowtransparency="true"></iframe>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo百度主动提交链接</title>
      <link href="/blog//2016/01/05/hexo-baidu-actively-submit-links.html"/>
      <url>/blog//2016/01/05/hexo-baidu-actively-submit-links.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>某些主机，比如Github，禁止百度爬虫访问博客，导致博客无法被百度收录。多亏百度提供了主动提交的接口，这才有了个补救的方法。除此之外…<span id="more"></span></li></ul><blockquote><p>先学习百度站长平台页面抓取栏的推送说明</p></blockquote><p><strong>以下两种方式都可以推送，可以使用其中一种，也可以两种都使用</strong></p><h2 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h2><p>一般在目录<code>blog\themes\hiker\layout\_partial\head.ejs</code>中加入JS，这样全站都有了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> bp = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> curProtocol = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span>.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (curProtocol === <span class="string">&#x27;https&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        bp.<span class="property">src</span> = <span class="string">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;        </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        bp.<span class="property">src</span> = <span class="string">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    s.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(bp, s);</span></span><br><span class="line"><span class="language-javascript">&#125;)();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h2><p>感谢作者：<a href="https://github.com/huiwang/hexo-baidu-url-submit">https://github.com/huiwang/hexo-baidu-url-submit</a></p><blockquote><p>作用：某些主机，比如Github，禁止百度爬虫访问博客，导致博客无法被百度收录。多亏百度提供了主动提交的接口，这才有了个补救的方法。除此之外， 使用主动推送还会达到如下功效：</p></blockquote><ul><li>及时发现：可以缩短百度爬虫发现您站点新链接的时间，使新发布的页面可以在第一时间被百度收录</li><li>保护原创：对于网站的最新原创内容，使用主动推送功能可以快速通知到百度，使内容可以在转发之前被百度发现</li></ul><p>效果图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/1819713-91666b2d067574ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><h3 id="安装hexo-baidu-url-submit插件"><a href="#安装hexo-baidu-url-submit插件" class="headerlink" title="安装hexo-baidu-url-submit插件"></a>安装hexo-baidu-url-submit插件</h3><p>首先，在Hexo根目录下，安装本插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p><strong>请注意， 本插件的配置文件中包含秘钥， 请把您的Hexo博客源文件托管到私有仓库里。</strong></p><h3 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h3><p>同样在根目录下，把以下内容配置到<code>_config.yml</code>文件中:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">baidu_url_submit:</span></span><br><span class="line"><span class="symbol">  count:</span> <span class="number">3</span> <span class="meta">## 比如3，代表提交最新的三个链接</span></span><br><span class="line"><span class="symbol">  host:</span> yojoy.top <span class="meta">## 在百度站长平台中注册的域名</span></span><br><span class="line"><span class="symbol">  token:</span> your_token <span class="meta">## 请注意这是您的秘钥， 请不要发布在公众仓库里!</span></span><br><span class="line"><span class="symbol">  path:</span> baidu_urls.txt <span class="meta">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><h3 id="检查url"><a href="#检查url" class="headerlink" title="检查url"></a>检查url</h3><p>其次，记得查看<code>_config.yml</code>文件中url的值， 必须包含是百度站长平台注册的域名（一般有www）， 比如:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="symbol">url:</span> <span class="symbol">http:</span>//yojoy.top</span><br><span class="line"><span class="symbol">root:</span> /</span><br><span class="line"><span class="symbol">permalink:</span> <span class="symbol">:year/</span><span class="symbol">:month/</span><span class="symbol">:day/</span><span class="symbol">:title/</span></span><br></pre></td></tr></table></figure><p>最后，加入新的deployer:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">type: git</span></span><br><span class="line">  <span class="attribute">repo</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">coding</span><span class="punctuation">:</span> <span class="string">https://用户名:密码@git.coding.net/Yajon/blog.git,master</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">type: baidu_url_submitter</span></span><br></pre></td></tr></table></figure><p>执行hexo deploy的时候，新的链接就会被推送了。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>推送功能的实现，分为两部分：</p><p>新链接的产生，<code>hexo generate</code>会产生一个文本文件，里面包含最新的链接<br>新链接的提交，<code>hexo deploy</code>会从上述文件中读取链接，提交至百度搜索引擎。<br>链接参考：<br><a href="http://yojoy.top/">http://yojoy.top/</a></p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub上的iOS开源项目及工具插件</title>
      <link href="/blog//2016/01/04/ios-open-source-project-and-tol-plug-in-on-github.html"/>
      <url>/blog//2016/01/04/ios-open-source-project-and-tol-plug-in-on-github.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>本文主要分享GitHub上的一些开源项目，包括常用的辅助软件、工具、插件…<span id="more"></span></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE">开源项目</a></li><li><a href="#%E8%BE%85%E5%8A%A9%E8%BD%AF%E4%BB%B6">辅助软件</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6">第三方插件</a></li></ul><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a><a name='开源项目'>开源项目</a></h2><p><strong>1. Coding iOS 客户端</strong><br>Coding官方客户端. 笔者强烈推荐的值得学习的完整APP.<br>GitHub - Coding&#x2F;Coding-iOS: Coding iOS 客户端源代码<br><a href="https://github.com/Coding/Coding-iOS">https://github.com/Coding/Coding-iOS</a><br><strong>2. OSCHINA 的 iPhone 客户端</strong><br>开源中国的iPhone客户端源码<br>GitHub - oschina&#x2F;iphone-app<br><a href="https://git.oschina.net/oschina/iphone-app">https://git.oschina.net/oschina/iphone-app</a><br><strong>3. Git@OSC</strong><br>Git@OSC iPhone 客户端，方便用户查看Git@OSC的项目以及简单的操作issue等<br>GitHub - oschina &#x2F; git-osc-iphone<br><a href="https://github.com/dreamsxin/git-osc-iphone">https://github.com/dreamsxin/git-osc-iphone</a><br><strong>4. Firefox for iOS</strong><br>GitHub - mozilla&#x2F;firefox-ios: Firefox for iOS<br><a href="https://github.com/mozilla/firefox-ios">https://github.com/mozilla/firefox-ios</a><br><strong>5. zulip-ios</strong><br>Dropbox收购公司内部社交服务商Zulip,然后全部开源，这是iOS App<br>GitHub - zulip&#x2F;zulip-ios: Zulip iOS app<br><a href="https://github.com/zulip/zulip-ios">https://github.com/zulip/zulip-ios</a><br><strong>6. iOSSF</strong><br>SegmentFault官方App<br>GitHub - gaosboy&#x2F;iOSSF: SegmentFault官方App<br><a href="https://github.com/gaosboy/iOSSF">https://github.com/gaosboy/iOSSF</a><br><strong>7. iReddit</strong><br>Reddit iPhone客户端<br>GitHub - reddit&#x2F;iReddit: The iReddit iPhone app<br><a href="https://github.com/reddit/iReddit">https://github.com/reddit/iReddit</a><br><strong>8. Monkey</strong><br>GitHub第三方iOS客户端<br>GitHub - coderyi&#x2F;Monkey: Monkey is a GitHub third party client for iOS,to show the rank of coders and repositories.<br><a href="https://github.com/coderyi/Monkey">https://github.com/coderyi/Monkey</a><br><strong>9. Watch</strong><br>Dribbble第三方客户端<br>GitHub - tuesda&#x2F;Watch: A project which demonstrate how to develop a custom client on android for dribbble.com<br><a href="https://github.com/tuesda/Watch">https://github.com/tuesda/Watch</a><br><strong>10. Voice2Note</strong><br>懒人笔记iOS客户端<br>GitHub - liaojinxing&#x2F;Voice2Note: 懒人笔记iOS客户端<br><a href="https://github.com/liaojinxing/Voice2Note">https://github.com/liaojinxing/Voice2Note</a><br><strong>11. RSSRead</strong><br>“已阅”（iOS上开源RSS新闻阅读器）<br>GitHub - ming1016&#x2F;RSSRead: “已阅”（iOS上开源RSS新闻阅读器），有兴趣？那就Pull Requests吧<br><a href="https://github.com/ming1016/RSSRead">https://github.com/ming1016/RSSRead</a><br><strong>12. BeeFancy</strong><br>BeeFancy仿Fancy官方APP的WIREFRAME，基于BeeFramework<br>GitHub - BeeFramework&#x2F;BeeFancy: 仿Fancy官方APP的WIREFRAME，基于BeeFramework<br><a href="https://github.com/BeeFramework/BeeFancy">https://github.com/BeeFramework/BeeFancy</a><br><strong>13. SXNews</strong><br>模仿网易新闻做的精仿网易新闻<br>GitHub - dsxNiubility&#x2F;SXNews: High imitation Neteasy News. (include list,detail,photoset,weather,feedback)<br><a href="https://github.com/dsxNiubility/SXNews">https://github.com/dsxNiubility/SXNews</a><br><strong>14. Doppio</strong><br>寻找最近的星巴克<br>GitHub - chroman&#x2F;Doppio: An open source iOS app to find the nearest Starbucks store using NSURLSession, AFNetworking 2.0, Mantle and Starbucks private API.<br><a href="https://github.com/chroman/Doppio">https://github.com/chroman/Doppio</a><br><strong>15. Anypic</strong><br>类似于Instagram的一款App<br>GitHub - ParsePlatform&#x2F;Anypic: An open source mobile and web app that lets users share photos similar to Instagram<br><a href="https://github.com/ParsePlatform/Anypic">https://github.com/ParsePlatform/Anypic</a><br><strong>16. 豆瓣相册</strong><br>Slowslab iOS应用 豆瓣相册 精选集 开源项目<br>GitHub - TonnyTao&#x2F;DoubanAlbum: Slowslab iOS应用 豆瓣相册 精选集 开源项目，仅供学习参考<br><a href="https://github.com/TonnyTao/DoubanAlbum">https://github.com/TonnyTao/DoubanAlbum</a><br><strong>17. ChatSecure-iOS</strong><br>Objective-C写的XMPP聊天应用<br>GitHub - ChatSecure&#x2F;ChatSecure-iOS: ChatSecure is a free and open source encrypted chat client for iPhone and Android that supports OTR encryption over XMPP.<br><a href="https://github.com/ChatSecure/ChatSecure-iOS">https://github.com/ChatSecure/ChatSecure-iOS</a><br><strong>18. NotificationChat</strong><br>Objective-C写的完整的聊天应用<br>GitHub - relatedcode&#x2F;EncryptedChat: This is a full native iPhone app to create realtime, text based group or private chat with Parse and Firebase.<br><a href="https://github.com/relatedcode/EncryptedChat">https://github.com/relatedcode/EncryptedChat</a><br><strong>19. FakeZhihuDaily</strong><br>仿知乎日报iOS客户端<br>GitHub - gnou&#x2F;FakeZhihuDaily: 仿知乎日报iOS客户端<br><a href="https://github.com/gnou/FakeZhihuDaily">https://github.com/gnou/FakeZhihuDaily</a><br><strong>20. ruby-china-for-ios</strong><br>RubyChina官方客户端<br>GitHub - ruby-china&#x2F;ruby-china-for-ios: Ruby China client for iOS<br><a href="https://github.com/ruby-china/ruby-china-for-ios">https://github.com/ruby-china/ruby-china-for-ios</a><br><strong>21. Meizi</strong><br>豆瓣妹子图iOS客户端<br>GitHub - Sunnyyoung&#x2F;Meizi: 豆瓣妹子图iOS客户端<br><a href="https://github.com/Sunnyyoung/Meizi">https://github.com/Sunnyyoung/Meizi</a><br><strong>22. PlainReader</strong><br>一款 iOS(iPhone + iPad) 新闻类客户端，内容抓取自<a href="http://cnbeta.com/">http://cnBeta.com</a><br>PlainReader&#x2F;PlainReader at master · guojiubo&#x2F;PlainReader · GitHub<br>GitHub - guojiubo&#x2F;PlainReader：一款 iOS(iPhone + iPad) 新闻类客户端<br><a href="https://github.com/guojiubo/PlainReader">https://github.com/guojiubo/PlainReader</a><br><strong>23. iOS-2048</strong><br>用Objective-C实现的2048游戏<br>GitHub - austinzheng&#x2F;iOS-2048: iOS drop-in library presenting a 2048-style game<br><a href="https://github.com/austinzheng/iOS-2048">https://github.com/austinzheng/iOS-2048</a><br><strong>24. ECMobile_iOS</strong><br>基于ECShop的手机商城客户端<br>GitHub - GeekZooStudio&#x2F;ECMobile_iOS: 基于ECShop的手机商城客户端<br><a href="https://github.com/GeekZooStudio/ECMobile_iOS">https://github.com/GeekZooStudio/ECMobile_iOS</a><br><strong>25. wikipedia-ios</strong><br>维基百科官方App, 已上架<br>GitHub - wikimedia&#x2F;wikipedia-ios: The official Wikipedia iOS app.<br><a href="https://github.com/wikimedia/wikipedia-ios">https://github.com/wikimedia/wikipedia-ios</a><br><strong>26. Sol</strong><br>漂亮的扁平风格的天气App<br>GitHub - comyarzaheri&#x2F;Sol: Sol° beautifully displays weather information so you can plan your day accordingly. Check the weather in your current location or any city around the world. Implemented in Objective-C.<br><a href="https://github.com/comyarzaheri/Sol">https://github.com/comyarzaheri/Sol</a><br><strong>27. v2ex</strong><br>v2ex第三方iOS客户端<br>GitHub - v2ex&#x2F;v2ex-iOS at master · singro&#x2F;v2ex · GitHub<br><a href="https://github.com/v2ex/v2ex-iOS">https://github.com/v2ex/v2ex-iOS</a><br><strong>28. MyOne-iOS</strong><br>用OC写的《一个》 iOS 客户端<br>GitHub - meilbn&#x2F;MyOne-iOS: 我的《一个》 iOS 客户端（OC）<br><a href="https://github.com/meilbn/MyOne-iOS">https://github.com/meilbn/MyOne-iOS</a><br><strong>29. WNXHuntForCity</strong><br>高仿城觅2.0 by-objective-c<br>GitHub - ZhongTaoTian&#x2F;WNXHuntForCity: 高仿城觅by-objective-c<br><a href="https://github.com/ZhongTaoTian/WNXHuntForCity">https://github.com/ZhongTaoTian/WNXHuntForCity</a><br><strong>30. viewfinder</strong><br>移动支付公司 Square 将去年收购的照片应用 Viewfinder 开源了，包含服务端、iOS 和 Android 应用代码<br>GitHub - viewfinderco&#x2F;viewfinder: Viewfinder client and server code<br><a href="https://github.com/viewfinderco/viewfinder">https://github.com/viewfinderco/viewfinder</a><br><strong>31. breadwallet</strong><br>breadwallet iOS bitcoin wallet<br>GitHub - voisine&#x2F;breadwallet: breadwallet<br><a href="https://github.com/voisine/breadwallet">https://github.com/voisine/breadwallet</a><br><strong>32. novel-design</strong><br>品趣iOS客户端<br>GitHub - ltebean&#x2F;novel-design: PinQu ios client<br><a href="https://github.com/ltebean/novel-design">https://github.com/ltebean/novel-design</a><br><strong>33. WWDC-2014</strong><br>WWDC客户端<br>GitHub - indragiek&#x2F;WWDC-2014: Scholarship submission for WWDC 2014<br><a href="https://github.com/indragiek/WWDC-2014">https://github.com/indragiek/WWDC-2014</a><br><strong>34. GreatReader</strong><br>GreatReader PDF阅读客户端<br>GitHub - semweb&#x2F;GreatReader: A “great” PDF reader for iOS. Available on the App Store.<br><a href="https://github.com/semweb/GreatReader">https://github.com/semweb/GreatReader</a><br><strong>35. Tropos</strong><br>天气客户端<br>GitHub - thoughtbot&#x2F;Tropos: Weather and Forecasts for Humans<br><a href="https://github.com/thoughtbot/Tropos">https://github.com/thoughtbot/Tropos</a><br><strong>36. manong-reading</strong><br>《猿已阅》码农周刊iOS客户端<br>GitHub - icepy&#x2F;manong-reading: 《猿已阅》码农周刊iOS客户端<br><a href="https://github.com/icepy/manong-reading">https://github.com/icepy/manong-reading</a><br><strong>37. YoCelsius</strong><br>一款天气预报的应用<br>GitHub - YouXianMing&#x2F;YoCelsius: 一款天气预报的应用（已在AppStore上线）<br><a href="https://github.com/YouXianMing/YoCelsius">https://github.com/YouXianMing/YoCelsius</a><br><strong>38. 密记iOS版</strong><br>本应用主要功能是简单笔记<br>GitHub - iHTCboy&#x2F;SecurityNote: 密记iOS版，第一个开发的完整iOS应用，本应用主要功能是简单笔记。The application of the main function is a simple notes.<br><a href="https://github.com/iHTCboy/SecurityNote">https://github.com/iHTCboy/SecurityNote</a><br><strong>39. phphub-ios</strong><br>PHPHub for iOS is the universal iPhone and iPad application for PHPHub PHPHub - PHP &amp; Laravel的中文社区<br>GitHub - Aufree&#x2F;phphub-ios: PHPHub for iOS is the universal iPhone and iPad application for PHPHub<br><a href="https://github.com/Aufree/phphub-ios">https://github.com/Aufree/phphub-ios</a><br><strong>40. Brushes</strong><br>绘图应用. Painting app for the iPhone and iPad.<br>GitHub - sprang&#x2F;Brushes: Painting app for the iPhone and iPad.<br><a href="https://github.com/sprang/Brushes">https://github.com/sprang/Brushes</a><br><strong>41. Inkpad</strong><br>绘图应用. Inkpad is a vector illustration app designed from scratch for the iPad.<br>GitHub - sprang&#x2F;Inkpad: Vector illustration app for the iPad.<br><a href="https://github.com/sprang/Inkpad">https://github.com/sprang/Inkpad</a><br><strong>42. wh-app-ios</strong><br>美国白宫（WhiteHouse）的官方app.<br>GitHub - WhiteHouse&#x2F;wh-app-ios<br><a href="https://github.com/WhiteHouse/wh-app-ios">https://github.com/WhiteHouse/wh-app-ios</a><br><strong>43. cheddar-ios</strong><br>一款日程管理软件.<br>GitHub - nothingmagical&#x2F;cheddar-ios: Cheddar for iOS<br><a href="https://github.com/nothingmagical/cheddar-ios">https://github.com/nothingmagical/cheddar-ios</a><br><strong>44. newsyc</strong><br>Hacker News的iPhone客户端<br>GitHub - Xuzz&#x2F;newsyc: An iPhone Hacker News client.<br><a href="https://github.com/Xuzz/newsyc">https://github.com/Xuzz/newsyc</a><br><strong>45. WordPress for iOS</strong><br>WordPress iOS官方客户端. 笔者强烈推荐的开源项目.<br>GitHub - wordpress-mobile&#x2F;WordPress-iOS: WordPress for iOS<br><a href="https://github.com/wordpress-mobile/WordPress-iOS">https://github.com/wordpress-mobile/WordPress-iOS</a><br><strong>46. WikiHow</strong><br>Wikihow–WikiHow的官方app.<br>GitHub - tderouin&#x2F;wikiHow-iPhone-Application: The code for the wikihow’s iphone app<br><a href="https://github.com/tderouin/wikiHow-iPhone-Application">https://github.com/tderouin/wikiHow-iPhone-Application</a><br><strong>47. Dollar Bets</strong><br>记录你和朋友打赌的内容.<br>GitHub - Rich86man&#x2F;Dollar-Bets: An iPhone app to keep track of your Dollar Bets<br><a href="https://github.com/Rich86man/Dollar-Bets">https://github.com/Rich86man/Dollar-Bets</a><br><strong>48. Dozuki</strong><br>iFixit网站的互动修理手册<br>GitHub - iFixit&#x2F;iFixit-iOS: iFixit’s iOS app for iPad, iPhone, and iPod touch<br><a href="https://github.com/iFixit/iFixit-iOS">https://github.com/iFixit/iFixit-iOS</a><br><strong>49. Last.fm</strong><br>Last.fm 的客户端，国外很火的私人电台.<br>GitHub - lastfm&#x2F;lastfm-iphone: The official Last.fm iPhone application<br><a href="https://github.com/lastfm/lastfm-iphone">https://github.com/lastfm/lastfm-iphone</a><br><strong>50. ioctocat</strong><br>GitHub第三方客户端.<br>GitHub - dennisreimann&#x2F;ioctocat: iOctocat v1<br><a href="https://github.com/dennisreimann/ioctocat">https://github.com/dennisreimann/ioctocat</a><br><strong>51. iTunesPicker</strong><br>类似AppStore的一个应用<br>GitHub - appcornerit&#x2F;iTunesPicker: Discover, search and compare world rankings for apps, ibooks, movies, music videos and music from iTunes (and<br>AppStore) in any available country.<br><a href="https://github.com/appcornerit/iTunesPicker">https://github.com/appcornerit/iTunesPicker</a><br><strong>52. TeamTalk</strong><br>蘑菇街TeamTalk. 开源IM. 笔者强烈推荐.<br>GitHub - mogujie&#x2F;TeamTalk: TeamTalk is a solution for enterprise IM<br><a href="https://github.com/mogujie/TeamTalk">https://github.com/mogujie/TeamTalk</a><br><strong>53. shadowsocks-iOS</strong><br>翻墙工具Shadowsocks. Github目前代码已经被移除, 不过2.6.3的还是保留着.<br>GitHub - shadowsocks&#x2F;shadowsocks-iOS at 2.6.3: Removed according to regulations.<br><strong>54. MessageDisplayKit</strong><br>一个类似微信App的IM应用，拥有发送文字、图片、语音、视频、地理位置消息，管理本地通信录、分享朋友 圈、漂流交友、摇一摇和更多有趣的功能。笔者推荐的学习IM的好东西.<br>GitHub - xhzengAIB&#x2F;MessageDisplayKit: An IM App like WeChat App has to send text, pictures, audio, video, location messaging, managing local address book, share a circle of friends, drifting friends, shake a fun and more interesting features.<br><a href="https://github.com/xhzengAIB/MessageDisplayKit">https://github.com/xhzengAIB/MessageDisplayKit</a><br><strong>55. NewsBlur</strong><br>个人新闻阅读器.<br>NewsBlur&#x2F;clients&#x2F;ios at master · samuelclay&#x2F;NewsBlur · GitHub<br><a href="https://github.com/samuelclay/NewsBlur">https://github.com/samuelclay/NewsBlur</a><br><strong>56. VLC for iOS</strong><br>VLC媒体播放器. 官方页面提供源代码下载.<br><a href="http://www.videolan.org/vlc/download-ios.html">http://www.videolan.org/vlc/download-ios.html</a><br><strong>57. MobileProject</strong><br>一个基于MVC的项目框架，并集成一些常用的功能(不断更新中)<br><a href="https://github.com/wujunyang/MobileProject">https://github.com/wujunyang/MobileProject</a><br><strong>58. meituan</strong><br>高仿美团iOS版，版本号5.7<br><a href="https://github.com/lookingstars/meituan">https://github.com/lookingstars/meituan</a><br><strong>59. SXNews</strong><br>模仿网易新闻做的新闻软件<br><a href="https://github.com/dsxNiubility/SXNews">https://github.com/dsxNiubility/SXNews</a><br><strong>60. GSD_WeiXin</strong><br>一个star数超过2000的高仿版微信<br><a href="https://github.com/gsdios/GSD_WeiXin">https://github.com/gsdios/GSD_WeiXin</a><br><strong>61. chuanke</strong><br>高仿百度传课iOS版，版本号2.4.1.2。<br>地址：<a href="https://github.com/lookingstars/chuanke">https://github.com/lookingstars/chuanke</a><br><strong>62. YiYuanYunGou</strong><br>高仿一元云购IOS应用（高仿自一元云购安卓客户端）<br><a href="https://github.com/JxbSir/YiYuanYunGou">https://github.com/JxbSir/YiYuanYunGou</a><br><strong>63. WordPress-iOS</strong><br>WordPress for iOS - Official repository<br>wordpress源代码<br><a href="https://github.com/wordpress-mobile/WordPress-iOS">https://github.com/wordpress-mobile/WordPress-iOS</a><br><strong>64. v2ex</strong><br>An iOS client for v2ex.com<br>v2ex源代码（文章类型，若报SVProgressHUD错，则把Podfile中的SVProgressHUD移除）<br><a href="https://github.com/singro/v2ex">https://github.com/singro/v2ex</a><br><strong>65. phphub-ios</strong><br>PHPHub for iOS is the universal iPhone and iPad application for PHPHub<br>PHPHub客户端(IOS8.0以上)<br><a href="https://github.com/Aufree/phphub-ios">https://github.com/Aufree/phphub-ios</a><br><strong>66. Coding-iOS</strong><br>Coding.net客户端<br><a href="https://coding.net/u/coding/p/Coding-iOS/git">https://coding.net/u/coding/p/Coding-iOS/git</a><br><strong>67. LazyLoad</strong><br>一个优化UITableView中Cell加载图片的实例<br><a href="https://github.com/allenhsu/UIScrollView-Samples/tree/master/LazyLoad">https://github.com/allenhsu/UIScrollView-Samples/tree/master/LazyLoad</a><br><strong>68. open-source-ios-apps</strong><br>开源的IOS代码集合<br><a href="https://github.com/dkhamsing/open-source-ios-apps">https://github.com/dkhamsing/open-source-ios-apps</a></p><h2 id="辅助软件"><a href="#辅助软件" class="headerlink" title="辅助软件"></a><a name='辅助软件'>辅助软件</a></h2><p>1、XCODE文档注解插件VVDocumenter<br>地址：<a href="https://github.com/onevcat/VVDocumenter-Xcode">https://github.com/onevcat/VVDocumenter-Xcode</a><br>2、将JSON格式化输出为模型的属性<br>地址：<a href="https://github.com/EnjoySR/ESJsonFormat-Xcode">https://github.com/EnjoySR/ESJsonFormat-Xcode</a><br>3、图片提示插件<br>地址：<a href="https://github.com/ksuther/KSImageNamed-Xcode">https://github.com/ksuther/KSImageNamed-Xcode</a><br>4、图片转换插件<br>地址：<a href="https://github.com/rickytan/RTImageAssets">https://github.com/rickytan/RTImageAssets</a><br>5、测试模拟苹果通知<br>地址：<a href="https://github.com/KnuffApp/Knuff">https://github.com/KnuffApp/Knuff</a><br>6、HOStringSense可以在弹出框写NSString，所见及所得<br>地址：<a href="https://github.com/holtwick/HOStringSense-for-Xcode">https://github.com/holtwick/HOStringSense-for-Xcode</a><br>7、cocoapods-xcode-plugin  pod相关的操作可以在xcode菜单进行<br>地址：<a href="https://github.com/kattrali/cocoapods-xcode-plugin">https://github.com/kattrali/cocoapods-xcode-plugin</a><br>8、switch枚举的时候会自动生成代码<br>地址：<a href="https://github.com/stefanceriu/SCXcodeSwitchExpander">https://github.com/stefanceriu/SCXcodeSwitchExpander</a><br>9、git中关于各个语言的gitignore<br>地址：<a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a><br>10、FLEX（Flipboard Explorer）是Flipboard官方发布的一组专门用于iOS开发的应用内调试工具<br>地址：<a href="https://github.com/Flipboard/FLEX">https://github.com/Flipboard/FLEX</a><br>11、ponyDebugger是一个远程调试工具包，通过使用Chrome开发者工具来调试iOS应用的网络流量和数据存储<br>地址：<a href="https://github.com/square/PonyDebugger">https://github.com/square/PonyDebugger</a><br>12、OC编码风格规范<br>地址：<a href="https://github.com/NYTimes/objective-c-style-guide">https://github.com/NYTimes/objective-c-style-guide</a><br>13、FBMemoryProfiler：Facebook出品的一个实时监测内存使用的库。相比于Xcode自带的Instruments<br>地址：<a href="https://github.com/facebook/FBMemoryProfiler">https://github.com/facebook/FBMemoryProfiler</a><br>14、app卡顿问题检测–KMCGeigerCounter(实例可以网上搜索)<br>地址：<a href="https://github.com/kconner/KMCGeigerCounter/">https://github.com/kconner/KMCGeigerCounter/</a><br>15、生成类的关系图KSHObjcUML<br>地址：<a href="https://github.com/kimsungwhee/KSHObjcUML">https://github.com/kimsungwhee/KSHObjcUML</a><br>16、realm-cocoa实体映射数据库，有自个的数据库（可以替换SQLITE，速度比较快）<br>地址：<a href="https://github.com/realm/realm-cocoa">https://github.com/realm/realm-cocoa</a><br>17、创建文档API，可以快速让APP先调用，并行开发<br>地址：<a href="https://apiary.io/">https://apiary.io/</a><br>18、直接查看虚拟器上的沙盒路径simpholders<br>地址：<a href="http://www.maczapp.com/simpholders">http://www.maczapp.com/simpholders</a><br>19、FastStub实现了类似的功能，能自动解析出某个类头文件，父类，所有protocol里面还没有被实现的方法(ctrl+cmd+k)<br>地址：<a href="https://github.com/music4kid/FastStub-Xcode">https://github.com/music4kid/FastStub-Xcode</a></p><h2 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a><a name='第三方插件'>第三方插件</a></h2><p>1、基于响应式编程思想的oc<br>地址：<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">https://github.com/ReactiveCocoa/ReactiveCocoa</a><br>2、hud提示框<br>地址：<a href="https://github.com/jdg/MBProgressHUD">https://github.com/jdg/MBProgressHUD</a><br>3、XML&#x2F;HTML解析<br>地址：<a href="https://github.com/topfunky/hpple">https://github.com/topfunky/hpple</a><br>4、有文字输入时，能根据键盘是否弹出来调整自身显示内容的位置<br>地址：<a href="https://github.com/michaeltyson/TPKeyboardAvoiding">https://github.com/michaeltyson/TPKeyboardAvoiding</a><br>5、状态栏提示框<br>地址：<a href="https://github.com/jaydee3/JDStatusBarNotification">https://github.com/jaydee3/JDStatusBarNotification</a><br>6、block工具包。将很多需要用delegate实现的方法整合成了block的形式<br>地址：<a href="https://github.com/zwaldowski/BlocksKit">https://github.com/zwaldowski/BlocksKit</a><br>7、图片加载<br>地址：<a href="https://github.com/rs/SDWebImage">https://github.com/rs/SDWebImage</a><br>8、正则表达式<br>地址：<a href="https://github.com/wezm/RegexKitLite">https://github.com/wezm/RegexKitLite</a><br>9、Masonry代码布局<br>地址：<a href="https://github.com/SnapKit/Masonry">https://github.com/SnapKit/Masonry</a><br>10、弹出窗<br>地址：<a href="https://github.com/sberrevoets/SDCAlertView">https://github.com/sberrevoets/SDCAlertView</a><br>11、Button的样式<br>地址：<a href="https://github.com/mattlawer/BButton">https://github.com/mattlawer/BButton</a><br>12、验证网络连接状态<br>地址：<a href="https://github.com/tonymillion/Reachability">https://github.com/tonymillion/Reachability</a><br>13、自动计算表格行高<br>地址：<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell">https://github.com/forkingdog/UITableView-FDTemplateLayoutCell</a><br>14、关键帧基础动画框架,如动画效果的启动页<br>地址：<a href="https://github.com/IFTTT/JazzHands">https://github.com/IFTTT/JazzHands</a><br>15、iOS快速简单集成国内三大平台分享<br>地址：<a href="https://github.com/xumeng/XMShareModule">https://github.com/xumeng/XMShareModule</a><br>16、五项能力值展示的五边形<br>地址：<a href="https://github.com/dsxNiubility/SXFiveScoreShow">https://github.com/dsxNiubility/SXFiveScoreShow</a><br>17、自动识别网址号码邮箱和表情的label<br>地址：<a href="https://github.com/molon/MLEmojiLabel">https://github.com/molon/MLEmojiLabel</a><br>18、IM对话功能的封装<br>地址：<a href="https://github.com/ZhipingYang/UUChatTableView">https://github.com/ZhipingYang/UUChatTableView</a><br>19、字典转模型框架<br>地址：<a href="https://github.com/CoderMJLee/MJExtension">https://github.com/CoderMJLee/MJExtension</a><br>20、下拉上拉刷数据<br>地址：<a href="https://github.com/CoderMJLee/MJRefresh">https://github.com/CoderMJLee/MJRefresh</a><br>21、表格行左右划动菜单<br>地址：<a href="https://github.com/MortimerGoro/MGSwipeTableCell">https://github.com/MortimerGoro/MGSwipeTableCell</a><br>22、图文混搭<br>地址:<a href="https://github.com/zhouande/TLAttributedLabel">https://github.com/zhouande/TLAttributedLabel</a><br>23、可以简单展示在UINavigationBar下方，类似Music app的播放列表视图，弹出菜单视图<br>地址：<a href="https://github.com/DrummerB/BFNavigationBarDrawer">https://github.com/DrummerB/BFNavigationBarDrawer</a><br>24、比如筛选、模糊、优化、蒙版、调整大小、旋转以及保存等等。同时还提供了一个UIImageView子类从URL异步加载图片，并在下载完毕时展示图片。<br>地址：<a href="https://github.com/Nyx0uf/NYXImagesKit">https://github.com/Nyx0uf/NYXImagesKit</a><br>25、底部TabBar<br>地址：<a href="https://github.com/robbdimitrov/RDVTabBarController">https://github.com/robbdimitrov/RDVTabBarController</a><br>26、表情面版<br>地址：<a href="https://github.com/ayushgoel/AGEmojiKeyboard">https://github.com/ayushgoel/AGEmojiKeyboard</a><br>27、记录框架<br>地址：<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">https://github.com/CocoaLumberjack/CocoaLumberjack</a><br>28、IOS与javascript交互<br>地址：<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">https://github.com/marcuswestin/WebViewJavascriptBridge</a><br>29、图表统计展示<br>地址：<a href="https://github.com/kevinzhow/PNChart%EF%BC%88%E6%88%96https://github.com/danielgindi/ios-charts%EF%BC%89">https://github.com/kevinzhow/PNChart（或https://github.com/danielgindi/ios-charts）</a><br>30、appStore评分<br>地址：<a href="https://github.com/arashpayan/appirater">https://github.com/arashpayan/appirater</a><br>31、iOS-Categories扩展类大全<br>地址：<a href="https://github.com/shaojiankui/IOS-Categories">https://github.com/shaojiankui/IOS-Categories</a><br>32、扫描二维码，仿微信效果，带有扫描条<br>地址：<a href="https://github.com/JxbSir/JxbScanQR">https://github.com/JxbSir/JxbScanQR</a><br>33、动效弹出视图(弹出窗里面为文字，可以定义弹出的方向，及显示的时间)–AMPopTip<br>地址：<a href="https://github.com/andreamazz/AMPopTip">https://github.com/andreamazz/AMPopTip</a><br>34、基于Masonry自动计算行高扩展<br>地址：<a href="https://github.com/632840804/HYBMasonryAutoCellHeight">https://github.com/632840804/HYBMasonryAutoCellHeight</a><br>35、模仿新浪微博弹出菜单<br>地址：<a href="https://github.com/wwdc14/HyPopMenuView">https://github.com/wwdc14/HyPopMenuView</a><br>36、搜索历史标签<br>地址：<a href="https://github.com/zhiwupei/SearchHistory">https://github.com/zhiwupei/SearchHistory</a><br>37、快速集成新手引导的类库<br>地址：<a href="https://github.com/StrongX/XSportLight">https://github.com/StrongX/XSportLight</a><br>38、设置页面的封装<br>地址：<a href="https://github.com/renzifeng/ZFSetting">https://github.com/renzifeng/ZFSetting</a><br>39、带箭头的弹出视图插件<br>地址：<a href="https://github.com/xiekw2010/DXPopover">https://github.com/xiekw2010/DXPopover</a><br>40、下拉菜单插件<br>地址：<a href="https://github.com/dopcn/DOPDropDownMenu/">https://github.com/dopcn/DOPDropDownMenu/</a><br>41、表格空白提示插件<br>地址：<a href="https://github.com/dzenbot/DZNEmptyDataSet">https://github.com/dzenbot/DZNEmptyDataSet</a><br>42、给任意UIView视图四条边框加上阴影，可以自定义阴影的颜色、粗细程度、透明程度以及位置（上下左右边框）<br>地址：<a href="https://github.com/Seitk/UIView-Shadow-Maker">https://github.com/Seitk/UIView-Shadow-Maker</a><br>43、不错的日期时间插件<br>地址：<a href="https://github.com/CoderXL/UUDatePicker">https://github.com/CoderXL/UUDatePicker</a><br>44、底部弹出选择<br>地址：<a href="https://github.com/skywinder/ActionSheetPicker-3.0">https://github.com/skywinder/ActionSheetPicker-3.0</a><br>45、比较不错的引导页面插件<br>地址：<a href="https://github.com/ealeksandrov/EAIntroView">https://github.com/ealeksandrov/EAIntroView</a><br>46、两个APP跳转的插件<br>地址：<a href="https://github.com/usebutton/DeepLinkKit">https://github.com/usebutton/DeepLinkKit</a><br>47、本地存取NSUserDefaults插件<br>地址：<a href="https://github.com/gangverk/GVUserDefaults">https://github.com/gangverk/GVUserDefaults</a><br>48、NSArray和NSDictionary关于LINQ的操作方式，封装一些常用的操作<br>地址：<a href="https://github.com/ColinEberhardt/LinqToObjectiveC">https://github.com/ColinEberhardt/LinqToObjectiveC</a><br>49、可以监控网络请求的内容<br>地址：<a href="https://github.com/coderyi/NetworkEye">https://github.com/coderyi/NetworkEye</a><br>50、时间帮助插件，可以快速获取时间，比较，增加等操作<br>地址：<a href="https://github.com/MatthewYork/DateTools">https://github.com/MatthewYork/DateTools</a><br>51、不错的链式动作<br>地址：<a href="https://github.com/jhurray/JHChainableAnimations">https://github.com/jhurray/JHChainableAnimations</a><br>52、弹出层视图，背景效果（可以自定义视图的内容）<br>地址：<a href="https://github.com/HJaycee/JCAlertView">https://github.com/HJaycee/JCAlertView</a><br>53、圆形进度条的显示，中间可显示值<br>地址：<a href="https://github.com/mdinacci/MDRadialProgress">https://github.com/mdinacci/MDRadialProgress</a><br>54、很帅的数据加载动画（可以用于数据列表加载的展现）<br>地址：<a href="https://github.com/NghiaTranUIT/FeSpinner">https://github.com/NghiaTranUIT/FeSpinner</a><br>55、一个开源的AFnetworking上层的封装（猿题库等运用）<br>地址：<a href="https://github.com/yuantiku/YTKNetwork">https://github.com/yuantiku/YTKNetwork</a><br>56、CBStoreHouseRefreshControl：一个效果很酷炫的下拉刷新控件<br>地址：<a href="https://github.com/coolbeet/CBStoreHouseRefreshControl">https://github.com/coolbeet/CBStoreHouseRefreshControl</a><br>57、AFNetworking-RACExtensions:针对ReactiveCocoa的AF封装<br>地址：<a href="https://github.com/CodaFi/AFNetworking-RACExtensions">https://github.com/CodaFi/AFNetworking-RACExtensions</a><br>58、模糊效果（毛玻璃）<br>地址：<a href="https://github.com/nicklockwood/FXBlurView">https://github.com/nicklockwood/FXBlurView</a><br>59、UITableView展开效果的插件<br>地址：<a href="https://github.com/sakkaras/SKSTableView">https://github.com/sakkaras/SKSTableView</a><br>60、ZIP压缩及解压插件ZipArchive<br>地址：<a href="https://github.com/ZipArchive/ZipArchive">https://github.com/ZipArchive/ZipArchive</a><br>61、自定义UIAlertView<br>地址：<a href="https://github.com/lmcd/LMAlertView">https://github.com/lmcd/LMAlertView</a><br>62、Facebook开源的动画库Pop<br>地址：<a href="https://github.com/facebook/pop">https://github.com/facebook/pop</a><br>63、关于使用facebook动画库的实例集合<br>地址：<a href="https://github.com/schneiderandre/popping">https://github.com/schneiderandre/popping</a><br>64、iOS应用视图上添加简单闪烁效果Shimmer<br>地址：<a href="https://github.com/facebook/Shimmer">https://github.com/facebook/Shimmer</a><br>65、ios数据持久化插件，使得Core Data使用起来更加的便捷容易<br>地址：<a href="https://github.com/magicalpanda/MagicalRecord">https://github.com/magicalpanda/MagicalRecord</a><br>66、创建缩合的iOS应用程序标题栏<br>地址：<a href="https://github.com/bryankeller/BLKFlexibleHeightBar">https://github.com/bryankeller/BLKFlexibleHeightBar</a><br>67、PDF阅读器核心库<br>地址：<a href="https://github.com/vfr/Reader">https://github.com/vfr/Reader</a><br>68、STPopup使弹出框也有UINavigationController的效果<br>地址：<a href="https://github.com/kevin0571/STPopup">https://github.com/kevin0571/STPopup</a><br>69、基于核心音频,有助于进行实时，低延迟音频处理和可视化的iOS和OSX音频可视化框架<br>地址：<a href="https://github.com/syedhali/EZAudio">https://github.com/syedhali/EZAudio</a><br>70、一个不错的弹出Sheet,可以前进跟后退，适合多个页面<br>地址：<a href="https://github.com/m1entus/MZFormSheetController">https://github.com/m1entus/MZFormSheetController</a><br>71、Aspect库是对面向切面编程的实现，里面封装了Runtime的方法<br>地址：<a href="https://github.com/steipete/Aspects">https://github.com/steipete/Aspects</a><br>72、一个不错在无输入源的输入框，如UITableViewCell等<br>地址：<a href="https://github.com/slackhq/SlackTextViewController">https://github.com/slackhq/SlackTextViewController</a><br>73、小红点插件，用于提示未读效果<br>地址：<a href="https://github.com/weng1250/WZLBadge">https://github.com/weng1250/WZLBadge</a><br>74、不错的照片选择器，视频选择器，支持单多选<br>地址：<a href="https://github.com/mwaterfall/MWPhotoBrowser">https://github.com/mwaterfall/MWPhotoBrowser</a><br>75、含10多种的转场动画效果<br>地址：<a href="https://github.com/ColinEberhardt/VCTransitionsLibrary">https://github.com/ColinEberhardt/VCTransitionsLibrary</a><br>76、左右菜单显示（类似QQ导航）<br>地址：<a href="https://github.com/romaonthego/RESideMenu">https://github.com/romaonthego/RESideMenu</a><br>77、很赞的等待指示动画（比系统自带的帅）<br>地址：<a href="https://github.com/ninjaprox/DGActivityIndicatorView">https://github.com/ninjaprox/DGActivityIndicatorView</a><br>78、KVOController一个简单安全的KVO(Key-value Observing,键-值观察)工具,提供简单方便、线程安全的API, Facebook的开源项目之一<br>地址：<a href="https://github.com/facebook/KVOController">https://github.com/facebook/KVOController</a><br>79、FormatterKit收集了很多构思优秀的NSFormatter子类<br>地址：<a href="https://github.com/mattt/FormatterKit">https://github.com/mattt/FormatterKit</a><br>80、自定义的UIPageControl(可以设置每个的样式)<br>地址：<a href="https://github.com/Spaceman-Labs/SMPageControl">https://github.com/Spaceman-Labs/SMPageControl</a><br>81、使用NJKWebViewProgress做webview进度条（解决先前无法获得进度的问题）<br>地址：<a href="https://github.com/ninjinkun/NJKWebViewProgress">https://github.com/ninjinkun/NJKWebViewProgress</a><br>82、修改NavigationBar的显示效果<br>地址：<a href="https://github.com/ltebean/LTNavigationBar/">https://github.com/ltebean/LTNavigationBar/</a><br>83、FCUUID获得设备号的替代方式<br>地址：<a href="https://github.com/fabiocaccamo/FCUUID">https://github.com/fabiocaccamo/FCUUID</a><br>84、多主题色或者白天黑夜模式的运用<br>地址：<a href="https://github.com/Draveness/DKNightVersion">https://github.com/Draveness/DKNightVersion</a><br>85、GPUImage是一个基于GPU图像和视频处理的开源框架,提供各种各样的图像处理滤镜<br>地址：<a href="https://github.com/BradLarson/GPUImage">https://github.com/BradLarson/GPUImage</a><br>86、YY图片加载插件，可以支持动态，网络本地，渐进式图片加载等<br>地址：<a href="https://github.com/ibireme/YYWebImage">https://github.com/ibireme/YYWebImage</a><br>87、封装后的蓝牙帮助库<br>地址：<a href="https://github.com/coolnameismy/BabyBluetooth">https://github.com/coolnameismy/BabyBluetooth</a><br>88、一个很通用的需求就是引导教程<br>地址：<a href="https://github.com/bubudrc/MPCoachMarks">https://github.com/bubudrc/MPCoachMarks</a><br>89、基于MPMoviePlayerController播放器KRVideoPlayer<br>地址：<a href="https://github.com/36Kr-Mobile/KRVideoPlayer">https://github.com/36Kr-Mobile/KRVideoPlayer</a><br>90、UICollection左对齐跟右对齐<br>地址：<a href="https://github.com/mokagio/UICollectionViewLeftAlignedLayout">https://github.com/mokagio/UICollectionViewLeftAlignedLayout</a><br>地址：<a href="https://github.com/mokagio/UICollectionViewRightAlignedLayout">https://github.com/mokagio/UICollectionViewRightAlignedLayout</a><br>91、自定义弹出对话窗，类似系统又可以自定义视图DQAlertView或MMPopupView<br>地址：<a href="https://github.com/dinhquan/DQAlertView">https://github.com/dinhquan/DQAlertView</a><br>地址：<a href="https://github.com/adad184/MMPopupView">https://github.com/adad184/MMPopupView</a><br>92、输入框在焦点获得时会有一个小标题JVFloatLabeledTextField<br>地址：<a href="https://github.com/jverdi/JVFloatLabeledTextField">https://github.com/jverdi/JVFloatLabeledTextField</a><br>93:针对一些UI进行显示优化，可以设置一些不同的背景色等<br>地址：<a href="https://github.com/Grouper/FlatUIKit">https://github.com/Grouper/FlatUIKit</a><br>94、色彩插件，如果没有设计师又想一些漂亮的色彩就可以运用Chameleon<br>地址：<a href="https://github.com/ViccAlexander/Chameleon">https://github.com/ViccAlexander/Chameleon</a><br>95、两个不错的侧边栏显示插件ECSlidingViewController，SWRevealViewController<br>地址：<a href="https://github.com/ECSlidingViewController/">https://github.com/ECSlidingViewController/</a><br>ECSlidingViewController<br>地址：<a href="https://github.com/John-Lluch/SWRevealViewController">https://github.com/John-Lluch/SWRevealViewController</a><br>96、各式各样的进度条，可以放在不同地方NAV或者图片或者扇形M13ProgressSuite<br>地址：<a href="https://github.com/Marxon13/M13ProgressSuite">https://github.com/Marxon13/M13ProgressSuite</a><br>97、拉动UITableView时CELL有一摇动的效果AMWaveTransition<br>地址：<a href="https://github.com/andreamazz/AMWaveTransition">https://github.com/andreamazz/AMWaveTransition</a></p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客环境搭建for Mac</title>
      <link href="/blog//2015/12/25/hexo-blog-environment-set-up-for-mac.html"/>
      <url>/blog//2015/12/25/hexo-blog-environment-set-up-for-mac.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li><a href="https://github.com/hexojs/hexo">hexo</a>是一款基于Node.js的静态博客框架，这篇文章针对Mac用户，熟悉hexo的同学可以绕道哈。初步搭建只需要简单的几步，动动你的手指头，在终端试一下吧…<span id="more"></span></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/hexojs/hexo">hexo</a>是一款基于Node.js的静态博客框架，这篇文章针对Mac用户，熟悉hexo的同学可以绕道哈。初步搭建只需要简单的几步，动动你的手指头，在终端试一下吧…</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%BA%86%E8%A7%A3GithubPages">了解Github Pages</a></li><li><a href="#%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83">搭建环境</a></li><li><a href="#Git%E5%AE%89%E8%A3%85%E5%92%8CGithub%E8%AE%BE%E7%BD%AE">Git安装和Github设置</a></li><li><a href="#Node.js%E5%AE%89%E8%A3%85">Node.js安装</a></li><li><a href="#Hexo%E5%AE%89%E8%A3%85">Hexo安装</a></li><li><a href="#Hexo%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2">Hexo本地部署</a></li><li><a href="#%E7%9B%B8%E5%85%B3%E9%94%99%E8%AF%AF%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">相关错误及解决方法</a></li><li><a href="#%E9%85%8D%E7%BD%AESSH%E5%AF%86%E9%92%A5">配置SSH密钥</a></li><li><a href="#Extensions">Extensions</a></li></ul><h3 id="了解Github-Pages"><a href="#了解Github-Pages" class="headerlink" title="了解Github Pages"></a><a name='了解GithubPages'>了解Github Pages</a></h3><p>关于Github Pages请移步我的另一篇博客</p><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a><a name='搭建环境'>搭建环境</a></h3><p>本文只针对Mac用户，windows用户以及Linux用户可自行Google。在Mac上，推荐先安装homebrew。homebrew是Mac OS上的软件包管理工具。</p><p> <img src="http://upload-images.jianshu.io/upload_images/424375-576aa8f4ad60d4b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/format/jpg" alt="Homebrew 安装"></p><h3 id="Git安装和Github设置"><a href="#Git安装和Github设置" class="headerlink" title="Git安装和Github设置"></a><a name='Git安装和Github设置'>Git安装和Github设置</a></h3><ul><li>使用homebrew安装git<code>brew install git</code></li><li>查看git是否已安装成功<code>git --version</code></li><li>确认Github上已经创建名为<code>“你的用户名.github.io”</code>的仓库</li></ul><h3 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a><a name='Node.js安装'>Node.js安装</a></h3><blockquote><p>快速安装</p></blockquote><ul><li>使用homebrew安装node<code>brew install node</code></li><li>node.js的包中已经集成了npm，npm是Node.js的模块依赖管理工具</li><li>查看node和npm是否已安装成功<code>node -v</code>和<code>npm -v</code></li></ul><blockquote><p>官网安装</p></blockquote><p>本站使用的是在<a href="https://nodejs.org/en/">node官网</a>下的<code>Node.js</code>的pkg安装包进行的安装，安装的版本为<code>v6.10.0</code>，可能现在的版本已经升级。可以通过查看历史版本进行下载。附上链接地址：<a href="https://nodejs.org/download/release/v6.10.0/">https://nodejs.org/download/release/v6.10.0/</a></p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a><a name='Hexo安装'>Hexo安装</a></h3><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个基于Node.js的静态博客框架，作者是@tommy351</p><p><img src="http://upload-images.jianshu.io/upload_images/424375-35f1aba8b42014ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/format/jpg" alt="Hexo官网"></p><ul><li>cd到你在本地的博客文件夹<code>cd /users/GuoYanjun/Documents/yajon_blog</code>，然后执行下面的安装命令</li></ul><p><code>npm install hexo-cli -g</code></p><h3 id="Hexo本地部署"><a href="#Hexo本地部署" class="headerlink" title="Hexo本地部署"></a><a name='Hexo本地部署'>Hexo本地部署</a></h3><ul><li>cd到你在本地的博客文件夹，然后执行下面的命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /users/GuoYanjun/Documents/yajon_blog</span><br><span class="line">hexo init                  <span class="comment">#执行init命令初始化hexo到当前目录</span></span><br><span class="line">hexo new post <span class="string">&quot;post_name&quot;</span>  <span class="comment"># 新建一篇文章</span></span><br><span class="line">hexo g                     <span class="comment"># g == generate 自动根据当前目录下文件,生成静态网页</span></span><br><span class="line">hexo s                     <span class="comment"># s == server 运行本地服务</span></span><br></pre></td></tr></table></figure><ul><li>部署步骤</li></ul><p>每次部署的步骤，可按以下三步来进行。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><strong>这里有必要提下Hexo常用的几个命令:</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span>       #自动根据当前目录下文件,生成静态网页,会在当前目录下生成一个public的文件夹</span><br><span class="line">hexo server         #启动本地web服务，预览访问（默认端口<span class="number">4000</span>，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy         #部署播客到远端（比如github, coding等平台）</span><br></pre></td></tr></table></figure><p><strong>常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new <span class="string">&quot;postName&quot;</span>         <span class="comment">#新建文章,其中postName是文章题目</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page <span class="string">&quot;pageName&quot;</span>    <span class="comment">#新建页面</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo <span class="built_in">help</span>                   <span class="comment">#查看帮助</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo version                <span class="comment">#查看Hexo的版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean                  <span class="comment">#清除缓存 网页正常情况下可以忽略此条命令</span></span></span><br></pre></td></tr></table></figure><p><strong>常用简写</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo n <span class="string">&quot;我的博客&quot;</span> == hexo new <span class="string">&quot;我的博客&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line"><span class="variable">$ </span>hexo p == hexo publish</span><br><span class="line"><span class="variable">$ </span>hexo g == hexo generate<span class="comment">#生成</span></span><br><span class="line"><span class="variable">$ </span>hexo s == hexo server<span class="comment">#启动服务预览</span></span><br><span class="line"><span class="variable">$ </span>hexo d == hexo deploy<span class="comment">#部署</span></span><br></pre></td></tr></table></figure><p><strong>常用组合</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d -g <span class="comment">#生成部署</span></span><br><span class="line"><span class="variable">$ </span>hexo s -g <span class="comment">#生成预览</span></span><br></pre></td></tr></table></figure><p><strong>服务器</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">server</span> <span class="meta">#Hexo 会监视文件变动并自动更新，您无须重启服务器。 </span></span><br><span class="line">$ hexo <span class="keyword">server</span> -s <span class="meta">#静态模式 </span></span><br><span class="line">$ hexo <span class="keyword">server</span> -p <span class="number">5000</span> <span class="meta">#更改端口 </span></span><br><span class="line">$ hexo <span class="keyword">server</span> -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> <span class="meta">#自定义 IP</span></span><br></pre></td></tr></table></figure><p><strong>监视文件变动</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span>#生成静态文件 </span><br><span class="line">hexo <span class="keyword">generate</span> --watch#监视文件变动</span><br></pre></td></tr></table></figure><p>以下为上述部署步骤的相关截图。</p><p><img src="http://upload-images.jianshu.io/upload_images/424375-8969211745db3d6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/format/jpg" alt="hexo init 之后出现的文件夹"></p><p><img src="http://upload-images.jianshu.io/upload_images/424375-9b378981416d271b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/format/jpg" alt="npm install 之后出现 node_modules"></p><p><img src="http://upload-images.jianshu.io/upload_images/424375-1a32992b4eac9cce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/format/jpg" alt="hexo generate 之后出现 public 和 db.json"></p><ul><li>最后，可以在本地查看<code>localhost:4000</code><br>在Mac terminal按下<code>ctrl+C</code>结束</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1712159-102fc641972e4cf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行效果图"></p><h3 id="相关错误及解决方法"><a href="#相关错误及解决方法" class="headerlink" title="相关错误及解决方法"></a><a name='相关错误及解决方法'>相关错误及解决方法</a></h3><ul><li>出现类似<code>Error: Module version mismatch. Expected 48, got 51.</code>的错误</li></ul><p>如果终端出现类似上述的错误，可能是因为你的<code>node.js</code>版本与之前项目的版本不一致造成的。可以移除之前的<code>node.js</code>，按照之前的版本重新安装<code>node.js</code>.</p><p><strong>step1: node.js在Mac下的卸载</strong></p><p>在 node 官网上下载的安装包，用安装包安装的node.应该可以用一下命令行卸载：</p><p>在终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /usr/local/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125;</span><br></pre></td></tr></table></figure><p>删除<code>/usr/local/lib</code>中的所有<code>node</code>和<code>node_modules</code><br>删除<code>/usr/local/lib</code>中的所有<code>node</code>和<code>node_modules</code>的文件夹<br>如果是从<code>brew</code>安装的, 运行<code>brew uninstall node</code><br>检查<code>~/</code>中所有的<code>local</code>, <code>lib</code>或者<code>include</code>文件夹, 删除里面所有<code>node</code>和<code>node_modules</code><br>在<code>/usr/local/bin</code>中, 删除所有node的可执行文件<br>最后运行以下代码:(可能具体安装路径会有区别 ,<code>find ~ -name &quot;node&quot;</code>可以找到所有</p><p><strong>step2: hexo在Mac下的移除</strong></p><p>接着移除<code>hexo</code>，移除的命令请参照以下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> uninstall hexo-cli -g <span class="comment">#3.0.0版本执行</span></span><br><span class="line"><span class="built_in">npm</span> uninstall hexo -g <span class="comment">#之前版本执行</span></span><br></pre></td></tr></table></figure><p><strong>step3: 重新install hexo</strong></p><p>移除之后，在本地博客的文件夹中执行<code>npm install hexo-cli -g</code>命令即可。</p><h3 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a><a name = '配置SSH密钥'>配置SSH密钥</a></h3><ul><li>Mac下已安装的ssh的id_rsa.pub文件位置</li></ul><p>如果之前生成的SSH Key是选择默认路径的，因此要找到ssh文件夹下的id_rsa.pub文件，只需要：<br>打开终端输入<code>open ~/.ssh</code>即可。</p><h4 id="step1-看看是否存在SSH密钥-keys"><a href="#step1-看看是否存在SSH密钥-keys" class="headerlink" title="step1: 看看是否存在SSH密钥(keys)"></a>step1: 看看是否存在SSH密钥(keys)</h4><p>首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ~/. ssh</span></span><br></pre></td></tr></table></figure><p>检查你本机用户home目录下是否存在.ssh目录</p><p>如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p><h4 id="step2-创建一对新的SSH密钥-keys"><a href="#step2-创建一对新的SSH密钥-keys" class="headerlink" title="step2: 创建一对新的SSH密钥(keys)"></a>step2: 创建一对新的SSH密钥(keys)</h4><ul><li>按照你提供的邮箱地址，创建一对密钥</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>运行完之后会出现以下提示：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line">Enter <span class="keyword">file</span> in which to save the key (<span class="regexp">/Users/y</span>ourname<span class="regexp">/.ssh/i</span>d_rsa): </span><br></pre></td></tr></table></figure><ul><li>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如&#x2F;Users&#x2F;yourname&#x2F;.ssh&#x2F;github_rsa</li><li>接着，根据提示，你需要输入密码和确认密码（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码）。这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<strong>注意：输入密码的时候没有*字样的，你直接输入就可以了。</strong></li></ul><p>相关提示如下：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> <span class="keyword">no</span> passphrase): <span class="variable">&lt;输入加密串&gt;</span></span><br><span class="line">Enter same passphrase again: <span class="variable">&lt;再次输入加密串&gt;</span></span><br></pre></td></tr></table></figure><p>输入完成之后，屏幕会显示如下信息：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /Users/yourname/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/yourname/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx your_email<span class="meta">@example.com</span></span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><h4 id="step3-在GitHub账户中添加你的公钥"><a href="#step3-在GitHub账户中添加你的公钥" class="headerlink" title="step3: 在GitHub账户中添加你的公钥"></a>step3: 在GitHub账户中添加你的公钥</h4><p>运行如下命令，从Finder中找到你的<code>id_rsa.pub</code>文件，打开之后，将其内容全部复制。看清楚是<strong>全部复制</strong>！！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ~/. ssh</span></span><br></pre></td></tr></table></figure><h4 id="step4-将密钥添加到你的GitHub账户中"><a href="#step4-将密钥添加到你的GitHub账户中" class="headerlink" title="step4: 将密钥添加到你的GitHub账户中"></a>step4: 将密钥添加到你的GitHub账户中</h4><ul><li>step1: 登陆GitHub,进入你的Account Settings.<br><img src="http://upload-images.jianshu.io/upload_images/1712159-efd0f7a036164831.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Account Settings"></li><li>step2: 选择SSH Keys<br><img src="http://upload-images.jianshu.io/upload_images/1712159-173750b1a4a73d95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SSH Keys"></li><li>step3: 粘贴密钥，添加即可</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1712159-0419298696b76bc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="粘贴密钥"></p><h4 id="step5-测试"><a href="#step5-测试" class="headerlink" title="step5: 测试"></a>step5: 测试</h4><p>添加完密钥后可以输入下面的命令，看看设置是否成功，<a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;">&#103;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a>的部分不要修改：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure><p>如果是下面的反馈：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">The</span> authenticity of host &#x27;github.com (<span class="number">207.97.227.239</span>)&#x27; can&#x27;t be established.</span><br><span class="line"><span class="attribute">RSA</span> key fingerprint is <span class="number">16</span>:<span class="number">27</span>:ac:a5:<span class="number">76</span>:<span class="number">28</span>:<span class="number">2</span>d:<span class="number">36</span>:<span class="number">63</span>:<span class="number">1</span>b:<span class="number">56</span>:<span class="number">4</span>d:eb:df:a6:<span class="number">48</span>.</span><br><span class="line"><span class="attribute">Are</span> you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>不要紧张，输入yes就好，然后会看到：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi Yajon! You<span class="symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</span><br></pre></td></tr></table></figure><h4 id="step5-设置用户信息"><a href="#step5-设置用户信息" class="headerlink" title="step5: 设置用户信息"></a>step5: 设置用户信息</h4><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。<br>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;Yajon&quot;</span><span class="comment">//用户名</span></span><br><span class="line">$ git config <span class="attr">--global</span> user<span class="selector-class">.email</span>  <span class="string">&quot;your_email@gmail.com&quot;</span><span class="comment">//填写自己的邮箱</span></span><br></pre></td></tr></table></figure><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a><a name = 'Extensions'>Extensions</a></h3><ul><li>Plugins: <a href="http://hexo.io/plugins/">http://hexo.io/plugins/</a></li><li>Themes: <a href="http://hexo.io/themes/">http://hexo.io/themes/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo命令和一些使用方法</title>
      <link href="/blog//2015/12/24/the-hexo-comand-and-some-usage.html"/>
      <url>/blog//2015/12/24/the-hexo-comand-and-some-usage.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>hexo是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上…<span id="more"></span></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hexo是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的<a href="https://github.com/hexojs/hexo">@tommy351</a>。<br>我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。<br>本博客即使用hexo创建并托管在github上。</p><p>网上有很多hexo大的搭建教程，这里就不多说了，这里主要介绍hexo的使用方法，同时也是为了方便自己记忆。</p><h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install hexo -g <span class="comment">#安装  </span></span><br><span class="line"><span class="built_in">npm</span> update hexo -g <span class="comment">#升级  </span></span><br><span class="line">hexo init <span class="comment">#初始化</span></span><br></pre></td></tr></table></figure><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;我的博客&quot;</span> == hexo <span class="keyword">new</span> <span class="string">&quot;我的博客&quot;</span> <span class="meta">#新建文章</span></span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate<span class="meta">#生成</span></span><br><span class="line">hexo s == hexo <span class="keyword">server</span> <span class="meta">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy<span class="meta">#部署</span></span><br></pre></td></tr></table></figure><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span> <span class="meta">#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span></span><br><span class="line">hexo <span class="keyword">server</span> -s <span class="meta">#静态模式</span></span><br><span class="line">hexo <span class="keyword">server</span> -p <span class="number">5000</span> <span class="meta">#更改端口</span></span><br><span class="line">hexo <span class="keyword">server</span> -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> <span class="meta">#自定义 IP</span></span><br><span class="line"></span><br><span class="line">hexo clean <span class="meta">#清除缓存 网页正常情况下可以忽略此条命令</span></span><br><span class="line">hexo g <span class="meta">#生成静态网页</span></span><br><span class="line">hexo d <span class="meta">#开始部署</span></span><br></pre></td></tr></table></figure><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span> #使用 Hexo 生成静态文件快速而且简单</span><br><span class="line">hexo <span class="keyword">generate</span> --watch #监视文件变动</span><br></pre></td></tr></table></figure><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><blockquote><p>两个命令的作用是相同的<br>hexo generate –deploy<br>hexo deploy –generate</p></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br><span class="line">hexo <span class="keyword">server</span> -g</span><br></pre></td></tr></table></figure><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;postName&quot;</span> <span class="meta">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;pageName&quot;</span> <span class="meta">#新建页面</span></span><br><span class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></span><br><span class="line">hexo <span class="keyword">server</span> <span class="meta">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="meta">#将.deploy目录部署到GitHub</span></span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> [layout] &lt;title&gt;</span><br><span class="line">hexo <span class="keyword">new</span> photo <span class="string">&quot;My Gallery&quot;</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;Hello World&quot;</span> --lang tw</span><br></pre></td></tr></table></figure><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2014<span class="string">-03</span><span class="string">-03</span> 19:07:43</span><br><span class="line">comments: true</span><br><span class="line">categories: Blog</span><br><span class="line"><span class="keyword">tags:</span> [Hexo]</span><br><span class="line">keywords: Hexo, Blog</span><br><span class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br></pre></td></tr></table></figure><h3 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h3><p><code>hexo new photo &quot;My Gallery&quot;</code></p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table><h3 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以上是文章摘要 <span class="comment">&lt;!--more--&gt;</span> 以下是余下全文 </span><br></pre></td></tr></table></figure><h3 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="type"></span>&quot;my <span class="keyword">new</span> <span class="type">post</span>&quot; </span><br></pre></td></tr></table></figure><p>然后在<code>~\hexo\source\ _posts中</code>打开这个文件（我用的是subline text3打开的），配置开头。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">my</span> <span class="string">new</span> <span class="string">post</span>  <span class="string">\#文章标题，可以改为中文。</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016-01-14 20:37:51</span>  <span class="string">\#发表日期，自动生成，不改。</span></span><br><span class="line"><span class="attr">categories:</span>  <span class="string">***</span>  <span class="string">\#文章分类</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span>   <span class="string">\#文章标签，多于一项是使用这种格式。</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#这里是正文，用markdown写，所有的书写切记需要在  &quot; : &quot;  后面留空格。</span></span><br><span class="line"><span class="string">&lt;!--more--&gt;</span>  <span class="string">\#在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read</span> <span class="string">more才能看到。</span></span><br></pre></td></tr></table></figure><h3 id="推送到服务器上"><a href="#推送到服务器上" class="headerlink" title="推送到服务器上"></a>推送到服务器上</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n #写文章</span><br><span class="line">hexo g #生成</span><br><span class="line">hexo d #部署 #可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure><h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><p><em>markdown语法，这里不做太多描述，有需要可以参考<a href="http://lutaf.com/markdown-simple-usage.htm">markdown 简明语法</a>.我在这里记录一下我自己使用过程中经常用到的。</em></p><ul><li><p><strong>换行：</strong><br>回车键或连续3个—表示分割线。</p></li><li><p><strong>强调：</strong><br>星号（*）与下划线（_）都可以，单是斜体，双是粗体，符号可跨行，符号可加空格。</p></li><li><p><strong>有序列表：</strong><br>数字 + . + 空格 ，数字不能省略但可无序，点号之后的空格不能少。</p></li><li><p><strong>超链接：</strong><br><strong>文字：</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">文字</span>](<span class="name">url</span> <span class="string">&quot;可选的title&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>​图片：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="selector-attr">[图片名称]</span>(图片路径)  \#我是放在本地文件夹下的，所以路径是：/<span class="selector-tag">img</span>/Share project on github<span class="selector-class">.png</span></span><br></pre></td></tr></table></figure></li><li><p><strong>插入代码：</strong><br>新起一行，按2次Tab键或者8次空格。插入代码也可以加入有序列表。<br>或者<br><code>&#123; % codeblock [title] [lang:language] [url] [link text] % &#125; code snippet &#123; % endcodeblock % &#125;</code></p></li><li><p><strong>防止github中的READ.me文件被渲染的方法：</strong><br>在<code>~\Hexo\source</code>文件夹下建立<code>READ.md</code>文件。<br>在<code>~\Hexo\ _config.yml</code>文件中<code>skip_render:</code>后面加上README.md即<strong>skip_render: README.md</strong>。</p></li><li><p><strong>一些转义符：</strong><br>Markdown中的转义字符为\，转义的有：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> 反斜杠</span><br><span class="line"><span class="punctuation">\</span>` 反引号</span><br><span class="line">\* 星号</span><br><span class="line">\_ 下划线</span><br><span class="line">\&#123;\&#125; 大括号</span><br><span class="line">\[\] 中括号</span><br><span class="line">\(\) 小括号</span><br><span class="line">\# 井号</span><br><span class="line">\+ 加号</span><br><span class="line">\- 减号</span><br><span class="line">\. 英文句号</span><br><span class="line">\! 感叹号</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS加载单张图片导致崩溃的分析</title>
      <link href="/blog//2015/12/05/ios-loading-single-shet-pictures-leading-to-crash-analysis.html"/>
      <url>/blog//2015/12/05/ios-loading-single-shet-pictures-leading-to-crash-analysis.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>首先iPhone毕竟是手持设备，它所占有的内存是有限的，当图片过大的时候会引起内存导致的崩溃现象…<span id="more"></span></li></ul><h2 id="iOS加载单张图片导致崩溃的分析"><a href="#iOS加载单张图片导致崩溃的分析" class="headerlink" title="iOS加载单张图片导致崩溃的分析"></a>iOS加载单张图片导致崩溃的分析</h2><h3 id="1、初步分析"><a href="#1、初步分析" class="headerlink" title="1、初步分析"></a>1、初步分析</h3><p>首先iPhone毕竟是手持设备，它所占有的内存是有限的，当图片过大的时候会引起内存导致的崩溃现象。</p><p>iPhone下每个app可用的内存是被限制的，如果一个app使用的内存超过20M，则系统会向该app发送Memory Warning消息。收到此消息后，app必须正确处理，否则可能出错或者出现内存泄露。</p><h3 id="2、崩溃执行的过程分析"><a href="#2、崩溃执行的过程分析" class="headerlink" title="2、崩溃执行的过程分析"></a>2、崩溃执行的过程分析</h3><p><code>app收到Memory Warning后会调用：</code>UIApplication::didReceiveMemoryWarning -&gt; UIApplicationDelegate::applicationDidReceiveMemoryWarning,然后调用当前所有的viewController进行处理。因此处理的主要工作是在viewController。</p><p><code>创建viewcontroller时，</code>执行顺序是loadview -&gt; viewDidLoad。</p><p><code>当收到内存警告时，</code>如果viewcontroller未显示（在后台），会执行didReceiveMemoryWarning -&gt; viewDidUnLoad；如果viewcontroller当前正在显示（在前台），则只执行didReceiveMemoryWarning。</p><p><code>当重新显示该viewController时，</code>执行过viewDidUnLoad的viewcontroller（即原来在后台）会重新调用loadview -&gt; viewDidLoad。</p><h3 id="3、图片加载的方法分析"><a href="#3、图片加载的方法分析" class="headerlink" title="3、图片加载的方法分析"></a>3、图片加载的方法分析</h3><blockquote></blockquote><p>**仔细查看Apple官方的文档，可见其为生成一个UIImage对象提供了两种方法加载图片：<br>**</p><ol><li>imageNamed，其参数为图片的名字；</li><li>imageWithContentsOfFile，其参数也是图片文件的路径。</li></ol><p>这两者是有区别的，根据Apple的官方文档：<br><code>imageNamed: 这个方法用一个指定的名字在系统缓存中查找并返回一个图片对象，如果它存在的话。如果缓存中没有找到相应的图片，这个方法从指定的文档中加载然后缓存并返回这个对象。</code></p><p><strong>因此imageNamed的优点是当加载时会缓存图片。所以当图片会频繁的使用时，那么用imageNamed的方法会比较好。</strong></p><p><strong>例如：</strong>你需要在 一个TableView里的TableViewCell里都加载同样一个图标，那么用imageNamed加载图像效率很高。系统会把那个图标Cache到内存，在TableViewCell里每次利用那个图像的时候，只会把图片指针指向同一块内存。正是因此使用imageNamed会缓存图片，即将图片的数据放在内存中，iOS的内存非常珍贵并且在内存消耗过大时，会强制释放内存，即会遇到memory warnings。</p><p>而在iOS系统里面释放图像的内存是一件比较麻烦的事情，有可能会造成内存泄漏。</p><p><strong>例如：</strong>当一个UIView对象的animationImages是一个装有UIImage对象动态数组NSMutableArray，并进行逐帧动画。当使用imageNamed的方式加载图像到一个动态数组NSMutableArray，这将会很有可能造成内存泄露，原因很显然的。</p><p><code>imageWithContentsOfFile：仅加载图片，图像数据不会缓存。</code></p><p><strong>因此对于较大的图片以及使用情况较少时，那就可以用该方法，降低内存消耗。</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面列举出两种方法加载UIImage的用法：</span></span><br><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:@”icon” ofType:@”png”];</span><br><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithContentsOfFile:path];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:fileName ofType:“png”];</span><br><span class="line"><span class="built_in">NSData</span> *image = [<span class="built_in">NSData</span> dataWithContentsOfFile:filePath];</span><br><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:image]; <span class="comment">//or = [UIImage imageWithContentsOfFile:filePath];</span></span><br></pre></td></tr></table></figure><p>相比较而言，这其中的关键在于以下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//imageWithContentsOfFile：仅加载图片，图像数据不会缓存</span></span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//imageNamed:先将图片缓存到内存中，然后在显示。</span></span><br></pre></td></tr></table></figure><p>最后，再次强调两种用法各有各的优点，需要针对具体的应用场景来使用才能恰到好处。</p>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现排序算法及详解</title>
      <link href="/blog//2015/12/01/c-language-sorting-algorithm-and-detailed.html"/>
      <url>/blog//2015/12/01/c-language-sorting-algorithm-and-detailed.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <strong><code>-- 转载请注明 --</code></strong></li><li>排序有内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存…<span id="more"></span></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5">相关概念</a></li><li><a href="#BubbleSort">交换排序—冒泡排序 (Bubble Sort)</a></li><li><a href="#StraightInsertionSort">插入排序—直接插入 (Straight Insertion Sort)</a></li><li><a href="#HalfSelectionSort">插入排序—二分插入</a></li><li><a href="#SimpleSelectionSort">选择排序—简单选择排序 (Simple Selection Sort)</a></li><li><a href="#ShellSort">插入排序—希尔排序 (Shell Sort)</a></li><li><a href="#MergeSort">归并排序 (Merge Sort)</a></li><li><a href="#QuickSort">交换排序—快速排序 (Quick Sort)</a></li><li><a href="#HeapSort">选择排序—堆排序 (Heap Sort)</a></li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a><a name='相关概念'>相关概念</a></h2><p><img src="http://my.csdn.net/uploads/201207/17/1342514529_5795.jpg" alt="排序"></p><p><code>当n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序序。</code><br><code>快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短</code></p><ul><li><strong>稳定排序和非稳定排序</strong><br>简单地说就是所有相等的数经过某种排序方法后，仍能保持它们在排序之前的相对次序，我们就说这种排序方法是稳定的。反之，就是非稳定的。<br>比如：一组数排序前是a1,a2,a3,a4,a5，其中a2&#x3D;a4，经过某种排序后为a1,a2,a4,a3,a5，则我们说这种排序是稳定的，因为a2排序前在a4的前面，排序后它还是在a4的前面。假如变成a1,a4,a2,a3,a5就不是稳定的了。</li><li><strong>内排序和外排序</strong><br>在排序过程中，所有需要排序的数都在内存，并在内存中调整它们的存储顺序，称为内排序；<br>在排序过程中，只有部分数被调入内存，并借助内存调整数在外存中的存放顺序排序方法称为外排序。</li><li><strong>算法的时间复杂度和空间复杂度</strong><br>所谓算法的时间复杂度，是指执行算法所需要的计算工作量。<br>一个算法的空间复杂度，一般是指执行这个算法所需要的内存空间。<br>接下来我们实际来看几大排序算法的具体C语言实现：</li></ul><h2 id="交换排序—冒泡排序-Bubble-Sort"><a href="#交换排序—冒泡排序-Bubble-Sort" class="headerlink" title="交换排序—冒泡排序 (Bubble Sort)"></a><a name='BubbleSort'>交换排序—冒泡排序 (Bubble Sort)</a></h2><p>如果序列是从小到大排列好的，那么任意两个相邻元素，都应该满足a[i-1] &lt;&#x3D; a[i]的关系。在冒泡排序时，我们从右向左遍历数组，比较相邻的两个元素。如果两个元素的顺序是错的，那么就交换这两个元素。如果两个元素的顺序是正确的，则不做交换。经过一次遍历，我们可以保证最小的元素(泡泡)处于最左边的位置。</p><p>经过一次遍历，冒泡排序并不能保证所有的元素已经按照从小到大的排列好。因此，我们需要重新从右向左遍历数组元素，并进行冒泡排序。这一次遍历，我们不用考虑最左端的元素。然后继续进行最多为n-1次的遍历。</p><p>如果某次遍历过程中，元素都没有发生交换，那么说明数组已经排序好，可以中止停止排序。最坏的情况是在起始数组中，最大的元素位于最左边，那么冒泡算法必须经过n-1次遍历才能将数组排列好，而不能提前完成排序。</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p><p>冒泡排序的示例：</p><p><img src="http://my.csdn.net/uploads/201207/20/1342782078_9990.jpg" alt="冒泡排序示例"></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//传统冒泡排序  </span><br><span class="line">void maopao(<span class="built_in">int</span> a[],<span class="built_in">int</span> <span class="built_in">n</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">n</span>-<span class="number">1</span>;i++)  </span><br><span class="line">        for(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">n</span>-i-<span class="number">1</span>;j++)  </span><br><span class="line">            <span class="built_in">if</span>(a[j]&gt;a[j+<span class="number">1</span>])  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="built_in">int</span> <span class="built_in">t</span>=a[j];  </span><br><span class="line">                a[j]=a[j+<span class="number">1</span>];  </span><br><span class="line">                a[j+<span class="number">1</span>]=<span class="built_in">t</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="冒泡排序算法的改进"><a href="#冒泡排序算法的改进" class="headerlink" title="冒泡排序算法的改进"></a>冒泡排序算法的改进</h3><p>对冒泡排序常见的改进方法是加入一标志性变量exchange，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序，避免不必要的比较过程。本文再提供以下两种改进算法：</p><p>方法一：设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。</p><p>改进后算法如下:</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//冒泡排序改进<span class="number">1</span>，添加标志位，如果某一次排序中出现没有交换位置，说明排序完成  </span><br><span class="line">void maopao(<span class="built_in">int</span> a[],<span class="built_in">int</span> <span class="built_in">n</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">int</span> flag=<span class="number">0</span>;  </span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">n</span>-<span class="number">1</span>;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        flag=<span class="number">0</span>;  </span><br><span class="line">        for(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">n</span>-i-<span class="number">1</span>;j++)  </span><br><span class="line">            <span class="built_in">if</span>(a[j]&gt;a[j+<span class="number">1</span>])  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="built_in">int</span> <span class="built_in">t</span>=a[j];  </span><br><span class="line">                a[j]=a[j+<span class="number">1</span>];  </span><br><span class="line">                a[j+<span class="number">1</span>]=<span class="built_in">t</span>;  </span><br><span class="line">                flag=<span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        <span class="built_in">if</span>(flag==<span class="number">0</span>)  </span><br><span class="line">            break;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。<br>改进后的算法实现为:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡改进3，传统冒泡每趟排序遍历一次找到一个最大值或者最小值，如果每趟遍历两次就会找打一个最大值和一个最小值，减少了一半的排序趟数  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maopao</span> <span class="params">( <span class="type">int</span> r[], <span class="type">int</span> n)</span></span>&#123;    </span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>;     </span><br><span class="line">    <span class="type">int</span> high= n <span class="number">-1</span>; <span class="comment">//设置变量的初始值    </span></span><br><span class="line">    <span class="type">int</span> tmp,j;    </span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;    </span><br><span class="line">        <span class="keyword">for</span> (j= low; j&lt; high; ++j) <span class="comment">//正向冒泡,找到最大者    </span></span><br><span class="line">            <span class="keyword">if</span> (r[j]&gt; r[j+<span class="number">1</span>]) &#123;    </span><br><span class="line">                tmp = r[j]; r[j]=r[j+<span class="number">1</span>];r[j+<span class="number">1</span>]=tmp;    </span><br><span class="line">            &#125;     </span><br><span class="line">        --high;                 <span class="comment">//修改high值, 前移一位    </span></span><br><span class="line">        <span class="keyword">for</span> ( j=high; j&gt;low; --j) <span class="comment">//反向冒泡,找到最小者    </span></span><br><span class="line">            <span class="keyword">if</span> (r[j]&lt;r[j<span class="number">-1</span>]) &#123;    </span><br><span class="line">                tmp = r[j]; r[j]=r[j<span class="number">-1</span>];r[j<span class="number">-1</span>]=tmp;    </span><br><span class="line">            &#125;    </span><br><span class="line">        ++low;                  <span class="comment">//修改low值,后移一位    </span></span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序—直接插入排序-Straight-Insertion-Sort"><a href="#插入排序—直接插入排序-Straight-Insertion-Sort" class="headerlink" title="插入排序—直接插入排序(Straight Insertion Sort)"></a><a name='StraightInsertionSort'>插入排序—直接插入排序(Straight Insertion Sort)</a></h2><blockquote><p>假设在新生报到的时候，我们将新生按照身高排好队(也就是排序)。如果这时有一名学生加入，我们将该名学生加入到队尾。如果这名学生比前面的学生低，那么就让该学生和前面的学生交换位置。这名学生最终会换到应在的位置。这就是插入排序的基本原理。</p></blockquote><blockquote><p>对于起始数组来说，我们认为最初，有一名学生，也就是最左边的元素(i&#x3D;0)，构成一个有序的队伍。</p></blockquote><blockquote><p>随后有第二个学生(i&#x3D;1)加入队伍，第二名学生交换到应在的位置；随后第三个学生加入队伍，第三名学生交换到应在的位置…… 当n个学生都加入队伍时，我们的排序就完成了。</p></blockquote><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。</p><p>要点：设立哨兵，作为临时存储和判断数组边界之用。<br>直接插入排序示例：</p><p><img src="http://my.csdn.net/uploads/201207/17/1342520948_8667.jpg" alt="排序示例"></p><p>如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p><p>算法的实现：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接插入排序：将第一个数据看做一个顺序表，将后面的数据一次插入表中  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>; i&lt;n; i++)&#123;    </span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; a[i<span class="number">-1</span>])&#123;  <span class="comment">//若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入    </span></span><br><span class="line">            <span class="type">int</span> j= i<span class="number">-1</span>;   <span class="comment">//表中最后一个数据  </span></span><br><span class="line">            <span class="type">int</span> x = a[i];  <span class="comment">//复制为哨兵，即存储待排序元素    </span></span><br><span class="line">            a[i] = a[i<span class="number">-1</span>];  <span class="comment">//先后移一个元素 (因为a[i]就是X，所以不怕丢失)   </span></span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; x &lt; a[j])&#123;  <span class="comment">//查找在有序表的插入位置  (遍历表)  </span></span><br><span class="line">                a[j+<span class="number">1</span>] = a[j];    </span><br><span class="line">                j--;  <span class="comment">//元素后移    </span></span><br><span class="line">            &#125;    </span><br><span class="line">            a[j+<span class="number">1</span>] = x;  <span class="comment">//插入到正确位置    </span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">        </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InsertSort ( <span class="built_in">int</span> arr[],<span class="built_in">int</span> <span class="keyword">count</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">int</span> i,j,temp;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;<span class="keyword">count</span>; i )<span class="comment">//数组分两个部分，从第二个数组元素开始</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp = arr[i];<span class="comment">//操作当前元素，先保存在其它变量中</span></span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>; j&gt;<span class="number">-1</span>&amp;&amp;arr[j]&gt;temp;j--)<span class="comment">//从当前元素的上一个元素开始查找合适的位置，一直查找到首元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>时间复杂度：O(n^2)<br>其他的插入排序有二分插入排序，2-路插入排序。</p><h2 id="插入排序—二分插入"><a href="#插入排序—二分插入" class="headerlink" title="插入排序—二分插入"></a><a name='HalfSelectionSort'>插入排序—二分插入</a></h2><blockquote><p>将有序数列折半，看看插入到哪个序列中去</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//折半插入  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BInsertSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>; i&lt;n; i++)&#123;    </span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>,high=i;  </span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; a[i<span class="number">-1</span>])&#123;               <span class="comment">//若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入    </span></span><br><span class="line">            <span class="type">int</span> x = a[i];        <span class="comment">//复制为哨兵，即存储待排序元素    </span></span><br><span class="line">            a[i] = a[i<span class="number">-1</span>];           <span class="comment">//先后移一个元素 (因为a[i]就是X，所以不怕丢失)   </span></span><br><span class="line">            <span class="keyword">while</span>(low&lt;=high)&#123;  <span class="comment">//查找在有序表的插入位置  (遍历表)  </span></span><br><span class="line">                <span class="type">int</span> m=(low+high)/<span class="number">2</span>;  </span><br><span class="line">                <span class="keyword">if</span>(x&lt;a[m])  high=m<span class="number">-1</span>;  </span><br><span class="line">                <span class="keyword">else</span> low=m+<span class="number">1</span>;  </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;j&gt;=high+<span class="number">1</span>;j--)  </span><br><span class="line">                a[j+<span class="number">1</span>]=a[j];  </span><br><span class="line">            a[j+<span class="number">1</span>] = x;      <span class="comment">//插入到正确位置    </span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">        </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="选择排序—简单选择排序-Selection-Sort"><a href="#选择排序—简单选择排序-Selection-Sort" class="headerlink" title="选择排序—简单选择排序 (Selection Sort)"></a><a name='SimpleSelectionSort'>选择排序—简单选择排序 (Selection Sort)</a></h2><blockquote><p>排序的最终结果：任何一个元素都不大于位于它右边的元素 (a[i] &lt;&#x3D; a[j], if i &lt;&#x3D; j)。所以，在有序序列中，最小的元素排在最左的位置，第二小的元素排在i&#x3D;1的位置…… 最大的元素排在最后。</p></blockquote><blockquote><p>选择排序是先找到起始数组中最小的元素，将它交换到i&#x3D;0；然后寻找剩下元素中最小的元素，将它交换到i&#x3D;1的位置…… 直到找到第二大的元素，将它交换到n-2的位置。这时，整个数组的排序完成。</p></blockquote><h3 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h3><p>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。</p><p><strong>选择排序是不稳定的。算法复杂度O(n2)–[n的平方]</strong></p><p>简单选择排序的示例：</p><p><img src="http://my.csdn.net/uploads/201207/18/1342586432_7130.jpg" alt="简单选择排序示例"></p><h3 id="操作方法："><a href="#操作方法：" class="headerlink" title="操作方法："></a>操作方法：</h3><p>第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；<br>第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；<br>以此类推…..<br>第i 趟，则从第i 个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，<br>直到整个序列按关键码有序。</p><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//简单选择排序：遍历一次找到最小与第一个元素呼唤位置，再从第二个元素开始遍历找到最小与第二个元素呼唤位置...  </span><br><span class="line">void SelectSort(<span class="built_in">int</span> a[],<span class="built_in">int</span> <span class="built_in">n</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">n</span>-<span class="number">1</span>;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">int</span> k=i;//记录最小的那个下标的  </span><br><span class="line">        for(<span class="built_in">int</span> j=i+<span class="number">1</span>;j&lt;<span class="built_in">n</span>;j++)  </span><br><span class="line">            <span class="built_in">if</span>(a[j]&lt;a[k])  </span><br><span class="line">                k=j;  </span><br><span class="line">        <span class="built_in">if</span>(k!=i)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">int</span> <span class="built_in">t</span>=a[i];  </span><br><span class="line">            a[i]=a[k];  </span><br><span class="line">            a[k]=<span class="built_in">t</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序—希尔排序-Shell-Sort"><a href="#插入排序—希尔排序-Shell-Sort" class="headerlink" title="插入排序—希尔排序 (Shell Sort)"></a><a name='ShellSort'>插入排序—希尔排序 (Shell Sort)</a></h2><blockquote><p>我们在冒泡排序中提到，最坏的情况发生在大的元素位于数组的起始。这些位于数组起始的大元素需要多次遍历，才能交换到队尾。这样的元素被称为乌龟(turtle)。</p></blockquote><blockquote><p>乌龟元素的原因在于，冒泡排序总是相邻的两个元素比较并交换。所以每次从右向左遍历，大元素只能向右移动一位。(小的元素位于队尾，被称为兔子(rabbit)元素，它们可以很快的交换到队首。)</p></blockquote><blockquote><p>希尔排序是以更大的间隔来比较和交换元素，这样，大的元素在交换的时候，可以向右移动不止一个位置，从而更快的移动乌龟元素。比如，可以将数组分为4个子数组（i&#x3D;4k, i&#x3D;4k+1, i&#x3D;4k+2, i&#x3D;4k+3），对每个子数组进行冒泡排序。比如子数组i&#x3D;0，4，8，12…。此时，每次交换的间隔为4。</p></blockquote><blockquote><p>完成对四个子数组的排序后，数组的顺序并不一定能排列好。希尔排序会不断减小间隔，重新形成子数组，并对子数组冒泡排序…… 当间隔减小为1时，就相当于对整个数组进行了一次冒泡排序。随后，数组的顺序就排列好了。</p></blockquote><p>希尔排序是1959 年由D.L.Shell 提出来的，相对直接排序有较大的改进。希尔排序又叫缩小增量排序。</p><h3 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>1、选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk&#x3D;1；<br>2、按增量序列个数k，对序列进行k 趟排序；<br>3、每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p><p>希尔排序的示例：<br><img src="http://my.csdn.net/uploads/201207/18/1342577299_5077.jpg" alt="希尔排序示例"></p><h3 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h3><p>我们简单处理增量序列：增量序列d &#x3D; {n&#x2F;2 ,n&#x2F;4, n&#x2F;8 …..1} n为要排序数的个数</p><p>即：先将要排序的一组记录按某个增量d（n&#x2F;2,n为要排序数的个数）分成若干组子序列，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d&#x2F;2）对它进行分组，在每组中再进行直接插入排序。继续不断缩小增量直至为1，最后使用直接插入排序完成排序。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希尔排序：去增量为d1的分为一组，共分成d1组分别进行插入排序，然后每组对应元素放在一起，然后取d2...知道d=1  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellSort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> dk;  </span><br><span class="line">    <span class="type">int</span> tmp;  </span><br><span class="line">    <span class="keyword">for</span>(dk=n/<span class="number">2</span>;dk&gt;<span class="number">0</span>;dk/=<span class="number">2</span>)  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=dk;i&lt;n;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            tmp=a[i];  </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;=dk;j-=dk)  </span><br><span class="line">                <span class="keyword">if</span>(tmp&lt;a[j-dk])  </span><br><span class="line">                    a[j]=a[j-dk];  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;  </span><br><span class="line">            a[j]=tmp;  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，特定情况下可以准确估算出关键码的比较次数和记录的移动次数。目前还没有人给出选取最好的增量因子序列的方法。增量因子序列可以有各种取法，有取奇数的，也有取质数的，但需要注意：增量因子中除1 外没有公因子，且最后一个增量因子必须为1。希尔排序方法是一个不稳定的排序方法。</p><h2 id="归并排序-Merge-Sort"><a href="#归并排序-Merge-Sort" class="headerlink" title="归并排序 (Merge Sort)"></a><a name='MergeSort'>归并排序 (Merge Sort)</a></h2><blockquote><p>如果我们要将一副扑克按照数字大小排序。此前已经有两个人分别将其中的一半排好顺序。那么我们可以将这两堆扑克向上放好，假设小的牌在上面。此时，我们将看到牌堆中最上的两张牌。</p></blockquote><blockquote><p>我们取两张牌中小的那张取出放在手中。两个牌堆中又是两张牌暴露在最上面，继续取小的那张放在手中…… 直到所有的牌都放入手中，那么整副牌就排好顺序了。这就是归并排序。</p></blockquote><h3 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h3><p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br>归并排序示例：</p><p><img src="http://my.csdn.net/uploads/201207/21/1342842633_6751.jpg" alt="归并排序示例"></p><p>下面的实现中，使用递归：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序  </span></span><br><span class="line"><span class="built_in">void</span> copyArray(<span class="built_in">int</span> source[], <span class="built_in">int</span> dest[],<span class="built_in">int</span> len,<span class="built_in">int</span> first)    </span><br><span class="line">&#123;    </span><br><span class="line">    <span class="built_in">int</span> i;    </span><br><span class="line">    <span class="built_in">int</span> j=first;    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)    </span><br><span class="line">    &#123;    </span><br><span class="line">        dest[j] = source[i];    </span><br><span class="line">        j++;    </span><br><span class="line">    &#125;    </span><br><span class="line">            </span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">//相邻两个有序子序列的归并函数，将a[low...mid]和a[mid+1...high]归并到T[LOW..high]中   </span></span><br><span class="line"><span class="built_in">void</span> merge(<span class="built_in">int</span> a[],<span class="built_in">int</span> left,<span class="built_in">int</span> right)    </span><br><span class="line">&#123;    </span><br><span class="line">    <span class="built_in">int</span> begin1 = left;    </span><br><span class="line">    <span class="built_in">int</span> mid = (left+right)/<span class="number">2</span> ;    </span><br><span class="line">    <span class="built_in">int</span> begin2 = mid+<span class="number">1</span>;    </span><br><span class="line">    <span class="built_in">int</span> k=<span class="number">0</span>;    </span><br><span class="line">    <span class="built_in">int</span> newArrayLen = right-left+<span class="number">1</span>;    </span><br><span class="line">    <span class="built_in">int</span> *b = (<span class="built_in">int</span>*)malloc(newArrayLen*sizeof(<span class="built_in">int</span>));    </span><br><span class="line">    <span class="keyword">while</span>(begin1&lt;=mid &amp;&amp; begin2&lt;=right)    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span>(a[begin1]&lt;=a[begin2])    </span><br><span class="line">            b[k++] = a[begin1++];    </span><br><span class="line">        <span class="keyword">else</span>    </span><br><span class="line">            b[k++] = a[begin2++];    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">while</span>(begin1&lt;=mid)    </span><br><span class="line">        b[k++] = a[begin1++];    </span><br><span class="line">    <span class="keyword">while</span>(begin2&lt;=right)    </span><br><span class="line">        b[k++] = a[begin2++];    </span><br><span class="line">    copyArray(b,a,newArrayLen,left);    </span><br><span class="line">    free(b);    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">//归并函数,将a[low...high]归并到T[low...high]中  </span></span><br><span class="line"><span class="built_in">void</span> mergeSort(<span class="built_in">int</span> a[],<span class="built_in">int</span> left,<span class="built_in">int</span> right)    </span><br><span class="line">&#123;    </span><br><span class="line">    <span class="built_in">int</span> i;    </span><br><span class="line">    <span class="comment">// 保证至少有两个元素    </span></span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)    </span><br><span class="line">    &#123;    </span><br><span class="line">        i = (left+right)/<span class="number">2</span>;    </span><br><span class="line">        mergeSort(a,left,i);    </span><br><span class="line">        mergeSort(a,i+<span class="number">1</span>,right);    </span><br><span class="line">        merge(a,left,right);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;   </span><br><span class="line"><span class="built_in">void</span> MergeSort(<span class="built_in">int</span> a[],<span class="built_in">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    mergeSort(a,<span class="number">0</span>,n<span class="number">-1</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交换排序—快速排序-Quick-Sort"><a href="#交换排序—快速排序-Quick-Sort" class="headerlink" title="交换排序—快速排序 (Quick Sort)"></a><a name='QuickSort'>交换排序—快速排序 (Quick Sort)</a></h2><blockquote><p>我们依然考虑按照身高给学生排序。在快速排序中，我们随便挑出一个学生，以该学生的身高为参考(pivot)。然后让比该学生低的站在该学生的右边，剩下的站在该学生的左边。</p></blockquote><blockquote><p>很明显，所有的学生被分成了两组。该学生右边的学生的身高都大于该学生左边的学生的身高。</p></blockquote><blockquote><p>我们继续，在低身高学生组随便挑出一个学生，将低身高组的学生分为两组(很低和不那么低)。同样，将高学生组也分为两组(不那么高和很高)。</p></blockquote><blockquote><p>如此继续细分，直到分组中只有一个学生。当所有的分组中都只有一个学生时，则排序完成。</p></blockquote><h3 id="基本思想-5"><a href="#基本思想-5" class="headerlink" title="基本思想"></a>基本思想</h3><p>1）选择一个基准元素,通常选择第一个元素或者最后一个元素,<br>2）通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的 元素值比基准值大。<br>3）此时基准元素在其排好序后的正确位置<br>4）然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序。<br>快速排序的示例：<br>（a）一趟排序的过程：</p><p><img src="http://my.csdn.net/uploads/201207/20/1342782317_4426.jpg" alt="一趟排序的过程"></p><p>（b）排序的全过程</p><p><img src="http://my.csdn.net/uploads/201207/20/1342782329_8314.jpg" alt="排序的全过程"></p><h3 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h3><p>在下面的实现中，使用递归:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序   </span></span><br><span class="line"><span class="comment">//第一个参数要排的数组，第二个参数第一个数，第三个参数数组成员个数  </span></span><br><span class="line"><span class="built_in">void</span> kuaipai(<span class="built_in">int</span> <span class="built_in">array</span>[],<span class="built_in">int</span> low,<span class="built_in">int</span> hight)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">int</span> i,j,t,m;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;hight)  </span><br><span class="line">    &#123;  </span><br><span class="line">        i=low;  </span><br><span class="line">        j=hight;  </span><br><span class="line">        t=<span class="built_in">array</span>[low];<span class="comment">//第一个数为轴  </span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; <span class="built_in">array</span>[j]&gt;t)<span class="comment">//从右边找出小于轴的数  </span></span><br><span class="line">                j--;  </span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)<span class="comment">//将小于轴的数array[j]放到左边array[i]的位置  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                m=<span class="built_in">array</span>[i];  </span><br><span class="line">                <span class="built_in">array</span>[i]=<span class="built_in">array</span>[j];  </span><br><span class="line">                <span class="built_in">array</span>[j]=m;  </span><br><span class="line">                i++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; <span class="built_in">array</span>[i]&lt;=t)<span class="comment">//从左边找出大于轴的数  </span></span><br><span class="line">                i++;  </span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)<span class="comment">//将大于轴的数array[i]放在右边array[j]的位置  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                m=<span class="built_in">array</span>[j];  </span><br><span class="line">                <span class="built_in">array</span>[j]=<span class="built_in">array</span>[i];  </span><br><span class="line">                <span class="built_in">array</span>[i]=m;  </span><br><span class="line">                j--;  </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="built_in">array</span>[i]=t;<span class="comment">//轴放在中间,现在就有两个区域了分别是[0 i-1]和[i+1 hight],分别快排  </span></span><br><span class="line">        kuaipai(<span class="built_in">array</span>,<span class="number">0</span>,i<span class="number">-1</span>);  </span><br><span class="line">        kuaipai(<span class="built_in">array</span>,i+<span class="number">1</span>,hight);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法。</p><p>理想的pivot是采用分组元素中的中位数。然而寻找中位数的算法需要另行实现。也可以随机选取元素作为pivot，随机选取也需要另行实现。为了简便，我每次都采用中间位置的元素作为pivot。</p><h2 id="选择排序—堆排序-Heap-Sort"><a href="#选择排序—堆排序-Heap-Sort" class="headerlink" title="选择排序—堆排序 (Heap Sort)"></a><a name='HeapSort'>选择排序—堆排序 (Heap Sort)</a></h2><blockquote><p>堆(heap)是常见的数据结构。它是一个有优先级的队列。最常见的堆的实现是一个有限定操作的Complete Binary Tree。这个Complete Binary Tree保持堆的特性，也就是父节点(parent)大于子节点(children)。因此，堆的根节点是所有堆元素中最小的。堆定义有插入节点和删除根节点操作，这两个操作都保持堆的特性。</p></blockquote><blockquote><p>我们可以将无序数组构成一个堆，然后不断取出根节点，最终构成一个有序数组。</p></blockquote><p>堆排序是一种树形选择排序，是对直接选择排序的有效改进。</p><h3 id="基本思想-6"><a href="#基本思想-6" class="headerlink" title="基本思想"></a>基本思想</h3><p>堆的定义如下：具有n个元素的序列（k1,k2,…,kn),当且仅当满足<br><img src="http://my.csdn.net/uploads/201207/18/1342589718_3742.jpg" alt="堆的定义"></p><p>时称之为堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最小项（小顶堆）。</p><p>若以一维数组存储一个堆，则堆对应一棵完全二叉树，且所有非叶结点的值均不大于(或不小于)其子女的值，根结点（堆顶元素）的值是最小(或最大)的。如：<br>(a)大顶堆序列：（96, 83,27,38,11,09)<br>(b)小顶堆序列：（12，36，24，85，47，30，53，91）</p><p><img src="http://my.csdn.net/uploads/201207/18/1342592355_2560.jpg" alt="堆顶元素"></p><h3 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h3><p>从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//堆排序:树形选择排序，将带排序记录看成完整的二叉树，第一步：建立初堆，第二步：调整堆  </span></span><br><span class="line"><span class="comment">//第二步：调整堆  </span></span><br><span class="line"><span class="built_in">void</span> HeapAdjust(<span class="built_in">int</span> a[],<span class="built_in">int</span> s,<span class="built_in">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">//调整为小根堆，从小到大  </span></span><br><span class="line">    <span class="built_in">int</span> rc=a[s];  </span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">2</span>*s;j&lt;=n;j*=<span class="number">2</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(j&lt;n &amp;&amp; a[j]&gt;a[j+<span class="number">1</span>])<span class="comment">//判断左右子数大小  </span></span><br><span class="line">            j++;  </span><br><span class="line">        <span class="keyword">if</span>(rc&lt;=a[j])  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        a[s]=a[j];  </span><br><span class="line">        s=j;  </span><br><span class="line">    &#125;  </span><br><span class="line">    a[s]=rc;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//第一步：建初堆  </span></span><br><span class="line"><span class="built_in">void</span> CreatHeap(<span class="built_in">int</span> a[],<span class="built_in">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">//小根堆  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=n/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)  </span><br><span class="line">        HeapAdjust(a,i,n);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//整合  </span></span><br><span class="line"><span class="built_in">void</span> HeapSort(<span class="built_in">int</span> a[],<span class="built_in">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    CreatHeap(a,n);<span class="comment">//第一步，建立初堆  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=n;i&gt;<span class="number">1</span>;i--)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">int</span> x=a[<span class="number">1</span>];<span class="comment">//堆顶与最后一个元素互换  </span></span><br><span class="line">        a[<span class="number">1</span>]=a[i];  </span><br><span class="line">        a[i]=x;  </span><br><span class="line">        HeapAdjust(a,<span class="number">1</span>,i<span class="number">-1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>设树深度为k，<img src="http://my.csdn.net/uploads/201207/18/1342597015_2320.jpg" alt="图例">。从根到叶的筛选，元素比较次数至多2(k-1)次，交换记录至多k 次。所以，在建好堆后，排序过程中的筛选次数不超过下式：<br><img src="http://my.csdn.net/uploads/201207/18/1342597082_9043.jpg" alt="图例"><br>而建堆时的比较次数不超过4n 次，因此堆排序最坏情况下，时间复杂度也为：O(nlogn )。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a name='总结'>总结</a></h2><p>除了上面的算法，还有诸如Bucket Sorting, Radix Sorting涉及。我会在未来实现了相关算法之后，补充到这篇文章中。相关算法的时间复杂度分析可以参考书目中找到。我自己也做了粗糙的分析。如果博客 园能支持数学公式的显示，我就把自己的分析过程贴出来，用于引玉。</p><p>上面的各个代码是我自己写的，只进行了很简单的测试。如果有错漏，先谢谢你的指正。</p><p>最后，上文中用到的交换函数为：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* By Vamei */</span></span><br><span class="line"><span class="comment">/* exchange the values pointed by pa and pb*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *pa, <span class="type">int</span> *pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> tmp;</span><br><span class="line">  tmp = *pa;</span><br><span class="line">  *pa = *pb;</span><br><span class="line">  *pb = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="几种排序算法的比较和选择"><a href="#几种排序算法的比较和选择" class="headerlink" title="几种排序算法的比较和选择"></a>几种排序算法的比较和选择</h3><p><img src="http://my.csdn.net/uploads/201207/19/1342700879_2982.jpg" alt="时间复杂度和空间复杂度"></p><ul><li>选取排序方法需要考虑的因素：<br> (1) 待排序的元素数目n；<br> (2) 元素本身信息量的大小；<br> (3) 关键字的结构及其分布情况；<br> (4) 语言工具的条件，辅助空间的大小等。</li><li>一些建议：<br> (1) 若n较小(n &lt;&#x3D; 50)，则可以采用直接插入排序或直接选择排序。由于直接插入排序所需的记录移动操作较直接选择排序多，因而当记录本身信息量较大时，用直接选择排序较好。<br> (2) 若文件的初始状态已按关键字基本有序，则选用直接插入或冒泡排序为宜。<br> (3) 若n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序。快速排序是目前基于比较的内部排序法中被认为是最好的方法。<br> (4) 在基于比较排序方法中，每次比较两个关键字的大小之后，仅仅出现两种可能的转移，因此可以用一棵二叉树来描述比较判定过程，由此可以证明：当文件的n个关键字随机分布时，任何借助于”比较”的排序算法，至少需要O(nlog2n)的时间。<br> (5) 当记录本身信息量较大时，为避免耗费大量时间移动记录，可以用链表作为存储结构。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 攻城狮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诀</title>
      <link href="/blog//2015/07/03/tactic.html"/>
      <url>/blog//2015/07/03/tactic.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code></li><li>诀 &#x2F; 图片源于网络…<span id="more"></span></li></ul><h2 id="诀"><a href="#诀" class="headerlink" title="诀"></a>诀</h2><p><img src="https://img02.anheyu.com/adminuploads/1/2022/09/05/6315e1453758c.webp!cover" alt="诀 / 图片源于网络"></p><p>说好不再挽留<br>可回忆似走非走<br>曾经的钧紫色年华<br>忽觉随风渐远<br>你的世界已被晕染<br>呓语过的细雨闲花<br>唯留缱绻<br>碎了满地的诺言<br>随紫色翩翩划作丝丝弧线<br>与彼回旋<br>别道依恋</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poetry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="/blog//2015/04/16/naging.html"/>
      <url>/blog//2015/04/16/naging.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code></li><li>碎碎念 &#x2F; 图片源于网络…<span id="more"></span></li></ul><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p align="center">    <a><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2015-04-16/da08d3e42da0cc40dc0af69c26d7a066/1819713-7cefdb35d242afda.jpg", width=320px alt="碎碎念 / 图片源于网络"></a></p><p>一点黄莺脆，<br>惊断胭脂泪。<br>寄雁语粉笺，<br>蛩吟离殇碎。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poetry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墨筱雨</title>
      <link href="/blog//2013/05/25/s-ink.html"/>
      <url>/blog//2013/05/25/s-ink.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code></li><li>墨筱雨 &#x2F; 图片源于网络…<span id="more"></span></li></ul><h2 id="墨筱雨"><a href="#墨筱雨" class="headerlink" title="墨筱雨"></a>墨筱雨</h2><p><img src="https://cdn.jsdelivr.net/gh/Yojoon/ImgHosting/images-blog/2013-05-25/dbd860df0ab197a62bd89a7630285db3/1819713-f2a0379545299e6a.jpg" alt="墨筱雨 / 图片源于网络"></p><p>丝雨抚蕊，缠绵似醉。<br>勾勒画珠帘，留存霁缱绻。<br>唱和于花间，弥散兮心田。<br>恰伊人红尘踏歌，引几多眷恋。<br>若梦回古韵江南，当别样容颜。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poetry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又相见</title>
      <link href="/blog//2012/12/14/met-again.html"/>
      <url>/blog//2012/12/14/met-again.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>文&#x2F;一月筠</strong> <code>-- 转载请注明 --</code></li><li>又相见 &#x2F; 图片源于网络…<span id="more"></span></li></ul><h2 id="又相见"><a href="#又相见" class="headerlink" title="又相见"></a>又相见</h2><p>凄凄何似向前情，<br>乌鹊桥边湿霖铃。<br>曲终弥散化蝶影，<br>素衣浅唱踏歌行。</p>        <div id="aplayer-RJYuyAGG" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-RJYuyAGG"),            narrow: false,            autoplay: false,            showlrc: 3,            music: {              title: "喜欢你",              author: "邓紫棋",              url: "https://music.163.com/song/media/outer/url?id=28949444",              pic: "https://api.i-meto.com/meting/api?server=netease&type=pic&id=8896148580676276&auth=435419eb5c22febe50a3251373ae8aa8c085f2d1",              lrc: "https://api.i-meto.com/meting/api?server=netease&type=lrc&id=28949444&auth=bff6064dd8d16ad21fd8dffb217686dd992360c5"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h3 id="引用典故"><a href="#引用典故" class="headerlink" title="引用典故"></a>引用典故</h3><blockquote><p><code>乌鹊桥</code>边湿霖铃</p></blockquote><p><a href="http://baike.baidu.com/link?url=XCIIWX8Mfw9V9tI6EEUHzsWbQLbSqnMd0m3M62KEsIlypCd905_sRK9x94Q-EuraqAoywuIrWoXO5wRP92WuS6vregPq4M-RsEAOpYtS5AYjWS_KRPHV-tz-_aZGoc_Y#2">乌鹊桥</a>位于苏州古城区中心，虽历经风雨，民末清初其规模在苏州古城内仍为诸石拱桥之最。据民间传说，乌鹊桥与玄妙观三清殿屋脊等高。此说法虽可能有夸大，但由此亦可知<code>乌鹊桥</code>非同寻常了。该桥纯用武康石构成，雨后斜阳，明丹荧紫，甚为壮观</p><blockquote><p>乌鹊桥边<code>湿霖铃</code></p></blockquote><p><a href="http://baike.baidu.com/link?url=uNZWQLizw1kP7-x67czF3xB0kxTEFuybBpaSnxI1ydSAtJRKUjV6-cqgDmWM_oqb_F0cpCYjlQyKjTQuZ34_lnZE_sxTN1CZLSA_PKHm6hTdrsDIq0TEwxwLJdkQnyqX">《雨霖铃》</a>词牌名,马嵬兵变后，杨贵妃缢死，在平定叛乱之后，玄宗北还，一路戚雨沥沥，风雨吹打皇銮的金铃上，玄宗因悼念杨贵妃而作此曲。《碧鸡漫志》卷五引《明皇杂录》及《杨妃外传》云：“明皇既幸蜀，西南行，初入斜谷，霖雨弥旬，于栈道雨中闻铃，音与山相应。上既悼念贵妃，采其声为《雨霖铃》曲，以寄恨焉。时梨园弟子惟张野狐一人，善筚篥，因吹之，遂传于世。”这也就是词牌《雨霖铃》的由来。<em>宋代柳永的《雨霖铃》最为有名，而其中的“多情自古伤离别”一句更成为千古名句。</em></p><blockquote><p>曲终弥散<code>化蝶影</code></p></blockquote><p><a href="http://baike.bsaidu.com/item/%E6%A2%81%E7%A5%9D%E5%8C%96%E8%9D%B6/5414061?sefr=cr#3">“化蝶飞”</a>也作“羽化成蝶”。东晋时，上虞祝英台女扮男装前往会稽（川剧为尼山）求学，路遇会稽梁山伯，因志同道合而结为兄弟并同窗三载。后，祝英台归家，行前托媒师母许婚梁山伯。十八相送，祝英台以“妹”相许。梁山伯知情，往祝家求婚，此时，祝父公远已将女许婚马太守之子马文才。梁祝二人楼台相会，之后，梁山伯抱病归家，病亡。祝英台新婚之时，花轿绕道至梁山伯坟前祭奠，惊雷裂墓，英台入坟，梁祝化蝶双舞。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poetry </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
